{
  "address": "0x88b2C70AbE8d30A2Cd71ac7B5128aD19b306c0dC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "memberAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum DAO.Role",
          "name": "role",
          "type": "uint8"
        }
      ],
      "name": "MemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum DAO.Duration",
          "name": "duration",
          "type": "uint8"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "upVote",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        },
        {
          "internalType": "enum DAO.Role",
          "name": "_role",
          "type": "uint8"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "enum DAO.Duration",
          "name": "_duration",
          "type": "uint8"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "valid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "startDate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "endDate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "upVotes",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "downVotes",
              "type": "uint32"
            },
            {
              "internalType": "int32",
              "name": "voteCount",
              "type": "int32"
            },
            {
              "internalType": "address[]",
              "name": "voters",
              "type": "address[]"
            }
          ],
          "internalType": "struct DAO.Proposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "address",
          "name": "memberAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "memberSince",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "startDate",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endDate",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "upVotes",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "downVotes",
          "type": "uint32"
        },
        {
          "internalType": "int32",
          "name": "voteCount",
          "type": "int32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_vote",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x693460992176f921fd45da23b495dff5e3c86bf2cfedc2eec32a59e5bc5d170d",
  "receipt": {
    "to": null,
    "from": "0x6EC0B2CF70e74B2D9e5b9f14a6CE7936dCC48066",
    "contractAddress": "0x88b2C70AbE8d30A2Cd71ac7B5128aD19b306c0dC",
    "transactionIndex": 55,
    "gasUsed": "3371344",
    "logsBloom": "0x
    "blockHash": "0x204308e9d2dd17f626f20104f955bf844d48bda2f9e7cf8316f1a74391884349",
    "transactionHash": "0x693460992176f921fd45da23b495dff5e3c86bf2cfedc2eec32a59e5bc5d170d",
    "logs": [],
    "blockNumber": 3792924,
    "cumulativeGasUsed": "6636845",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6272616d00000000000000000000000000000000000000000000000000000000"
  ],
  "numDeployments": 3,
  "solcInputHash": "d9179287f142113743ed3ed2053dd149",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum DAO.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum DAO.Duration\",\"name\":\"duration\",\"type\":\"uint8\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"upVote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"enum DAO.Role\",\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"enum DAO.Duration\",\"name\":\"_duration\",\"type\":\"uint8\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"upVotes\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"downVotes\",\"type\":\"uint32\"},{\"internalType\":\"int32\",\"name\":\"voteCount\",\"type\":\"int32\"},{\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"}],\"internalType\":\"struct DAO.Proposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"memberSince\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"upVotes\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"downVotes\",\"type\":\"uint32\"},{\"internalType\":\"int32\",\"name\":\"voteCount\",\"type\":\"int32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Bram Mathijssen\",\"kind\":\"dev\",\"methods\":{\"addMember(address,bytes32,uint8)\":{\"params\":{\"_address\":\"Address of the member\",\"_name\":\"Member of the name in bytes32\",\"_role\":\"Role of the member (0 = USER, 1 = ADMIN)\"}},\"constructor\":{\"details\":\"Initialises the one who deploys the contract as the first admin member\",\"params\":{\"_name\":\"name of owner in bytes32\"}},\"createProposal(string,string,uint8)\":{\"params\":{\"_description\":\"Description of the proposal\",\"_duration\":\"Duration which the proposal will be open from the moment of creation (0 = DAY, 1 = WEEK, 2 = MONTH)\",\"_title\":\"Title of the proposal\"}},\"getAllProposals()\":{\"details\":\"Loops over all the entries from the proposals mapping by using the _proposalIds as associative variable\"},\"getMembers()\":{\"details\":\"Loops over all the entries from the members mapping by using the addresses from _memberslist as associative array  returning individual properties from members, excluding the role since it's a mapping.\"},\"vote(uint256,bool)\":{\"params\":{\"_proposalNumber\":\"Id of the proposal which will be voted on\",\"_vote\":\"To give a downvote bool should be 0, to give a upvote bool should be 1\"}}},\"title\":\"Dapper.dao\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMember(address,bytes32,uint8)\":{\"notice\":\"Adds a member to the DAO, only Admins can add new members\"},\"createProposal(string,string,uint8)\":{\"notice\":\"Creates a new Proposal, either an admin or user can create a proposal.\"},\"getAllProposals()\":{\"notice\":\"Gets all the proposals from the proposals mapping\"},\"getMembers()\":{\"notice\":\"Gets all the members from the members mapping\"},\"members(address)\":{\"notice\":\"Member address to member struct\"},\"proposals(uint256)\":{\"notice\":\"_proposalId to proposal struct\"},\"vote(uint256,bool)\":{\"notice\":\"up or downvote a proposal by id\"}},\"notice\":\"A contract to manage proposals which can be voted on by members which are registered by others\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO.sol\":\"DAO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\n/// @title Dapper.dao\\r\\n/// @author Bram Mathijssen\\r\\n/// @notice A contract to manage proposals which can be voted on by members which are registered by others\\r\\ncontract DAO {\\r\\n    /* Type declarations */\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    /// @notice Enum to declare the role for members\\r\\n    enum Role {\\r\\n        USER,\\r\\n        ADMIN\\r\\n    }\\r\\n\\r\\n    /// @notice Enum to hold the durations for a proposal\\r\\n    enum Duration {\\r\\n        DAY,\\r\\n        WEEK,\\r\\n        MONTH\\r\\n    }\\r\\n\\r\\n    /* State Variables */\\r\\n    Counters.Counter private _proposalIds;\\r\\n    Counters.Counter private _memberIds;\\r\\n    address private immutable i_owner;\\r\\n    bytes32 private constant USER = keccak256(abi.encodePacked(\\\"USER\\\"));\\r\\n    bytes32 private constant ADMIN = keccak256(abi.encodePacked(\\\"ADMIN\\\"));\\r\\n\\r\\n    /// @notice Associative array to get members from mapping\\r\\n    address[] private _membersList;\\r\\n\\r\\n    /* Mappings */\\r\\n    /// @notice Member address to member struct\\r\\n    mapping(address => Member) public members;\\r\\n\\r\\n    /// @notice _proposalId to proposal struct\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n\\r\\n    /* Structs */\\r\\n    /**\\r\\n    @param memberAddress Address of the member.\\r\\n    @param valid Boolean to check if instance of struct has been created\\r\\n    @param name Name of member stored in bytes32\\r\\n    @param memberSince Timestamp of when member has been added\\r\\n    @param role Mapping which holds roles of member\\r\\n    */\\r\\n    struct Member {\\r\\n        address memberAddress;\\r\\n        bool valid; \\r\\n        bytes32 name;\\r\\n        uint256 memberSince;\\r\\n        mapping(bytes32 => bool) role; \\r\\n    }\\r\\n\\r\\n    /** \\r\\n    @param id Id of the proposal which corresponds to the _proposalIds counter.\\r\\n    @param title Title of the proposal.\\r\\n    @param creator Address of the creator of the proposal.\\r\\n    @param valid Boolean to check if proposal has been initialised in mapping\\r\\n    @param active Boolean to check if proposal is currently active for voting\\r\\n    @param description Description of the proposal\\r\\n    @param startDate Start date of the proposal, startDate is equal to creation date of the proposal\\r\\n    @param endDate End Date of the proposal, after this date voting will close\\r\\n    @param upVotes Holds the amount of upvotes for the proposal\\r\\n    @param downVotes Holds the amount of downvotes for the proposal\\r\\n    @param downVotes Holds the amount of downvotes for the proposal\\r\\n    @param voteCount Holds the total amount of votes for the proposal\\r\\n    @param voters Holds a list of all the addresses which have voted on the proposal \\r\\n    */\\r\\n    struct Proposal {\\r\\n        uint256 id;\\r\\n        string title;\\r\\n        address creator;\\r\\n        bool valid;\\r\\n        bool active;\\r\\n        string description;\\r\\n        uint32 startDate;\\r\\n        uint32 endDate;\\r\\n        uint32 upVotes;\\r\\n        uint32 downVotes;\\r\\n        int32 voteCount;\\r\\n        address[] voters;\\r\\n    }\\r\\n\\r\\n    /* Events */\\r\\n    event MemberAdded(address indexed memberAddress, bytes32 name, Role role);\\r\\n    event ProposalCreated(\\r\\n        uint256 indexed proposalCount,\\r\\n        string description,\\r\\n        Duration duration\\r\\n    );\\r\\n    event Voted(\\r\\n        uint256 indexed proposalNumber,\\r\\n        bool upVote,\\r\\n        address voterAddress\\r\\n    );\\r\\n\\r\\n    /* Modifiers */\\r\\n    /** @dev This modifier checks if a member has the required role(s)\\r\\n     * @param _role either USER or ADMIN role\\r\\n     */\\r\\n    modifier hasRole(bytes32 _role) {\\r\\n        bool authorized;\\r\\n\\r\\n        if (_role == USER) {\\r\\n            members[msg.sender].role[ADMIN] || members[msg.sender].role[USER]\\r\\n                ? authorized = true\\r\\n                : authorized = false;\\r\\n        }\\r\\n        if (_role == ADMIN) {\\r\\n            members[msg.sender].role[ADMIN]\\r\\n                ? authorized = true\\r\\n                : authorized = false;\\r\\n        }\\r\\n        require(authorized == true, \\\"don't have correct role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* Constructor */\\r\\n    /** @dev Initialises the one who deploys the contract as the first admin member\\r\\n     * @param _name name of owner in bytes32\\r\\n     */\\r\\n    constructor(bytes32 _name) {\\r\\n        i_owner = msg.sender;\\r\\n\\r\\n        // load struct in storage before assigning values since we are using a mapping inside struct\\r\\n        Member storage member = members[msg.sender];\\r\\n        member.valid = true;\\r\\n        member.name = _name;\\r\\n        member.memberSince = block.timestamp;\\r\\n        member.role[ADMIN] = true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /* External Functions */\\r\\n    /** @notice Adds a member to the DAO, only Admins can add new members\\r\\n     * @param _address Address of the member\\r\\n     * @param _name Member of the name in bytes32\\r\\n     * @param _role Role of the member (0 = USER, 1 = ADMIN)\\r\\n     */\\r\\n    function addMember(\\r\\n        address _address,\\r\\n        bytes32 _name,\\r\\n        Role _role\\r\\n    ) external hasRole(ADMIN) {\\r\\n        require(_address != address(0), \\\"address can't be 0\\\");\\r\\n        require(_name != bytes32(0), \\\"name can't be 0\\\");\\r\\n        require(members[_address].valid == false, \\\"member already exists\\\");\\r\\n\\r\\n        Member storage member = members[_address];\\r\\n        member.memberAddress = _address;\\r\\n        member.valid = true;\\r\\n        member.name = _name;\\r\\n        member.memberSince = block.timestamp;\\r\\n        member.role[_getRole(_role)] = true;\\r\\n\\r\\n        _membersList.push(_address);\\r\\n\\r\\n        emit MemberAdded(_address, _name, _role);\\r\\n    }\\r\\n\\r\\n    /** @notice Creates a new Proposal, either an admin or user can create a proposal.\\r\\n     * @param _title Title of the proposal\\r\\n     * @param _description Description of the proposal\\r\\n     * @param _duration Duration which the proposal will be open from the moment of creation (0 = DAY, 1 = WEEK, 2 = MONTH)\\r\\n     */\\r\\n    function createProposal(\\r\\n        string memory _title,\\r\\n        string memory _description,\\r\\n        Duration _duration\\r\\n    ) external hasRole(USER) {\\r\\n        require(bytes(_description).length > 10, \\\"need atleast 10 characters\\\");\\r\\n        _proposalIds.increment();\\r\\n        uint256 proposalId = _proposalIds.current();\\r\\n        proposals[proposalId] = Proposal({\\r\\n            id: proposalId,\\r\\n            title: _title,\\r\\n            creator: msg.sender,\\r\\n            valid: true,\\r\\n            description: _description,\\r\\n            startDate: uint32(block.timestamp),\\r\\n            endDate: uint32(_getTimestampByDuration(_duration)),\\r\\n            active: true,\\r\\n            voteCount: 0,\\r\\n            upVotes: 0,\\r\\n            downVotes: 0,\\r\\n            voters: new address[](0)\\r\\n        });\\r\\n        emit ProposalCreated(proposalId, _description, _duration);\\r\\n    }\\r\\n\\r\\n    /** @notice up or downvote a proposal by id\\r\\n     * @param _proposalNumber Id of the proposal which will be voted on\\r\\n     * @param _vote To give a downvote bool should be 0, to give a upvote bool should be 1\\r\\n     */\\r\\n    function vote(uint256 _proposalNumber, bool _vote) external hasRole(USER) {\\r\\n        Proposal storage proposal = proposals[_proposalNumber];\\r\\n        require(proposal.valid == true, \\\"proposal not valid\\\");\\r\\n        require(proposal.active == true, \\\"proposal not active\\\");\\r\\n        require(block.timestamp < proposal.endDate, \\\"proposal ended\\\");\\r\\n        require(\\r\\n            block.timestamp >= proposal.startDate,\\r\\n            \\\"proposal hasn't started\\\"\\r\\n        );\\r\\n        require(\\r\\n            _checkVoted(_proposalNumber, msg.sender) == false,\\r\\n            \\\"already voted\\\"\\r\\n        );\\r\\n        if (_vote) {\\r\\n            proposal.upVotes++;\\r\\n        } else {\\r\\n            proposal.downVotes++;\\r\\n        }\\r\\n        proposal.voters.push(msg.sender);\\r\\n        proposal.voteCount++;\\r\\n        emit Voted(_proposalNumber, _vote, msg.sender);\\r\\n    }\\r\\n\\r\\n    /** @notice Gets all the proposals from the proposals mapping\\r\\n     *  @dev Loops over all the entries from the proposals mapping by using the _proposalIds as associative variable\\r\\n     */\\r\\n    function getAllProposals() external view returns (Proposal[] memory) {\\r\\n        uint256 proposalId = _proposalIds.current();\\r\\n\\r\\n        Proposal[] memory proposalsList = new Proposal[](proposalId);\\r\\n        for (uint256 i = 0; i < proposalId; i++) {\\r\\n            uint256 currentId = i + 1;\\r\\n            Proposal storage currentItem = proposals[currentId];\\r\\n            proposalsList[i] = currentItem;\\r\\n        }\\r\\n        return proposalsList;\\r\\n    }\\r\\n\\r\\n    /** @notice Gets all the members from the members mapping\\r\\n     *  @dev Loops over all the entries from the members mapping by using the addresses from _memberslist as associative array\\r\\n     *  returning individual properties from members, excluding the role since it's a mapping.\\r\\n     */\\r\\n    function getMembers()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address[] memory,\\r\\n            bool[] memory,\\r\\n            bytes32[] memory,\\r\\n            uint256[] memory\\r\\n        )\\r\\n    {\\r\\n        address[] memory addresses = new address[](_membersList.length);\\r\\n        bool[] memory valid = new bool[](_membersList.length);\\r\\n        bytes32[] memory names = new bytes32[](_membersList.length);\\r\\n        uint256[] memory memberSince = new uint256[](_membersList.length);\\r\\n\\r\\n        for (uint256 i = 0; i < _membersList.length; i++) {\\r\\n            address tempAddress = _membersList[i];\\r\\n            addresses[i] = members[tempAddress].memberAddress;\\r\\n            valid[i] = members[tempAddress].valid;\\r\\n            names[i] = members[tempAddress].name;\\r\\n            memberSince[i] = members[tempAddress].memberSince;\\r\\n        }\\r\\n        return (addresses, valid, names, memberSince);\\r\\n    }\\r\\n\\r\\n    /** @notice Helper function to get the timestamp corresponding to the given duration\\r\\n     * @param _duration Duration which the proposal will be open from the moment of creation (0 = DAY, 1 = WEEK, 2 = MONTH)\\r\\n     */\\r\\n    function _getTimestampByDuration(\\r\\n        Duration _duration\\r\\n    ) private view returns (uint256) {\\r\\n        if (_duration == Duration.DAY) {\\r\\n            return block.timestamp + 1 days;\\r\\n        }\\r\\n        if (_duration == Duration.WEEK) {\\r\\n            return block.timestamp + 1 weeks;\\r\\n        }\\r\\n        if (_duration == Duration.MONTH) {\\r\\n            return block.timestamp + 4 weeks;\\r\\n        }\\r\\n        revert(\\\"Invalid duration\\\"); // Reverts if no valid duration was found\\r\\n    }\\r\\n\\r\\n    /** @notice Change the role of a member, can only be called by an Admin\\r\\n     * @param _memberAddress Address of the member which will be granted another role\\r\\n     * @param _role Enum of the role which will be granted to the member (0 = USER, 1 = ADMIN)\\r\\n     */\\r\\n    function _grantRole(\\r\\n        address _memberAddress,\\r\\n        Role _role\\r\\n    ) private hasRole(ADMIN) {\\r\\n        Member storage member = members[_memberAddress];\\r\\n        member.role[_getRole(_role)] = true;\\r\\n    }\\r\\n\\r\\n    /** @notice Helper function to get the keccak256 encoded bytes32 of a role\\r\\n     * @param _role Enum of the role which will be granted to the member (0 = USER, 1 = ADMIN)\\r\\n     */\\r\\n    function _getRole(Role _role) private pure returns (bytes32) {\\r\\n        if (_role == Role.USER) {\\r\\n            return USER;\\r\\n        }\\r\\n        if (_role == Role.ADMIN) {\\r\\n            return ADMIN;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    /** @notice Checks a proposal if a member has already voted on it.\\r\\n     * @param _proposalNumber Id of the proposal which will be checked for vote\\r\\n     * @param _voterAddress Address of the member which will be checked for vote\\r\\n     */\\r\\n    function _checkVoted(\\r\\n        uint _proposalNumber,\\r\\n        address _voterAddress\\r\\n    ) internal view returns (bool) {\\r\\n        Proposal memory proposal = proposals[_proposalNumber];\\r\\n        address[] memory voters = proposal.voters;\\r\\n        for (uint256 i = 0; i < voters.length; i++) {\\r\\n            if (voters[i] == _voterAddress) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x45ff6dde67db709b4e8db9958b3e4272bcc5750343cffea3329903a08125b2e1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162003ca238038062003ca2833981810160405281019062000037919062000179565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000160146101000a81548160ff0219169083151502179055508181600101819055504281600201819055506001816003016000604051602001620000f69062000206565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555050506200021d565b600080fd5b6000819050919050565b62000153816200013e565b81146200015f57600080fd5b50565b600081519050620001738162000148565b92915050565b60006020828403121562000192576200019162000139565b5b6000620001a28482850162000162565b91505092915050565b600081905092915050565b7f41444d494e000000000000000000000000000000000000000000000000000000600082015250565b6000620001ee600583620001ab565b9150620001fb82620001b6565b600582019050919050565b60006200021382620001df565b9150819050919050565b608051613a6c6200023660003960005050613a6c6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b6bd83961161005b578063b6bd839614610110578063c9d27afe1461012c578063cceb68f514610148578063eccc51fd146101665761007d565b8063013cf08b1461008257806308ae4b0c146100bc5780639eab5253146100ef575b600080fd5b61009c60048036038101906100979190612386565b610182565b6040516100b39b9a999897969594939291906124e9565b60405180910390f35b6100d660048036038101906100d191906125ce565b610373565b6040516100e69493929190612614565b60405180910390f35b6100f76103d0565b6040516101079493929190612951565b60405180910390f35b61012a60048036038101906101259190612a03565b610785565b005b61014660048036038101906101419190612a82565b610cfb565b005b6101506112cc565b60405161015d9190612d6d565b60405180910390f35b610180600480360381019061017b9190612ee9565b6116ad565b005b60046020528060005260406000206000915090508060000154908060010180546101ab90612fa3565b80601f01602080910402602001604051908101604052809291908181526020018280546101d790612fa3565b80156102245780601f106101f957610100808354040283529160200191610224565b820191906000526020600020905b81548152906001019060200180831161020757829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16908060020160159054906101000a900460ff169080600301805461028590612fa3565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190612fa3565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050908060040160009054906101000a900463ffffffff16908060040160049054906101000a900463ffffffff16908060040160089054906101000a900463ffffffff169080600401600c9054906101000a900463ffffffff16908060040160109054906101000a900460030b90508b565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060010154908060020154905084565b606080606080600060028054905067ffffffffffffffff8111156103f7576103f6612d99565b5b6040519080825280602002602001820160405280156104255781602001602082028036833780820191505090505b509050600060028054905067ffffffffffffffff81111561044957610448612d99565b5b6040519080825280602002602001820160405280156104775781602001602082028036833780820191505090505b509050600060028054905067ffffffffffffffff81111561049b5761049a612d99565b5b6040519080825280602002602001820160405280156104c95781602001602082028036833780820191505090505b509050600060028054905067ffffffffffffffff8111156104ed576104ec612d99565b5b60405190808252806020026020018201604052801561051b5781602001602082028036833780820191505090505b50905060005b60028054905081101561076e5760006002828154811061054457610543612fd4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168683815181106105e7576105e6612fd4565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff1685838151811061068457610683612fd4565b5b602002602001019015159081151581525050600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548483815181106106ec576106eb612fd4565b5b602002602001018181525050600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015483838151811061074e5761074d612fd4565b5b60200260200101818152505050808061076690613032565b915050610521565b508383838397509750975097505050505090919293565b604051602001610794906130d1565b6040516020818303038152906040528051906020012060006040516020016107bb90613132565b6040516020818303038152906040528051906020012082036108fe57600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161082a906130d1565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16806108e85750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016108b590613132565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b6108f65760009050806108fc565b60019050805b505b60405160200161090d906130d1565b6040516020818303038152906040528051906020012082036109c457600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161097c906130d1565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff166109bc5760009050806109c2565b60019050805b505b6001151581151514610a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0290613193565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a71906131ff565b60405180910390fd5b6000801b8403610abf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab69061326b565b60405180910390fd5b60001515600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff16151514610b55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4c906132d7565b60405180910390fd5b6000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050858160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000160146101000a81548160ff0219169083151502179055508481600101819055504281600201819055506001816003016000610c1b87611c68565b815260200190815260200160002060006101000a81548160ff0219169083151502179055506002869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff167fbe61d680988ec1460d4972efa07e74ca182afcee5ffacb887cf9ac6ed0e3d2568686604051610ceb92919061336e565b60405180910390a2505050505050565b604051602001610d0a90613132565b604051602081830303815290604052805190602001206000604051602001610d3190613132565b604051602081830303815290604052805190602001208203610e7457600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610da0906130d1565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1680610e5e5750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610e2b90613132565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b610e6c576000905080610e72565b60019050805b505b604051602001610e83906130d1565b604051602081830303815290604052805190602001208203610f3a57600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610ef2906130d1565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16610f32576000905080610f38565b60019050805b505b6001151581151514610f81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7890613193565b60405180910390fd5b6000600460008681526020019081526020016000209050600115158160020160149054906101000a900460ff16151514610ff0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe7906133e3565b60405180910390fd5b600115158160020160159054906101000a900460ff16151514611048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103f9061344f565b60405180910390fd5b8060040160049054906101000a900463ffffffff1663ffffffff1642106110a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109b906134bb565b60405180910390fd5b8060040160009054906101000a900463ffffffff1663ffffffff16421015611101576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f890613527565b60405180910390fd5b6000151561110f8633611d24565b151514611151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114890613593565b60405180910390fd5b831561119f5780600401600881819054906101000a900463ffffffff168092919061117b906135b3565b91906101000a81548163ffffffff021916908363ffffffff160217905550506111e3565b80600401600c81819054906101000a900463ffffffff16809291906111c3906135b3565b91906101000a81548163ffffffff021916908363ffffffff160217905550505b80600501339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600401601081819054906101000a900460030b80929190611269906135df565b91906101000a81548163ffffffff021916908360030b63ffffffff16021790555050847f86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae085336040516112bd92919061360b565b60405180910390a25050505050565b606060006112da60006120d5565b905060008167ffffffffffffffff8111156112f8576112f7612d99565b5b60405190808252806020026020018201604052801561133157816020015b61131e6121ff565b8152602001906001900390816113165790505b50905060005b828110156116a457600060018261134e9190613634565b9050600060046000838152602001908152602001600020905080604051806101800160405290816000820154815260200160018201805461138e90612fa3565b80601f01602080910402602001604051908101604052809291908181526020018280546113ba90612fa3565b80156114075780601f106113dc57610100808354040283529160200191611407565b820191906000526020600020905b8154815290600101906020018083116113ea57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900460ff161515151581526020016003820180546114ac90612fa3565b80601f01602080910402602001604051908101604052809291908181526020018280546114d890612fa3565b80156115255780601f106114fa57610100808354040283529160200191611525565b820191906000526020600020905b81548152906001019060200180831161150857829003601f168201915b505050505081526020016004820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160048201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160109054906101000a900460030b60030b60030b81526020016005820180548060200260200160405190810160405280929190818152602001828054801561166857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161161e575b50505050508152505084848151811061168457611683612fd4565b5b60200260200101819052505050808061169c90613032565b915050611337565b50809250505090565b6040516020016116bc90613132565b6040516020818303038152906040528051906020012060006040516020016116e390613132565b60405160208183030381529060405280519060200120820361182657600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001611752906130d1565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16806118105750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016117dd90613132565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b61181e576000905080611824565b60019050805b505b604051602001611835906130d1565b6040516020818303038152906040528051906020012082036118ec57600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016118a4906130d1565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff166118e45760009050806118ea565b60019050805b505b6001151581151514611933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192a90613193565b60405180910390fd5b600a845111611977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196e906136b4565b60405180910390fd5b61198160006120e3565b600061198d60006120d5565b90506040518061018001604052808281526020018781526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016001151581526020016001151581526020018681526020014263ffffffff1681526020016119f0866120f9565b63ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600060030b8152602001600067ffffffffffffffff811115611a3a57611a39612d99565b5b604051908082528060200260200182016040528015611a685781602001602082028036833780820191505090505b5081525060046000838152602001908152602001600020600082015181600001556020820151816001019081611a9e9190613880565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff02191690831515021790555060808201518160020160156101000a81548160ff02191690831515021790555060a0820151816003019081611b3b9190613880565b5060c08201518160040160006101000a81548163ffffffff021916908363ffffffff16021790555060e08201518160040160046101000a81548163ffffffff021916908363ffffffff1602179055506101008201518160040160086101000a81548163ffffffff021916908363ffffffff16021790555061012082015181600401600c6101000a81548163ffffffff021916908363ffffffff1602179055506101408201518160040160106101000a81548163ffffffff021916908360030b63ffffffff160217905550610160820151816005019080519060200190611c22929190612295565b50905050807fd54d24c2f5d3c070ed74aa4a4926cc273f4bdf17b66ce3d0a6493b11da160e288686604051611c5892919061399a565b60405180910390a2505050505050565b6000806001811115611c7d57611c7c6132f7565b5b826001811115611c9057611c8f6132f7565b5b03611cc157604051602001611ca490613132565b604051602081830303815290604052805190602001209050611d1f565b600180811115611cd457611cd36132f7565b5b826001811115611ce757611ce66132f7565b5b03611d1857604051602001611cfb906130d1565b604051602081830303815290604052805190602001209050611d1f565b6000801b90505b919050565b600080600460008581526020019081526020016000206040518061018001604052908160008201548152602001600182018054611d6090612fa3565b80601f0160208091040260200160405190810160405280929190818152602001828054611d8c90612fa3565b8015611dd95780601f10611dae57610100808354040283529160200191611dd9565b820191906000526020600020905b815481529060010190602001808311611dbc57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900460ff16151515158152602001600382018054611e7e90612fa3565b80601f0160208091040260200160405190810160405280929190818152602001828054611eaa90612fa3565b8015611ef75780601f10611ecc57610100808354040283529160200191611ef7565b820191906000526020600020905b815481529060010190602001808311611eda57829003601f168201915b505050505081526020016004820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160048201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160109054906101000a900460030b60030b60030b81526020016005820180548060200260200160405190810160405280929190818152602001828054801561203a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611ff0575b50505050508152505090506000816101600151905060005b81518110156120c7578473ffffffffffffffffffffffffffffffffffffffff1682828151811061208557612084612fd4565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036120b457600193505050506120cf565b80806120bf90613032565b915050612052565b506000925050505b92915050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600080600281111561210e5761210d6132f7565b5b826002811115612121576121206132f7565b5b0361213c5762015180426121359190613634565b90506121fa565b600160028111156121505761214f6132f7565b5b826002811115612163576121626132f7565b5b0361217e5762093a80426121779190613634565b90506121fa565b600280811115612191576121906132f7565b5b8260028111156121a4576121a36132f7565b5b036121bf576224ea00426121b89190613634565b90506121fa565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f190613a16565b60405180910390fd5b919050565b6040518061018001604052806000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160001515815260200160001515815260200160608152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600060030b8152602001606081525090565b82805482825590600052602060002090810192821561230e579160200282015b8281111561230d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906122b5565b5b50905061231b919061231f565b5090565b5b80821115612338576000816000905550600101612320565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61236381612350565b811461236e57600080fd5b50565b6000813590506123808161235a565b92915050565b60006020828403121561239c5761239b612346565b5b60006123aa84828501612371565b91505092915050565b6123bc81612350565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123fc5780820151818401526020810190506123e1565b60008484015250505050565b6000601f19601f8301169050919050565b6000612424826123c2565b61242e81856123cd565b935061243e8185602086016123de565b61244781612408565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061247d82612452565b9050919050565b61248d81612472565b82525050565b60008115159050919050565b6124a881612493565b82525050565b600063ffffffff82169050919050565b6124c7816124ae565b82525050565b60008160030b9050919050565b6124e3816124cd565b82525050565b6000610160820190506124ff600083018e6123b3565b8181036020830152612511818d612419565b9050612520604083018c612484565b61252d606083018b61249f565b61253a608083018a61249f565b81810360a083015261254c8189612419565b905061255b60c08301886124be565b61256860e08301876124be565b6125766101008301866124be565b6125846101208301856124be565b6125926101408301846124da565b9c9b505050505050505050505050565b6125ab81612472565b81146125b657600080fd5b50565b6000813590506125c8816125a2565b92915050565b6000602082840312156125e4576125e3612346565b5b60006125f2848285016125b9565b91505092915050565b6000819050919050565b61260e816125fb565b82525050565b60006080820190506126296000830187612484565b612636602083018661249f565b6126436040830185612605565b61265060608301846123b3565b95945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61268e81612472565b82525050565b60006126a08383612685565b60208301905092915050565b6000602082019050919050565b60006126c482612659565b6126ce8185612664565b93506126d983612675565b8060005b8381101561270a5781516126f18882612694565b97506126fc836126ac565b9250506001810190506126dd565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61274c81612493565b82525050565b600061275e8383612743565b60208301905092915050565b6000602082019050919050565b600061278282612717565b61278c8185612722565b935061279783612733565b8060005b838110156127c85781516127af8882612752565b97506127ba8361276a565b92505060018101905061279b565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61280a816125fb565b82525050565b600061281c8383612801565b60208301905092915050565b6000602082019050919050565b6000612840826127d5565b61284a81856127e0565b9350612855836127f1565b8060005b8381101561288657815161286d8882612810565b975061287883612828565b925050600181019050612859565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6128c881612350565b82525050565b60006128da83836128bf565b60208301905092915050565b6000602082019050919050565b60006128fe82612893565b612908818561289e565b9350612913836128af565b8060005b8381101561294457815161292b88826128ce565b9750612936836128e6565b925050600181019050612917565b5085935050505092915050565b6000608082019050818103600083015261296b81876126b9565b9050818103602083015261297f8186612777565b905081810360408301526129938185612835565b905081810360608301526129a781846128f3565b905095945050505050565b6129bb816125fb565b81146129c657600080fd5b50565b6000813590506129d8816129b2565b92915050565b600281106129eb57600080fd5b50565b6000813590506129fd816129de565b92915050565b600080600060608486031215612a1c57612a1b612346565b5b6000612a2a868287016125b9565b9350506020612a3b868287016129c9565b9250506040612a4c868287016129ee565b9150509250925092565b612a5f81612493565b8114612a6a57600080fd5b50565b600081359050612a7c81612a56565b92915050565b60008060408385031215612a9957612a98612346565b5b6000612aa785828601612371565b9250506020612ab885828601612a6d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000612b0a826123c2565b612b148185612aee565b9350612b248185602086016123de565b612b2d81612408565b840191505092915050565b612b41816124ae565b82525050565b612b50816124cd565b82525050565b600082825260208201905092915050565b6000612b7282612659565b612b7c8185612b56565b9350612b8783612675565b8060005b83811015612bb8578151612b9f8882612694565b9750612baa836126ac565b925050600181019050612b8b565b5085935050505092915050565b600061018083016000830151612bde60008601826128bf565b5060208301518482036020860152612bf68282612aff565b9150506040830151612c0b6040860182612685565b506060830151612c1e6060860182612743565b506080830151612c316080860182612743565b5060a083015184820360a0860152612c498282612aff565b91505060c0830151612c5e60c0860182612b38565b5060e0830151612c7160e0860182612b38565b50610100830151612c86610100860182612b38565b50610120830151612c9b610120860182612b38565b50610140830151612cb0610140860182612b47565b50610160830151848203610160860152612cca8282612b67565b9150508091505092915050565b6000612ce38383612bc5565b905092915050565b6000602082019050919050565b6000612d0382612ac2565b612d0d8185612acd565b935083602082028501612d1f85612ade565b8060005b85811015612d5b5784840389528151612d3c8582612cd7565b9450612d4783612ceb565b925060208a01995050600181019050612d23565b50829750879550505050505092915050565b60006020820190508181036000830152612d878184612cf8565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612dd182612408565b810181811067ffffffffffffffff82111715612df057612def612d99565b5b80604052505050565b6000612e0361233c565b9050612e0f8282612dc8565b919050565b600067ffffffffffffffff821115612e2f57612e2e612d99565b5b612e3882612408565b9050602081019050919050565b82818337600083830152505050565b6000612e67612e6284612e14565b612df9565b905082815260208101848484011115612e8357612e82612d94565b5b612e8e848285612e45565b509392505050565b600082601f830112612eab57612eaa612d8f565b5b8135612ebb848260208601612e54565b91505092915050565b60038110612ed157600080fd5b50565b600081359050612ee381612ec4565b92915050565b600080600060608486031215612f0257612f01612346565b5b600084013567ffffffffffffffff811115612f2057612f1f61234b565b5b612f2c86828701612e96565b935050602084013567ffffffffffffffff811115612f4d57612f4c61234b565b5b612f5986828701612e96565b9250506040612f6a86828701612ed4565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612fbb57607f821691505b602082108103612fce57612fcd612f74565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061303d82612350565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361306f5761306e613003565b5b600182019050919050565b600081905092915050565b7f41444d494e000000000000000000000000000000000000000000000000000000600082015250565b60006130bb60058361307a565b91506130c682613085565b600582019050919050565b60006130dc826130ae565b9150819050919050565b7f5553455200000000000000000000000000000000000000000000000000000000600082015250565b600061311c60048361307a565b9150613127826130e6565b600482019050919050565b600061313d8261310f565b9150819050919050565b7f646f6e2774206861766520636f727265637420726f6c65000000000000000000600082015250565b600061317d6017836123cd565b915061318882613147565b602082019050919050565b600060208201905081810360008301526131ac81613170565b9050919050565b7f616464726573732063616e277420626520300000000000000000000000000000600082015250565b60006131e96012836123cd565b91506131f4826131b3565b602082019050919050565b60006020820190508181036000830152613218816131dc565b9050919050565b7f6e616d652063616e277420626520300000000000000000000000000000000000600082015250565b6000613255600f836123cd565b91506132608261321f565b602082019050919050565b6000602082019050818103600083015261328481613248565b9050919050565b7f6d656d62657220616c7265616479206578697374730000000000000000000000600082015250565b60006132c16015836123cd565b91506132cc8261328b565b602082019050919050565b600060208201905081810360008301526132f0816132b4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110613337576133366132f7565b5b50565b600081905061334882613326565b919050565b60006133588261333a565b9050919050565b6133688161334d565b82525050565b60006040820190506133836000830185612605565b613390602083018461335f565b9392505050565b7f70726f706f73616c206e6f742076616c69640000000000000000000000000000600082015250565b60006133cd6012836123cd565b91506133d882613397565b602082019050919050565b600060208201905081810360008301526133fc816133c0565b9050919050565b7f70726f706f73616c206e6f742061637469766500000000000000000000000000600082015250565b60006134396013836123cd565b915061344482613403565b602082019050919050565b600060208201905081810360008301526134688161342c565b9050919050565b7f70726f706f73616c20656e646564000000000000000000000000000000000000600082015250565b60006134a5600e836123cd565b91506134b08261346f565b602082019050919050565b600060208201905081810360008301526134d481613498565b9050919050565b7f70726f706f73616c206861736e27742073746172746564000000000000000000600082015250565b60006135116017836123cd565b915061351c826134db565b602082019050919050565b6000602082019050818103600083015261354081613504565b9050919050565b7f616c726561647920766f74656400000000000000000000000000000000000000600082015250565b600061357d600d836123cd565b915061358882613547565b602082019050919050565b600060208201905081810360008301526135ac81613570565b9050919050565b60006135be826124ae565b915063ffffffff82036135d4576135d3613003565b5b600182019050919050565b60006135ea826124cd565b9150637fffffff8203613600576135ff613003565b5b600182019050919050565b6000604082019050613620600083018561249f565b61362d6020830184612484565b9392505050565b600061363f82612350565b915061364a83612350565b925082820190508082111561366257613661613003565b5b92915050565b7f6e6565642061746c656173742031302063686172616374657273000000000000600082015250565b600061369e601a836123cd565b91506136a982613668565b602082019050919050565b600060208201905081810360008301526136cd81613691565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026137367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826136f9565b61374086836136f9565b95508019841693508086168417925050509392505050565b6000819050919050565b600061377d61377861377384612350565b613758565b612350565b9050919050565b6000819050919050565b61379783613762565b6137ab6137a382613784565b848454613706565b825550505050565b600090565b6137c06137b3565b6137cb81848461378e565b505050565b5b818110156137ef576137e46000826137b8565b6001810190506137d1565b5050565b601f82111561383457613805816136d4565b61380e846136e9565b8101602085101561381d578190505b613831613829856136e9565b8301826137d0565b50505b505050565b600082821c905092915050565b600061385760001984600802613839565b1980831691505092915050565b60006138708383613846565b9150826002028217905092915050565b613889826123c2565b67ffffffffffffffff8111156138a2576138a1612d99565b5b6138ac8254612fa3565b6138b78282856137f3565b600060209050601f8311600181146138ea57600084156138d8578287015190505b6138e28582613864565b86555061394a565b601f1984166138f8866136d4565b60005b82811015613920578489015182556001820191506020850194506020810190506138fb565b8683101561393d5784890151613939601f891682613846565b8355505b6001600288020188555050505b505050505050565b60038110613963576139626132f7565b5b50565b600081905061397482613952565b919050565b600061398482613966565b9050919050565b61399481613979565b82525050565b600060408201905081810360008301526139b48185612419565b90506139c3602083018461398b565b9392505050565b7f496e76616c6964206475726174696f6e00000000000000000000000000000000600082015250565b6000613a006010836123cd565b9150613a0b826139ca565b602082019050919050565b60006020820190508181036000830152613a2f816139f3565b905091905056fea2646970667358221220cec2aac412e17913202c03dd2c9125994ff78c9259dd100a83afc8cb412c238464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b6bd83961161005b578063b6bd839614610110578063c9d27afe1461012c578063cceb68f514610148578063eccc51fd146101665761007d565b8063013cf08b1461008257806308ae4b0c146100bc5780639eab5253146100ef575b600080fd5b61009c60048036038101906100979190612386565b610182565b6040516100b39b9a999897969594939291906124e9565b60405180910390f35b6100d660048036038101906100d191906125ce565b610373565b6040516100e69493929190612614565b60405180910390f35b6100f76103d0565b6040516101079493929190612951565b60405180910390f35b61012a60048036038101906101259190612a03565b610785565b005b61014660048036038101906101419190612a82565b610cfb565b005b6101506112cc565b60405161015d9190612d6d565b60405180910390f35b610180600480360381019061017b9190612ee9565b6116ad565b005b60046020528060005260406000206000915090508060000154908060010180546101ab90612fa3565b80601f01602080910402602001604051908101604052809291908181526020018280546101d790612fa3565b80156102245780601f106101f957610100808354040283529160200191610224565b820191906000526020600020905b81548152906001019060200180831161020757829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16908060020160159054906101000a900460ff169080600301805461028590612fa3565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190612fa3565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050908060040160009054906101000a900463ffffffff16908060040160049054906101000a900463ffffffff16908060040160089054906101000a900463ffffffff169080600401600c9054906101000a900463ffffffff16908060040160109054906101000a900460030b90508b565b60036020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060010154908060020154905084565b606080606080600060028054905067ffffffffffffffff8111156103f7576103f6612d99565b5b6040519080825280602002602001820160405280156104255781602001602082028036833780820191505090505b509050600060028054905067ffffffffffffffff81111561044957610448612d99565b5b6040519080825280602002602001820160405280156104775781602001602082028036833780820191505090505b509050600060028054905067ffffffffffffffff81111561049b5761049a612d99565b5b6040519080825280602002602001820160405280156104c95781602001602082028036833780820191505090505b509050600060028054905067ffffffffffffffff8111156104ed576104ec612d99565b5b60405190808252806020026020018201604052801561051b5781602001602082028036833780820191505090505b50905060005b60028054905081101561076e5760006002828154811061054457610543612fd4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168683815181106105e7576105e6612fd4565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff1685838151811061068457610683612fd4565b5b602002602001019015159081151581525050600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548483815181106106ec576106eb612fd4565b5b602002602001018181525050600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015483838151811061074e5761074d612fd4565b5b60200260200101818152505050808061076690613032565b915050610521565b508383838397509750975097505050505090919293565b604051602001610794906130d1565b6040516020818303038152906040528051906020012060006040516020016107bb90613132565b6040516020818303038152906040528051906020012082036108fe57600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161082a906130d1565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16806108e85750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016108b590613132565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b6108f65760009050806108fc565b60019050805b505b60405160200161090d906130d1565b6040516020818303038152906040528051906020012082036109c457600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161097c906130d1565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff166109bc5760009050806109c2565b60019050805b505b6001151581151514610a0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0290613193565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a71906131ff565b60405180910390fd5b6000801b8403610abf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab69061326b565b60405180910390fd5b60001515600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff16151514610b55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4c906132d7565b60405180910390fd5b6000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050858160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000160146101000a81548160ff0219169083151502179055508481600101819055504281600201819055506001816003016000610c1b87611c68565b815260200190815260200160002060006101000a81548160ff0219169083151502179055506002869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff167fbe61d680988ec1460d4972efa07e74ca182afcee5ffacb887cf9ac6ed0e3d2568686604051610ceb92919061336e565b60405180910390a2505050505050565b604051602001610d0a90613132565b604051602081830303815290604052805190602001206000604051602001610d3190613132565b604051602081830303815290604052805190602001208203610e7457600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610da0906130d1565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1680610e5e5750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610e2b90613132565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b610e6c576000905080610e72565b60019050805b505b604051602001610e83906130d1565b604051602081830303815290604052805190602001208203610f3a57600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610ef2906130d1565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16610f32576000905080610f38565b60019050805b505b6001151581151514610f81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7890613193565b60405180910390fd5b6000600460008681526020019081526020016000209050600115158160020160149054906101000a900460ff16151514610ff0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe7906133e3565b60405180910390fd5b600115158160020160159054906101000a900460ff16151514611048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103f9061344f565b60405180910390fd5b8060040160049054906101000a900463ffffffff1663ffffffff1642106110a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109b906134bb565b60405180910390fd5b8060040160009054906101000a900463ffffffff1663ffffffff16421015611101576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f890613527565b60405180910390fd5b6000151561110f8633611d24565b151514611151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114890613593565b60405180910390fd5b831561119f5780600401600881819054906101000a900463ffffffff168092919061117b906135b3565b91906101000a81548163ffffffff021916908363ffffffff160217905550506111e3565b80600401600c81819054906101000a900463ffffffff16809291906111c3906135b3565b91906101000a81548163ffffffff021916908363ffffffff160217905550505b80600501339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600401601081819054906101000a900460030b80929190611269906135df565b91906101000a81548163ffffffff021916908360030b63ffffffff16021790555050847f86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae085336040516112bd92919061360b565b60405180910390a25050505050565b606060006112da60006120d5565b905060008167ffffffffffffffff8111156112f8576112f7612d99565b5b60405190808252806020026020018201604052801561133157816020015b61131e6121ff565b8152602001906001900390816113165790505b50905060005b828110156116a457600060018261134e9190613634565b9050600060046000838152602001908152602001600020905080604051806101800160405290816000820154815260200160018201805461138e90612fa3565b80601f01602080910402602001604051908101604052809291908181526020018280546113ba90612fa3565b80156114075780601f106113dc57610100808354040283529160200191611407565b820191906000526020600020905b8154815290600101906020018083116113ea57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900460ff161515151581526020016003820180546114ac90612fa3565b80601f01602080910402602001604051908101604052809291908181526020018280546114d890612fa3565b80156115255780601f106114fa57610100808354040283529160200191611525565b820191906000526020600020905b81548152906001019060200180831161150857829003601f168201915b505050505081526020016004820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160048201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160109054906101000a900460030b60030b60030b81526020016005820180548060200260200160405190810160405280929190818152602001828054801561166857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161161e575b50505050508152505084848151811061168457611683612fd4565b5b60200260200101819052505050808061169c90613032565b915050611337565b50809250505090565b6040516020016116bc90613132565b6040516020818303038152906040528051906020012060006040516020016116e390613132565b60405160208183030381529060405280519060200120820361182657600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001611752906130d1565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16806118105750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016117dd90613132565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b61181e576000905080611824565b60019050805b505b604051602001611835906130d1565b6040516020818303038152906040528051906020012082036118ec57600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016118a4906130d1565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff166118e45760009050806118ea565b60019050805b505b6001151581151514611933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192a90613193565b60405180910390fd5b600a845111611977576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196e906136b4565b60405180910390fd5b61198160006120e3565b600061198d60006120d5565b90506040518061018001604052808281526020018781526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016001151581526020016001151581526020018681526020014263ffffffff1681526020016119f0866120f9565b63ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600060030b8152602001600067ffffffffffffffff811115611a3a57611a39612d99565b5b604051908082528060200260200182016040528015611a685781602001602082028036833780820191505090505b5081525060046000838152602001908152602001600020600082015181600001556020820151816001019081611a9e9190613880565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff02191690831515021790555060808201518160020160156101000a81548160ff02191690831515021790555060a0820151816003019081611b3b9190613880565b5060c08201518160040160006101000a81548163ffffffff021916908363ffffffff16021790555060e08201518160040160046101000a81548163ffffffff021916908363ffffffff1602179055506101008201518160040160086101000a81548163ffffffff021916908363ffffffff16021790555061012082015181600401600c6101000a81548163ffffffff021916908363ffffffff1602179055506101408201518160040160106101000a81548163ffffffff021916908360030b63ffffffff160217905550610160820151816005019080519060200190611c22929190612295565b50905050807fd54d24c2f5d3c070ed74aa4a4926cc273f4bdf17b66ce3d0a6493b11da160e288686604051611c5892919061399a565b60405180910390a2505050505050565b6000806001811115611c7d57611c7c6132f7565b5b826001811115611c9057611c8f6132f7565b5b03611cc157604051602001611ca490613132565b604051602081830303815290604052805190602001209050611d1f565b600180811115611cd457611cd36132f7565b5b826001811115611ce757611ce66132f7565b5b03611d1857604051602001611cfb906130d1565b604051602081830303815290604052805190602001209050611d1f565b6000801b90505b919050565b600080600460008581526020019081526020016000206040518061018001604052908160008201548152602001600182018054611d6090612fa3565b80601f0160208091040260200160405190810160405280929190818152602001828054611d8c90612fa3565b8015611dd95780601f10611dae57610100808354040283529160200191611dd9565b820191906000526020600020905b815481529060010190602001808311611dbc57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900460ff16151515158152602001600382018054611e7e90612fa3565b80601f0160208091040260200160405190810160405280929190818152602001828054611eaa90612fa3565b8015611ef75780601f10611ecc57610100808354040283529160200191611ef7565b820191906000526020600020905b815481529060010190602001808311611eda57829003601f168201915b505050505081526020016004820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160048201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160109054906101000a900460030b60030b60030b81526020016005820180548060200260200160405190810160405280929190818152602001828054801561203a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611ff0575b50505050508152505090506000816101600151905060005b81518110156120c7578473ffffffffffffffffffffffffffffffffffffffff1682828151811061208557612084612fd4565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16036120b457600193505050506120cf565b80806120bf90613032565b915050612052565b506000925050505b92915050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600080600281111561210e5761210d6132f7565b5b826002811115612121576121206132f7565b5b0361213c5762015180426121359190613634565b90506121fa565b600160028111156121505761214f6132f7565b5b826002811115612163576121626132f7565b5b0361217e5762093a80426121779190613634565b90506121fa565b600280811115612191576121906132f7565b5b8260028111156121a4576121a36132f7565b5b036121bf576224ea00426121b89190613634565b90506121fa565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f190613a16565b60405180910390fd5b919050565b6040518061018001604052806000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160001515815260200160001515815260200160608152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600060030b8152602001606081525090565b82805482825590600052602060002090810192821561230e579160200282015b8281111561230d5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906122b5565b5b50905061231b919061231f565b5090565b5b80821115612338576000816000905550600101612320565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61236381612350565b811461236e57600080fd5b50565b6000813590506123808161235a565b92915050565b60006020828403121561239c5761239b612346565b5b60006123aa84828501612371565b91505092915050565b6123bc81612350565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156123fc5780820151818401526020810190506123e1565b60008484015250505050565b6000601f19601f8301169050919050565b6000612424826123c2565b61242e81856123cd565b935061243e8185602086016123de565b61244781612408565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061247d82612452565b9050919050565b61248d81612472565b82525050565b60008115159050919050565b6124a881612493565b82525050565b600063ffffffff82169050919050565b6124c7816124ae565b82525050565b60008160030b9050919050565b6124e3816124cd565b82525050565b6000610160820190506124ff600083018e6123b3565b8181036020830152612511818d612419565b9050612520604083018c612484565b61252d606083018b61249f565b61253a608083018a61249f565b81810360a083015261254c8189612419565b905061255b60c08301886124be565b61256860e08301876124be565b6125766101008301866124be565b6125846101208301856124be565b6125926101408301846124da565b9c9b505050505050505050505050565b6125ab81612472565b81146125b657600080fd5b50565b6000813590506125c8816125a2565b92915050565b6000602082840312156125e4576125e3612346565b5b60006125f2848285016125b9565b91505092915050565b6000819050919050565b61260e816125fb565b82525050565b60006080820190506126296000830187612484565b612636602083018661249f565b6126436040830185612605565b61265060608301846123b3565b95945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61268e81612472565b82525050565b60006126a08383612685565b60208301905092915050565b6000602082019050919050565b60006126c482612659565b6126ce8185612664565b93506126d983612675565b8060005b8381101561270a5781516126f18882612694565b97506126fc836126ac565b9250506001810190506126dd565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61274c81612493565b82525050565b600061275e8383612743565b60208301905092915050565b6000602082019050919050565b600061278282612717565b61278c8185612722565b935061279783612733565b8060005b838110156127c85781516127af8882612752565b97506127ba8361276a565b92505060018101905061279b565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61280a816125fb565b82525050565b600061281c8383612801565b60208301905092915050565b6000602082019050919050565b6000612840826127d5565b61284a81856127e0565b9350612855836127f1565b8060005b8381101561288657815161286d8882612810565b975061287883612828565b925050600181019050612859565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6128c881612350565b82525050565b60006128da83836128bf565b60208301905092915050565b6000602082019050919050565b60006128fe82612893565b612908818561289e565b9350612913836128af565b8060005b8381101561294457815161292b88826128ce565b9750612936836128e6565b925050600181019050612917565b5085935050505092915050565b6000608082019050818103600083015261296b81876126b9565b9050818103602083015261297f8186612777565b905081810360408301526129938185612835565b905081810360608301526129a781846128f3565b905095945050505050565b6129bb816125fb565b81146129c657600080fd5b50565b6000813590506129d8816129b2565b92915050565b600281106129eb57600080fd5b50565b6000813590506129fd816129de565b92915050565b600080600060608486031215612a1c57612a1b612346565b5b6000612a2a868287016125b9565b9350506020612a3b868287016129c9565b9250506040612a4c868287016129ee565b9150509250925092565b612a5f81612493565b8114612a6a57600080fd5b50565b600081359050612a7c81612a56565b92915050565b60008060408385031215612a9957612a98612346565b5b6000612aa785828601612371565b9250506020612ab885828601612a6d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000612b0a826123c2565b612b148185612aee565b9350612b248185602086016123de565b612b2d81612408565b840191505092915050565b612b41816124ae565b82525050565b612b50816124cd565b82525050565b600082825260208201905092915050565b6000612b7282612659565b612b7c8185612b56565b9350612b8783612675565b8060005b83811015612bb8578151612b9f8882612694565b9750612baa836126ac565b925050600181019050612b8b565b5085935050505092915050565b600061018083016000830151612bde60008601826128bf565b5060208301518482036020860152612bf68282612aff565b9150506040830151612c0b6040860182612685565b506060830151612c1e6060860182612743565b506080830151612c316080860182612743565b5060a083015184820360a0860152612c498282612aff565b91505060c0830151612c5e60c0860182612b38565b5060e0830151612c7160e0860182612b38565b50610100830151612c86610100860182612b38565b50610120830151612c9b610120860182612b38565b50610140830151612cb0610140860182612b47565b50610160830151848203610160860152612cca8282612b67565b9150508091505092915050565b6000612ce38383612bc5565b905092915050565b6000602082019050919050565b6000612d0382612ac2565b612d0d8185612acd565b935083602082028501612d1f85612ade565b8060005b85811015612d5b5784840389528151612d3c8582612cd7565b9450612d4783612ceb565b925060208a01995050600181019050612d23565b50829750879550505050505092915050565b60006020820190508181036000830152612d878184612cf8565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612dd182612408565b810181811067ffffffffffffffff82111715612df057612def612d99565b5b80604052505050565b6000612e0361233c565b9050612e0f8282612dc8565b919050565b600067ffffffffffffffff821115612e2f57612e2e612d99565b5b612e3882612408565b9050602081019050919050565b82818337600083830152505050565b6000612e67612e6284612e14565b612df9565b905082815260208101848484011115612e8357612e82612d94565b5b612e8e848285612e45565b509392505050565b600082601f830112612eab57612eaa612d8f565b5b8135612ebb848260208601612e54565b91505092915050565b60038110612ed157600080fd5b50565b600081359050612ee381612ec4565b92915050565b600080600060608486031215612f0257612f01612346565b5b600084013567ffffffffffffffff811115612f2057612f1f61234b565b5b612f2c86828701612e96565b935050602084013567ffffffffffffffff811115612f4d57612f4c61234b565b5b612f5986828701612e96565b9250506040612f6a86828701612ed4565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612fbb57607f821691505b602082108103612fce57612fcd612f74565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061303d82612350565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361306f5761306e613003565b5b600182019050919050565b600081905092915050565b7f41444d494e000000000000000000000000000000000000000000000000000000600082015250565b60006130bb60058361307a565b91506130c682613085565b600582019050919050565b60006130dc826130ae565b9150819050919050565b7f5553455200000000000000000000000000000000000000000000000000000000600082015250565b600061311c60048361307a565b9150613127826130e6565b600482019050919050565b600061313d8261310f565b9150819050919050565b7f646f6e2774206861766520636f727265637420726f6c65000000000000000000600082015250565b600061317d6017836123cd565b915061318882613147565b602082019050919050565b600060208201905081810360008301526131ac81613170565b9050919050565b7f616464726573732063616e277420626520300000000000000000000000000000600082015250565b60006131e96012836123cd565b91506131f4826131b3565b602082019050919050565b60006020820190508181036000830152613218816131dc565b9050919050565b7f6e616d652063616e277420626520300000000000000000000000000000000000600082015250565b6000613255600f836123cd565b91506132608261321f565b602082019050919050565b6000602082019050818103600083015261328481613248565b9050919050565b7f6d656d62657220616c7265616479206578697374730000000000000000000000600082015250565b60006132c16015836123cd565b91506132cc8261328b565b602082019050919050565b600060208201905081810360008301526132f0816132b4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110613337576133366132f7565b5b50565b600081905061334882613326565b919050565b60006133588261333a565b9050919050565b6133688161334d565b82525050565b60006040820190506133836000830185612605565b613390602083018461335f565b9392505050565b7f70726f706f73616c206e6f742076616c69640000000000000000000000000000600082015250565b60006133cd6012836123cd565b91506133d882613397565b602082019050919050565b600060208201905081810360008301526133fc816133c0565b9050919050565b7f70726f706f73616c206e6f742061637469766500000000000000000000000000600082015250565b60006134396013836123cd565b915061344482613403565b602082019050919050565b600060208201905081810360008301526134688161342c565b9050919050565b7f70726f706f73616c20656e646564000000000000000000000000000000000000600082015250565b60006134a5600e836123cd565b91506134b08261346f565b602082019050919050565b600060208201905081810360008301526134d481613498565b9050919050565b7f70726f706f73616c206861736e27742073746172746564000000000000000000600082015250565b60006135116017836123cd565b915061351c826134db565b602082019050919050565b6000602082019050818103600083015261354081613504565b9050919050565b7f616c726561647920766f74656400000000000000000000000000000000000000600082015250565b600061357d600d836123cd565b915061358882613547565b602082019050919050565b600060208201905081810360008301526135ac81613570565b9050919050565b60006135be826124ae565b915063ffffffff82036135d4576135d3613003565b5b600182019050919050565b60006135ea826124cd565b9150637fffffff8203613600576135ff613003565b5b600182019050919050565b6000604082019050613620600083018561249f565b61362d6020830184612484565b9392505050565b600061363f82612350565b915061364a83612350565b925082820190508082111561366257613661613003565b5b92915050565b7f6e6565642061746c656173742031302063686172616374657273000000000000600082015250565b600061369e601a836123cd565b91506136a982613668565b602082019050919050565b600060208201905081810360008301526136cd81613691565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026137367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826136f9565b61374086836136f9565b95508019841693508086168417925050509392505050565b6000819050919050565b600061377d61377861377384612350565b613758565b612350565b9050919050565b6000819050919050565b61379783613762565b6137ab6137a382613784565b848454613706565b825550505050565b600090565b6137c06137b3565b6137cb81848461378e565b505050565b5b818110156137ef576137e46000826137b8565b6001810190506137d1565b5050565b601f82111561383457613805816136d4565b61380e846136e9565b8101602085101561381d578190505b613831613829856136e9565b8301826137d0565b50505b505050565b600082821c905092915050565b600061385760001984600802613839565b1980831691505092915050565b60006138708383613846565b9150826002028217905092915050565b613889826123c2565b67ffffffffffffffff8111156138a2576138a1612d99565b5b6138ac8254612fa3565b6138b78282856137f3565b600060209050601f8311600181146138ea57600084156138d8578287015190505b6138e28582613864565b86555061394a565b601f1984166138f8866136d4565b60005b82811015613920578489015182556001820191506020850194506020810190506138fb565b8683101561393d5784890151613939601f891682613846565b8355505b6001600288020188555050505b505050505050565b60038110613963576139626132f7565b5b50565b600081905061397482613952565b919050565b600061398482613966565b9050919050565b61399481613979565b82525050565b600060408201905081810360008301526139b48185612419565b90506139c3602083018461398b565b9392505050565b7f496e76616c6964206475726174696f6e00000000000000000000000000000000600082015250565b6000613a006010836123cd565b9150613a0b826139ca565b602082019050919050565b60006020820190508181036000830152613a2f816139f3565b905091905056fea2646970667358221220cec2aac412e17913202c03dd2c9125994ff78c9259dd100a83afc8cb412c238464736f6c63430008110033",
  "devdoc": {
    "author": "Bram Mathijssen",
    "kind": "dev",
    "methods": {
      "addMember(address,bytes32,uint8)": {
        "params": {
          "_address": "Address of the member",
          "_name": "Member of the name in bytes32",
          "_role": "Role of the member (0 = USER, 1 = ADMIN)"
        }
      },
      "constructor": {
        "details": "Initialises the one who deploys the contract as the first admin member",
        "params": {
          "_name": "name of owner in bytes32"
        }
      },
      "createProposal(string,string,uint8)": {
        "params": {
          "_description": "Description of the proposal",
          "_duration": "Duration which the proposal will be open from the moment of creation (0 = DAY, 1 = WEEK, 2 = MONTH)",
          "_title": "Title of the proposal"
        }
      },
      "getAllProposals()": {
        "details": "Loops over all the entries from the proposals mapping by using the _proposalIds as associative variable"
      },
      "getMembers()": {
        "details": "Loops over all the entries from the members mapping by using the addresses from _memberslist as associative array  returning individual properties from members, excluding the role since it's a mapping."
      },
      "vote(uint256,bool)": {
        "params": {
          "_proposalNumber": "Id of the proposal which will be voted on",
          "_vote": "To give a downvote bool should be 0, to give a upvote bool should be 1"
        }
      }
    },
    "title": "Dapper.dao",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMember(address,bytes32,uint8)": {
        "notice": "Adds a member to the DAO, only Admins can add new members"
      },
      "createProposal(string,string,uint8)": {
        "notice": "Creates a new Proposal, either an admin or user can create a proposal."
      },
      "getAllProposals()": {
        "notice": "Gets all the proposals from the proposals mapping"
      },
      "getMembers()": {
        "notice": "Gets all the members from the members mapping"
      },
      "members(address)": {
        "notice": "Member address to member struct"
      },
      "proposals(uint256)": {
        "notice": "_proposalId to proposal struct"
      },
      "vote(uint256,bool)": {
        "notice": "up or downvote a proposal by id"
      }
    },
    "notice": "A contract to manage proposals which can be voted on by members which are registered by others",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 91,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_proposalIds",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 94,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_memberIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_membersList",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 122,
        "contract": "contracts/DAO.sol:DAO",
        "label": "members",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(Member)141_storage)"
      },
      {
        "astId": 128,
        "contract": "contracts/DAO.sol:DAO",
        "label": "proposals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Proposal)167_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_struct(Member)141_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DAO.Member)",
        "numberOfBytes": "32",
        "value": "t_struct(Member)141_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Proposal)167_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAO.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)167_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/DAO.sol:DAO",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Member)141_storage": {
        "encoding": "inplace",
        "label": "struct DAO.Member",
        "members": [
          {
            "astId": 130,
            "contract": "contracts/DAO.sol:DAO",
            "label": "memberAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 132,
            "contract": "contracts/DAO.sol:DAO",
            "label": "valid",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 134,
            "contract": "contracts/DAO.sol:DAO",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 136,
            "contract": "contracts/DAO.sol:DAO",
            "label": "memberSince",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 140,
            "contract": "contracts/DAO.sol:DAO",
            "label": "role",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Proposal)167_storage": {
        "encoding": "inplace",
        "label": "struct DAO.Proposal",
        "members": [
          {
            "astId": 143,
            "contract": "contracts/DAO.sol:DAO",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 145,
            "contract": "contracts/DAO.sol:DAO",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 147,
            "contract": "contracts/DAO.sol:DAO",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 149,
            "contract": "contracts/DAO.sol:DAO",
            "label": "valid",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 151,
            "contract": "contracts/DAO.sol:DAO",
            "label": "active",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 153,
            "contract": "contracts/DAO.sol:DAO",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 155,
            "contract": "contracts/DAO.sol:DAO",
            "label": "startDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 157,
            "contract": "contracts/DAO.sol:DAO",
            "label": "endDate",
            "offset": 4,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 159,
            "contract": "contracts/DAO.sol:DAO",
            "label": "upVotes",
            "offset": 8,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 161,
            "contract": "contracts/DAO.sol:DAO",
            "label": "downVotes",
            "offset": 12,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 163,
            "contract": "contracts/DAO.sol:DAO",
            "label": "voteCount",
            "offset": 16,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 166,
            "contract": "contracts/DAO.sol:DAO",
            "label": "voters",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}