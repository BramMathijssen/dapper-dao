{
  "address": "0xcAfBf92Fd6c1f073405c6bd62030630C5C9c7dec",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "memberAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum DAO.Role",
          "name": "role",
          "type": "uint8"
        }
      ],
      "name": "MemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum DAO.Duration",
          "name": "duration",
          "type": "uint8"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "upVote",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        },
        {
          "internalType": "enum DAO.Role",
          "name": "_role",
          "type": "uint8"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "enum DAO.Duration",
          "name": "_duration",
          "type": "uint8"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "valid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "startDate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "endDate",
              "type": "uint32"
            },
            {
              "internalType": "int32",
              "name": "voteCount",
              "type": "int32"
            }
          ],
          "internalType": "struct DAO.Proposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "getMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembersList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "address",
          "name": "memberAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "memberSince",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "startDate",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endDate",
          "type": "uint32"
        },
        {
          "internalType": "int32",
          "name": "voteCount",
          "type": "int32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "upVote",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb7df7b02c294889c239fbef3660da9c770ee740ffac16084ec173d339107f4d3",
  "receipt": {
    "to": null,
    "from": "0x6EC0B2CF70e74B2D9e5b9f14a6CE7936dCC48066",
    "contractAddress": "0xcAfBf92Fd6c1f073405c6bd62030630C5C9c7dec",
    "transactionIndex": 49,
    "gasUsed": "2812489",
    "logsBloom": "0x
    "blockHash": "0xb6979cb54df475ef7d00101dfa4eedbdc374bbfd66eaadf306353adea84a40eb",
    "transactionHash": "0xb7df7b02c294889c239fbef3660da9c770ee740ffac16084ec173d339107f4d3",
    "logs": [],
    "blockNumber": 3442311,
    "cumulativeGasUsed": "10064692",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6272616d00000000000000000000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "cb45a82abcd166368c1c5985eb2ba6e1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum DAO.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum DAO.Duration\",\"name\":\"duration\",\"type\":\"uint8\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"upVote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"enum DAO.Role\",\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"enum DAO.Duration\",\"name\":\"_duration\",\"type\":\"uint8\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endDate\",\"type\":\"uint32\"},{\"internalType\":\"int32\",\"name\":\"voteCount\",\"type\":\"int32\"}],\"internalType\":\"struct DAO.Proposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"getMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"memberSince\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endDate\",\"type\":\"uint32\"},{\"internalType\":\"int32\",\"name\":\"voteCount\",\"type\":\"int32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"upVote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Bram Mathijssen\",\"kind\":\"dev\",\"methods\":{},\"title\":\"DAO\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"My DAO\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO.sol\":\"DAO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\nerror ParentContract__NotOwnerOfToken();\\r\\n\\r\\n/// @title DAO\\r\\n/// @author Bram Mathijssen\\r\\n/// @notice My DAO\\r\\ncontract DAO {\\r\\n    /* Type declarations */\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    enum Role {\\r\\n        USER,\\r\\n        ADMIN\\r\\n    }\\r\\n\\r\\n    enum Duration {\\r\\n        DAY,\\r\\n        WEEK,\\r\\n        MONTH\\r\\n    }\\r\\n\\r\\n    /* State Variables */\\r\\n    Counters.Counter private _proposalIds;\\r\\n    Counters.Counter private _memberIds;\\r\\n    address private immutable i_owner;\\r\\n    bytes32 private constant USER = keccak256(abi.encodePacked(\\\"USER\\\"));\\r\\n    bytes32 private constant ADMIN = keccak256(abi.encodePacked(\\\"ADMIN\\\"));\\r\\n\\r\\n    mapping(address => Member) public members;\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n\\r\\n    address[] private _membersList;\\r\\n\\r\\n    /* Structs */\\r\\n    struct Member {\\r\\n        // uint256 id;\\r\\n        address memberAddress;\\r\\n        bool valid; // checks if member has been initialised in mapping\\r\\n        bytes32 name;\\r\\n        uint256 memberSince;\\r\\n        mapping(bytes32 => bool) role; // mapping gives ability to hold multiple roles\\r\\n    }\\r\\n\\r\\n    struct Proposal {\\r\\n        uint256 id;\\r\\n        bool valid;\\r\\n        bool active;\\r\\n        string description;\\r\\n        uint32 startDate;\\r\\n        uint32 endDate;\\r\\n        int32 voteCount;\\r\\n    }\\r\\n\\r\\n    /* Events */\\r\\n    event MemberAdded(address indexed memberAddress, bytes32 name, Role role);\\r\\n    event ProposalCreated(\\r\\n        uint256 indexed proposalCount,\\r\\n        string description,\\r\\n        Duration duration\\r\\n    );\\r\\n    event Voted(\\r\\n        uint256 indexed proposalNumber,\\r\\n        bool upVote,\\r\\n        address voterAddress\\r\\n    );\\r\\n\\r\\n    /* Modifiers */\\r\\n    modifier hasRole(bytes32 _role) {\\r\\n        bool authorized;\\r\\n\\r\\n        if (_role == USER) {\\r\\n            members[msg.sender].role[ADMIN] || members[msg.sender].role[USER]\\r\\n                ? authorized = true\\r\\n                : authorized = false;\\r\\n        }\\r\\n        if (_role == ADMIN) {\\r\\n            members[msg.sender].role[ADMIN]\\r\\n                ? authorized = true\\r\\n                : authorized = false;\\r\\n        }\\r\\n\\r\\n        require(authorized == true, \\\"don't have correct role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* Constructor */\\r\\n    constructor(bytes32 _name) {\\r\\n        i_owner = msg.sender;\\r\\n\\r\\n        // load struct in storage before assigning values since we are using a mapping inside struct\\r\\n        Member storage member = members[msg.sender];\\r\\n        member.valid = true;\\r\\n        member.name = _name;\\r\\n        member.memberSince = block.timestamp;\\r\\n        member.role[ADMIN] = true;\\r\\n    }\\r\\n\\r\\n    /* Functions */\\r\\n\\r\\n    /* external Functions */\\r\\n    function addMember(\\r\\n        address _address,\\r\\n        bytes32 _name,\\r\\n        Role _role\\r\\n    ) external hasRole(ADMIN) {\\r\\n        require(_address != address(0), \\\"address can't be 0\\\");\\r\\n        require(_name != bytes32(0), \\\"name can't be 0\\\");\\r\\n        require(members[_address].valid == false, \\\"member already exists\\\");\\r\\n\\r\\n        Member storage member = members[_address];\\r\\n        member.memberAddress = _address;\\r\\n        member.valid = true;\\r\\n        member.name = _name;\\r\\n        member.memberSince = block.timestamp;\\r\\n        member.role[_getRole(_role)] = true;\\r\\n\\r\\n        _membersList.push(_address);\\r\\n\\r\\n        emit MemberAdded(_address, _name, _role);\\r\\n    }\\r\\n\\r\\n    // todo: remove member\\r\\n\\r\\n    function createProposal(\\r\\n        string memory _description,\\r\\n        Duration _duration\\r\\n    ) external hasRole(USER) {\\r\\n        require(bytes(_description).length > 10, \\\"need atleast 10 characters\\\");\\r\\n        _proposalIds.increment();\\r\\n        uint256 proposalId = _proposalIds.current();\\r\\n        proposals[proposalId] = Proposal({\\r\\n            id: proposalId,\\r\\n            valid: true,\\r\\n            description: _description,\\r\\n            startDate: uint32(block.timestamp),\\r\\n            endDate: uint32(_getTimestampByDuration(_duration)),\\r\\n            active: true,\\r\\n            voteCount: 0\\r\\n        });\\r\\n        emit ProposalCreated(proposalId, _description, _duration);\\r\\n    }\\r\\n\\r\\n    function vote(uint256 _proposalNumber, bool upVote) external hasRole(USER) {\\r\\n        Proposal storage proposal = proposals[_proposalNumber];\\r\\n        require(proposal.valid == true, \\\"proposal not valid\\\");\\r\\n        require(proposal.active == true, \\\"proposal not active\\\");\\r\\n        require(block.timestamp < proposal.endDate, \\\"proposal ended\\\");\\r\\n        require(\\r\\n            block.timestamp >= proposal.startDate,\\r\\n            \\\"proposal hasn't started\\\"\\r\\n        );\\r\\n        if (upVote) {\\r\\n            proposal.voteCount++;\\r\\n        } else {\\r\\n            proposals[_proposalNumber].voteCount--;\\r\\n        }\\r\\n        emit Voted(_proposalNumber, upVote, msg.sender);\\r\\n    }\\r\\n\\r\\n    function getAllProposals() external view returns (Proposal[] memory) {\\r\\n        uint256 proposalId = _proposalIds.current();\\r\\n\\r\\n        Proposal[] memory proposalsList = new Proposal[](proposalId);\\r\\n        for (uint256 i = 0; i < proposalId; i++) {\\r\\n            uint256 currentId = i + 1;\\r\\n            Proposal storage currentItem = proposals[currentId];\\r\\n            proposalsList[i] = currentItem;\\r\\n        }\\r\\n        return proposalsList;\\r\\n    }\\r\\n\\r\\n    function getMembersList() external view returns (address[] memory) {\\r\\n        return _membersList;\\r\\n    }\\r\\n\\r\\n    // getting members from member struct with individual properties\\r\\n    function getMembers()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address[] memory,\\r\\n            bool[] memory,\\r\\n            bytes32[] memory,\\r\\n            uint256[] memory\\r\\n        )\\r\\n    {\\r\\n        address[] memory addresses = new address[](_membersList.length);\\r\\n        bool[] memory valid = new bool[](_membersList.length);\\r\\n        bytes32[] memory names = new bytes32[](_membersList.length);\\r\\n        uint256[] memory memberSince = new uint256[](_membersList.length);\\r\\n\\r\\n        for (uint256 i = 0; i < _membersList.length; i++) {\\r\\n            address tempAddress = _membersList[i];\\r\\n            addresses[i] = members[tempAddress].memberAddress;\\r\\n            valid[i] = members[tempAddress].valid;\\r\\n            names[i] = members[tempAddress].name;\\r\\n            memberSince[i] = members[tempAddress].memberSince;\\r\\n        }\\r\\n        return (addresses, valid, names, memberSince);\\r\\n    }\\r\\n\\r\\n    // doesnt work\\r\\n    // function getMembersMapping() external returns (Member[] memory) {\\r\\n\\r\\n    // }\\r\\n\\r\\n    // gets a individual member\\r\\n    function getMember(\\r\\n        address _memberAddress\\r\\n    ) external view returns (address, bool, bytes32, uint256) {\\r\\n        Member storage member = members[_memberAddress];\\r\\n        return (\\r\\n            member.memberAddress,\\r\\n            member.valid,\\r\\n            member.name,\\r\\n            member.memberSince\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* public Functions */\\r\\n    /* internal Functions */\\r\\n\\r\\n    /* private Functions */\\r\\n    function _getTimestampByDuration(\\r\\n        Duration _duration\\r\\n    ) private view returns (uint256) {\\r\\n        if (_duration == Duration.DAY) {\\r\\n            return block.timestamp + 1 days;\\r\\n        }\\r\\n        if (_duration == Duration.WEEK) {\\r\\n            return block.timestamp + 1 weeks;\\r\\n        }\\r\\n        if (_duration == Duration.MONTH) {\\r\\n            return block.timestamp + 4 weeks;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _grantRole(\\r\\n        address _memberAddress,\\r\\n        Role _role\\r\\n    ) private hasRole(ADMIN) {\\r\\n        Member storage member = members[_memberAddress];\\r\\n        member.role[_getRole(_role)] = true;\\r\\n    }\\r\\n\\r\\n    function _getRole(Role _role) private pure returns (bytes32) {\\r\\n        if (_role == Role.USER) {\\r\\n            return USER;\\r\\n        }\\r\\n        if (_role == Role.ADMIN) {\\r\\n            return ADMIN;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x76fc895a7cbab7babe2146e7d690e34a3c1fe15d2117f0f0eb2ade23dffb2c36\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200328238038062003282833981810160405281019062000037919062000179565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000160146101000a81548160ff0219169083151502179055508181600101819055504281600201819055506001816003016000604051602001620000f69062000206565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555050506200021d565b600080fd5b6000819050919050565b62000153816200013e565b81146200015f57600080fd5b50565b600081519050620001738162000148565b92915050565b60006020828403121562000192576200019162000139565b5b6000620001a28482850162000162565b91505092915050565b600081905092915050565b7f41444d494e000000000000000000000000000000000000000000000000000000600082015250565b6000620001ee600583620001ab565b9150620001fb82620001b6565b600582019050919050565b60006200021382620001df565b9150819050919050565b60805161304c620002366000396000505061304c6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a147d93211610066578063a147d93214610155578063b6bd839614610173578063c9d27afe1461018f578063cceb68f5146101ab578063d1c29a29146101c957610093565b8063013cf08b1461009857806308ae4b0c146100ce5780632ada2596146101015780639eab525314610134575b600080fd5b6100b260048036038101906100ad9190611b57565b6101e5565b6040516100c59796959493929190611c79565b60405180910390f35b6100e860048036038101906100e39190611d4d565b6102f6565b6040516100f89493929190611da2565b60405180910390f35b61011b60048036038101906101169190611d4d565b610353565b60405161012b9493929190611da2565b60405180910390f35b61013c6103ed565b60405161014c94939291906120df565b60405180910390f35b61015d6107a2565b60405161016a9190612140565b60405180910390f35b61018d600480360381019061018891906121b3565b610830565b005b6101a960048036038101906101a49190612232565b610da6565b005b6101b3611291565b6040516101c09190612438565b60405180910390f35b6101e360048036038101906101de91906125b4565b6114af565b005b60036020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060020180546102349061263f565b80601f01602080910402602001604051908101604052809291908181526020018280546102609061263f565b80156102ad5780601f10610282576101008083540402835291602001916102ad565b820191906000526020600020905b81548152906001019060200180831161029057829003601f168201915b5050505050908060030160009054906101000a900463ffffffff16908060030160049054906101000a900463ffffffff16908060030160089054906101000a900460030b905087565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060010154908060020154905084565b6000806000806000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160149054906101000a900460ff16826001015483600201549450945094509450509193509193565b606080606080600060048054905067ffffffffffffffff81111561041457610413612464565b5b6040519080825280602002602001820160405280156104425781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff81111561046657610465612464565b5b6040519080825280602002602001820160405280156104945781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff8111156104b8576104b7612464565b5b6040519080825280602002602001820160405280156104e65781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff81111561050a57610509612464565b5b6040519080825280602002602001820160405280156105385781602001602082028036833780820191505090505b50905060005b60048054905081101561078b5760006004828154811061056157610560612670565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686838151811061060457610603612670565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff168583815181106106a1576106a0612670565b5b602002602001019015159081151581525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015484838151811061070957610708612670565b5b602002602001018181525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015483838151811061076b5761076a612670565b5b602002602001018181525050508080610783906126ce565b91505061053e565b508383838397509750975097505050505090919293565b6060600480548060200260200160405190810160405280929190818152602001828054801561082657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107dc575b5050505050905090565b60405160200161083f9061276d565b604051602081830303815290604052805190602001206000604051602001610866906127ce565b6040516020818303038152906040528051906020012082036109a957600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016108d59061276d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16806109935750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610960906127ce565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b6109a15760009050806109a7565b60019050805b505b6040516020016109b89061276d565b604051602081830303815290604052805190602001208203610a6f57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610a279061276d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16610a67576000905080610a6d565b60019050805b505b6001151581151514610ab6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aad9061282f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1c9061289b565b60405180910390fd5b6000801b8403610b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6190612907565b60405180910390fd5b60001515600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff16151514610c00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf790612973565b60405180910390fd5b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050858160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000160146101000a81548160ff0219169083151502179055508481600101819055504281600201819055506001816003016000610cc687611911565b815260200190815260200160002060006101000a81548160ff0219169083151502179055506004869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff167fbe61d680988ec1460d4972efa07e74ca182afcee5ffacb887cf9ac6ed0e3d2568686604051610d96929190612a0a565b60405180910390a2505050505050565b604051602001610db5906127ce565b604051602081830303815290604052805190602001206000604051602001610ddc906127ce565b604051602081830303815290604052805190602001208203610f1f57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610e4b9061276d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1680610f095750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610ed6906127ce565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b610f17576000905080610f1d565b60019050805b505b604051602001610f2e9061276d565b604051602081830303815290604052805190602001208203610fe557600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610f9d9061276d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16610fdd576000905080610fe3565b60019050805b505b600115158115151461102c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110239061282f565b60405180910390fd5b6000600360008681526020019081526020016000209050600115158160010160009054906101000a900460ff1615151461109b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109290612a7f565b60405180910390fd5b600115158160010160019054906101000a900460ff161515146110f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ea90612aeb565b60405180910390fd5b8060030160049054906101000a900463ffffffff1663ffffffff16421061114f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114690612b57565b60405180910390fd5b8060030160009054906101000a900463ffffffff1663ffffffff164210156111ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a390612bc3565b60405180910390fd5b83156111fa5780600301600881819054906101000a900460030b809291906111d390612be3565b91906101000a81548163ffffffff021916908360030b63ffffffff16021790555050611250565b60036000868152602001908152602001600020600301600881819054906101000a900460030b8092919061122d90612c0f565b91906101000a81548163ffffffff021916908360030b63ffffffff160217905550505b847f86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae08533604051611282929190612c57565b60405180910390a25050505050565b6060600061129f60006119cd565b905060008167ffffffffffffffff8111156112bd576112bc612464565b5b6040519080825280602002602001820160405280156112f657816020015b6112e3611abd565b8152602001906001900390816112db5790505b50905060005b828110156114a65760006001826113139190612c80565b90506000600360008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a900460ff161515151581526020016002820180546113889061263f565b80601f01602080910402602001604051908101604052809291908181526020018280546113b49061263f565b80156114015780601f106113d657610100808354040283529160200191611401565b820191906000526020600020905b8154815290600101906020018083116113e457829003601f168201915b505050505081526020016003820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016003820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016003820160089054906101000a900460030b60030b60030b8152505084848151811061148657611485612670565b5b60200260200101819052505050808061149e906126ce565b9150506112fc565b50809250505090565b6040516020016114be906127ce565b6040516020818303038152906040528051906020012060006040516020016114e5906127ce565b60405160208183030381529060405280519060200120820361162857600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016115549061276d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16806116125750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016115df906127ce565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b611620576000905080611626565b60019050805b505b6040516020016116379061276d565b6040516020818303038152906040528051906020012082036116ee57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016116a69061276d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff166116e65760009050806116ec565b60019050805b505b6001151581151514611735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172c9061282f565b60405180910390fd5b600a845111611779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177090612d00565b60405180910390fd5b61178360006119db565b600061178f60006119cd565b90506040518060e001604052808281526020016001151581526020016001151581526020018681526020014263ffffffff1681526020016117cf866119f1565b63ffffffff168152602001600060030b815250600360008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff02191690831515021790555060608201518160020190816118549190612ecc565b5060808201518160030160006101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160030160046101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160030160086101000a81548163ffffffff021916908360030b63ffffffff160217905550905050807fd54d24c2f5d3c070ed74aa4a4926cc273f4bdf17b66ce3d0a6493b11da160e288686604051611902929190612fe6565b60405180910390a25050505050565b600080600181111561192657611925612993565b5b82600181111561193957611938612993565b5b0361196a5760405160200161194d906127ce565b6040516020818303038152906040528051906020012090506119c8565b60018081111561197d5761197c612993565b5b8260018111156119905761198f612993565b5b036119c1576040516020016119a49061276d565b6040516020818303038152906040528051906020012090506119c8565b6000801b90505b919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000806002811115611a0657611a05612993565b5b826002811115611a1957611a18612993565b5b03611a34576201518042611a2d9190612c80565b9050611ab8565b60016002811115611a4857611a47612993565b5b826002811115611a5b57611a5a612993565b5b03611a765762093a8042611a6f9190612c80565b9050611ab8565b600280811115611a8957611a88612993565b5b826002811115611a9c57611a9b612993565b5b03611ab7576224ea0042611ab09190612c80565b9050611ab8565b5b919050565b6040518060e001604052806000815260200160001515815260200160001515815260200160608152602001600063ffffffff168152602001600063ffffffff168152602001600060030b81525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611b3481611b21565b8114611b3f57600080fd5b50565b600081359050611b5181611b2b565b92915050565b600060208284031215611b6d57611b6c611b17565b5b6000611b7b84828501611b42565b91505092915050565b611b8d81611b21565b82525050565b60008115159050919050565b611ba881611b93565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611be8578082015181840152602081019050611bcd565b60008484015250505050565b6000601f19601f8301169050919050565b6000611c1082611bae565b611c1a8185611bb9565b9350611c2a818560208601611bca565b611c3381611bf4565b840191505092915050565b600063ffffffff82169050919050565b611c5781611c3e565b82525050565b60008160030b9050919050565b611c7381611c5d565b82525050565b600060e082019050611c8e600083018a611b84565b611c9b6020830189611b9f565b611ca86040830188611b9f565b8181036060830152611cba8187611c05565b9050611cc96080830186611c4e565b611cd660a0830185611c4e565b611ce360c0830184611c6a565b98975050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d1a82611cef565b9050919050565b611d2a81611d0f565b8114611d3557600080fd5b50565b600081359050611d4781611d21565b92915050565b600060208284031215611d6357611d62611b17565b5b6000611d7184828501611d38565b91505092915050565b611d8381611d0f565b82525050565b6000819050919050565b611d9c81611d89565b82525050565b6000608082019050611db76000830187611d7a565b611dc46020830186611b9f565b611dd16040830185611d93565b611dde6060830184611b84565b95945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611e1c81611d0f565b82525050565b6000611e2e8383611e13565b60208301905092915050565b6000602082019050919050565b6000611e5282611de7565b611e5c8185611df2565b9350611e6783611e03565b8060005b83811015611e98578151611e7f8882611e22565b9750611e8a83611e3a565b925050600181019050611e6b565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611eda81611b93565b82525050565b6000611eec8383611ed1565b60208301905092915050565b6000602082019050919050565b6000611f1082611ea5565b611f1a8185611eb0565b9350611f2583611ec1565b8060005b83811015611f56578151611f3d8882611ee0565b9750611f4883611ef8565b925050600181019050611f29565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611f9881611d89565b82525050565b6000611faa8383611f8f565b60208301905092915050565b6000602082019050919050565b6000611fce82611f63565b611fd88185611f6e565b9350611fe383611f7f565b8060005b83811015612014578151611ffb8882611f9e565b975061200683611fb6565b925050600181019050611fe7565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61205681611b21565b82525050565b6000612068838361204d565b60208301905092915050565b6000602082019050919050565b600061208c82612021565b612096818561202c565b93506120a18361203d565b8060005b838110156120d25781516120b9888261205c565b97506120c483612074565b9250506001810190506120a5565b5085935050505092915050565b600060808201905081810360008301526120f98187611e47565b9050818103602083015261210d8186611f05565b905081810360408301526121218185611fc3565b905081810360608301526121358184612081565b905095945050505050565b6000602082019050818103600083015261215a8184611e47565b905092915050565b61216b81611d89565b811461217657600080fd5b50565b60008135905061218881612162565b92915050565b6002811061219b57600080fd5b50565b6000813590506121ad8161218e565b92915050565b6000806000606084860312156121cc576121cb611b17565b5b60006121da86828701611d38565b93505060206121eb86828701612179565b92505060406121fc8682870161219e565b9150509250925092565b61220f81611b93565b811461221a57600080fd5b50565b60008135905061222c81612206565b92915050565b6000806040838503121561224957612248611b17565b5b600061225785828601611b42565b92505060206122688582860161221d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006122ba82611bae565b6122c4818561229e565b93506122d4818560208601611bca565b6122dd81611bf4565b840191505092915050565b6122f181611c3e565b82525050565b61230081611c5d565b82525050565b600060e08301600083015161231e600086018261204d565b5060208301516123316020860182611ed1565b5060408301516123446040860182611ed1565b506060830151848203606086015261235c82826122af565b915050608083015161237160808601826122e8565b5060a083015161238460a08601826122e8565b5060c083015161239760c08601826122f7565b508091505092915050565b60006123ae8383612306565b905092915050565b6000602082019050919050565b60006123ce82612272565b6123d8818561227d565b9350836020820285016123ea8561228e565b8060005b85811015612426578484038952815161240785826123a2565b9450612412836123b6565b925060208a019950506001810190506123ee565b50829750879550505050505092915050565b6000602082019050818103600083015261245281846123c3565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61249c82611bf4565b810181811067ffffffffffffffff821117156124bb576124ba612464565b5b80604052505050565b60006124ce611b0d565b90506124da8282612493565b919050565b600067ffffffffffffffff8211156124fa576124f9612464565b5b61250382611bf4565b9050602081019050919050565b82818337600083830152505050565b600061253261252d846124df565b6124c4565b90508281526020810184848401111561254e5761254d61245f565b5b612559848285612510565b509392505050565b600082601f8301126125765761257561245a565b5b813561258684826020860161251f565b91505092915050565b6003811061259c57600080fd5b50565b6000813590506125ae8161258f565b92915050565b600080604083850312156125cb576125ca611b17565b5b600083013567ffffffffffffffff8111156125e9576125e8611b1c565b5b6125f585828601612561565b92505060206126068582860161259f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061265757607f821691505b60208210810361266a57612669612610565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126d982611b21565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361270b5761270a61269f565b5b600182019050919050565b600081905092915050565b7f41444d494e000000000000000000000000000000000000000000000000000000600082015250565b6000612757600583612716565b915061276282612721565b600582019050919050565b60006127788261274a565b9150819050919050565b7f5553455200000000000000000000000000000000000000000000000000000000600082015250565b60006127b8600483612716565b91506127c382612782565b600482019050919050565b60006127d9826127ab565b9150819050919050565b7f646f6e2774206861766520636f727265637420726f6c65000000000000000000600082015250565b6000612819601783611bb9565b9150612824826127e3565b602082019050919050565b600060208201905081810360008301526128488161280c565b9050919050565b7f616464726573732063616e277420626520300000000000000000000000000000600082015250565b6000612885601283611bb9565b91506128908261284f565b602082019050919050565b600060208201905081810360008301526128b481612878565b9050919050565b7f6e616d652063616e277420626520300000000000000000000000000000000000600082015250565b60006128f1600f83611bb9565b91506128fc826128bb565b602082019050919050565b60006020820190508181036000830152612920816128e4565b9050919050565b7f6d656d62657220616c7265616479206578697374730000000000000000000000600082015250565b600061295d601583611bb9565b915061296882612927565b602082019050919050565b6000602082019050818103600083015261298c81612950565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106129d3576129d2612993565b5b50565b60008190506129e4826129c2565b919050565b60006129f4826129d6565b9050919050565b612a04816129e9565b82525050565b6000604082019050612a1f6000830185611d93565b612a2c60208301846129fb565b9392505050565b7f70726f706f73616c206e6f742076616c69640000000000000000000000000000600082015250565b6000612a69601283611bb9565b9150612a7482612a33565b602082019050919050565b60006020820190508181036000830152612a9881612a5c565b9050919050565b7f70726f706f73616c206e6f742061637469766500000000000000000000000000600082015250565b6000612ad5601383611bb9565b9150612ae082612a9f565b602082019050919050565b60006020820190508181036000830152612b0481612ac8565b9050919050565b7f70726f706f73616c20656e646564000000000000000000000000000000000000600082015250565b6000612b41600e83611bb9565b9150612b4c82612b0b565b602082019050919050565b60006020820190508181036000830152612b7081612b34565b9050919050565b7f70726f706f73616c206861736e27742073746172746564000000000000000000600082015250565b6000612bad601783611bb9565b9150612bb882612b77565b602082019050919050565b60006020820190508181036000830152612bdc81612ba0565b9050919050565b6000612bee82611c5d565b9150637fffffff8203612c0457612c0361269f565b5b600182019050919050565b6000612c1a82611c5d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000008203612c4c57612c4b61269f565b5b600182039050919050565b6000604082019050612c6c6000830185611b9f565b612c796020830184611d7a565b9392505050565b6000612c8b82611b21565b9150612c9683611b21565b9250828201905080821115612cae57612cad61269f565b5b92915050565b7f6e6565642061746c656173742031302063686172616374657273000000000000600082015250565b6000612cea601a83611bb9565b9150612cf582612cb4565b602082019050919050565b60006020820190508181036000830152612d1981612cdd565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612d827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612d45565b612d8c8683612d45565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612dc9612dc4612dbf84611b21565b612da4565b611b21565b9050919050565b6000819050919050565b612de383612dae565b612df7612def82612dd0565b848454612d52565b825550505050565b600090565b612e0c612dff565b612e17818484612dda565b505050565b5b81811015612e3b57612e30600082612e04565b600181019050612e1d565b5050565b601f821115612e8057612e5181612d20565b612e5a84612d35565b81016020851015612e69578190505b612e7d612e7585612d35565b830182612e1c565b50505b505050565b600082821c905092915050565b6000612ea360001984600802612e85565b1980831691505092915050565b6000612ebc8383612e92565b9150826002028217905092915050565b612ed582611bae565b67ffffffffffffffff811115612eee57612eed612464565b5b612ef8825461263f565b612f03828285612e3f565b600060209050601f831160018114612f365760008415612f24578287015190505b612f2e8582612eb0565b865550612f96565b601f198416612f4486612d20565b60005b82811015612f6c57848901518255600182019150602085019450602081019050612f47565b86831015612f895784890151612f85601f891682612e92565b8355505b6001600288020188555050505b505050505050565b60038110612faf57612fae612993565b5b50565b6000819050612fc082612f9e565b919050565b6000612fd082612fb2565b9050919050565b612fe081612fc5565b82525050565b600060408201905081810360008301526130008185611c05565b905061300f6020830184612fd7565b939250505056fea2646970667358221220508b96ccb08bdcd869bd839a0c2d814bdba9a26d94018b1534ec91eceb98473a64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063a147d93211610066578063a147d93214610155578063b6bd839614610173578063c9d27afe1461018f578063cceb68f5146101ab578063d1c29a29146101c957610093565b8063013cf08b1461009857806308ae4b0c146100ce5780632ada2596146101015780639eab525314610134575b600080fd5b6100b260048036038101906100ad9190611b57565b6101e5565b6040516100c59796959493929190611c79565b60405180910390f35b6100e860048036038101906100e39190611d4d565b6102f6565b6040516100f89493929190611da2565b60405180910390f35b61011b60048036038101906101169190611d4d565b610353565b60405161012b9493929190611da2565b60405180910390f35b61013c6103ed565b60405161014c94939291906120df565b60405180910390f35b61015d6107a2565b60405161016a9190612140565b60405180910390f35b61018d600480360381019061018891906121b3565b610830565b005b6101a960048036038101906101a49190612232565b610da6565b005b6101b3611291565b6040516101c09190612438565b60405180910390f35b6101e360048036038101906101de91906125b4565b6114af565b005b60036020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060020180546102349061263f565b80601f01602080910402602001604051908101604052809291908181526020018280546102609061263f565b80156102ad5780601f10610282576101008083540402835291602001916102ad565b820191906000526020600020905b81548152906001019060200180831161029057829003601f168201915b5050505050908060030160009054906101000a900463ffffffff16908060030160049054906101000a900463ffffffff16908060030160089054906101000a900460030b905087565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060010154908060020154905084565b6000806000806000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160149054906101000a900460ff16826001015483600201549450945094509450509193509193565b606080606080600060048054905067ffffffffffffffff81111561041457610413612464565b5b6040519080825280602002602001820160405280156104425781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff81111561046657610465612464565b5b6040519080825280602002602001820160405280156104945781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff8111156104b8576104b7612464565b5b6040519080825280602002602001820160405280156104e65781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff81111561050a57610509612464565b5b6040519080825280602002602001820160405280156105385781602001602082028036833780820191505090505b50905060005b60048054905081101561078b5760006004828154811061056157610560612670565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686838151811061060457610603612670565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff168583815181106106a1576106a0612670565b5b602002602001019015159081151581525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015484838151811061070957610708612670565b5b602002602001018181525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015483838151811061076b5761076a612670565b5b602002602001018181525050508080610783906126ce565b91505061053e565b508383838397509750975097505050505090919293565b6060600480548060200260200160405190810160405280929190818152602001828054801561082657602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107dc575b5050505050905090565b60405160200161083f9061276d565b604051602081830303815290604052805190602001206000604051602001610866906127ce565b6040516020818303038152906040528051906020012082036109a957600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016108d59061276d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16806109935750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610960906127ce565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b6109a15760009050806109a7565b60019050805b505b6040516020016109b89061276d565b604051602081830303815290604052805190602001208203610a6f57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610a279061276d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16610a67576000905080610a6d565b60019050805b505b6001151581151514610ab6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aad9061282f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610b25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1c9061289b565b60405180910390fd5b6000801b8403610b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6190612907565b60405180910390fd5b60001515600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff16151514610c00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf790612973565b60405180910390fd5b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050858160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000160146101000a81548160ff0219169083151502179055508481600101819055504281600201819055506001816003016000610cc687611911565b815260200190815260200160002060006101000a81548160ff0219169083151502179055506004869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff167fbe61d680988ec1460d4972efa07e74ca182afcee5ffacb887cf9ac6ed0e3d2568686604051610d96929190612a0a565b60405180910390a2505050505050565b604051602001610db5906127ce565b604051602081830303815290604052805190602001206000604051602001610ddc906127ce565b604051602081830303815290604052805190602001208203610f1f57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610e4b9061276d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1680610f095750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610ed6906127ce565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b610f17576000905080610f1d565b60019050805b505b604051602001610f2e9061276d565b604051602081830303815290604052805190602001208203610fe557600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610f9d9061276d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16610fdd576000905080610fe3565b60019050805b505b600115158115151461102c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110239061282f565b60405180910390fd5b6000600360008681526020019081526020016000209050600115158160010160009054906101000a900460ff1615151461109b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109290612a7f565b60405180910390fd5b600115158160010160019054906101000a900460ff161515146110f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ea90612aeb565b60405180910390fd5b8060030160049054906101000a900463ffffffff1663ffffffff16421061114f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114690612b57565b60405180910390fd5b8060030160009054906101000a900463ffffffff1663ffffffff164210156111ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a390612bc3565b60405180910390fd5b83156111fa5780600301600881819054906101000a900460030b809291906111d390612be3565b91906101000a81548163ffffffff021916908360030b63ffffffff16021790555050611250565b60036000868152602001908152602001600020600301600881819054906101000a900460030b8092919061122d90612c0f565b91906101000a81548163ffffffff021916908360030b63ffffffff160217905550505b847f86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae08533604051611282929190612c57565b60405180910390a25050505050565b6060600061129f60006119cd565b905060008167ffffffffffffffff8111156112bd576112bc612464565b5b6040519080825280602002602001820160405280156112f657816020015b6112e3611abd565b8152602001906001900390816112db5790505b50905060005b828110156114a65760006001826113139190612c80565b90506000600360008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a900460ff161515151581526020016002820180546113889061263f565b80601f01602080910402602001604051908101604052809291908181526020018280546113b49061263f565b80156114015780601f106113d657610100808354040283529160200191611401565b820191906000526020600020905b8154815290600101906020018083116113e457829003601f168201915b505050505081526020016003820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016003820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016003820160089054906101000a900460030b60030b60030b8152505084848151811061148657611485612670565b5b60200260200101819052505050808061149e906126ce565b9150506112fc565b50809250505090565b6040516020016114be906127ce565b6040516020818303038152906040528051906020012060006040516020016114e5906127ce565b60405160208183030381529060405280519060200120820361162857600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016115549061276d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16806116125750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016115df906127ce565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b611620576000905080611626565b60019050805b505b6040516020016116379061276d565b6040516020818303038152906040528051906020012082036116ee57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016116a69061276d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff166116e65760009050806116ec565b60019050805b505b6001151581151514611735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172c9061282f565b60405180910390fd5b600a845111611779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177090612d00565b60405180910390fd5b61178360006119db565b600061178f60006119cd565b90506040518060e001604052808281526020016001151581526020016001151581526020018681526020014263ffffffff1681526020016117cf866119f1565b63ffffffff168152602001600060030b815250600360008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff02191690831515021790555060608201518160020190816118549190612ecc565b5060808201518160030160006101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160030160046101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160030160086101000a81548163ffffffff021916908360030b63ffffffff160217905550905050807fd54d24c2f5d3c070ed74aa4a4926cc273f4bdf17b66ce3d0a6493b11da160e288686604051611902929190612fe6565b60405180910390a25050505050565b600080600181111561192657611925612993565b5b82600181111561193957611938612993565b5b0361196a5760405160200161194d906127ce565b6040516020818303038152906040528051906020012090506119c8565b60018081111561197d5761197c612993565b5b8260018111156119905761198f612993565b5b036119c1576040516020016119a49061276d565b6040516020818303038152906040528051906020012090506119c8565b6000801b90505b919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000806002811115611a0657611a05612993565b5b826002811115611a1957611a18612993565b5b03611a34576201518042611a2d9190612c80565b9050611ab8565b60016002811115611a4857611a47612993565b5b826002811115611a5b57611a5a612993565b5b03611a765762093a8042611a6f9190612c80565b9050611ab8565b600280811115611a8957611a88612993565b5b826002811115611a9c57611a9b612993565b5b03611ab7576224ea0042611ab09190612c80565b9050611ab8565b5b919050565b6040518060e001604052806000815260200160001515815260200160001515815260200160608152602001600063ffffffff168152602001600063ffffffff168152602001600060030b81525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611b3481611b21565b8114611b3f57600080fd5b50565b600081359050611b5181611b2b565b92915050565b600060208284031215611b6d57611b6c611b17565b5b6000611b7b84828501611b42565b91505092915050565b611b8d81611b21565b82525050565b60008115159050919050565b611ba881611b93565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611be8578082015181840152602081019050611bcd565b60008484015250505050565b6000601f19601f8301169050919050565b6000611c1082611bae565b611c1a8185611bb9565b9350611c2a818560208601611bca565b611c3381611bf4565b840191505092915050565b600063ffffffff82169050919050565b611c5781611c3e565b82525050565b60008160030b9050919050565b611c7381611c5d565b82525050565b600060e082019050611c8e600083018a611b84565b611c9b6020830189611b9f565b611ca86040830188611b9f565b8181036060830152611cba8187611c05565b9050611cc96080830186611c4e565b611cd660a0830185611c4e565b611ce360c0830184611c6a565b98975050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d1a82611cef565b9050919050565b611d2a81611d0f565b8114611d3557600080fd5b50565b600081359050611d4781611d21565b92915050565b600060208284031215611d6357611d62611b17565b5b6000611d7184828501611d38565b91505092915050565b611d8381611d0f565b82525050565b6000819050919050565b611d9c81611d89565b82525050565b6000608082019050611db76000830187611d7a565b611dc46020830186611b9f565b611dd16040830185611d93565b611dde6060830184611b84565b95945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611e1c81611d0f565b82525050565b6000611e2e8383611e13565b60208301905092915050565b6000602082019050919050565b6000611e5282611de7565b611e5c8185611df2565b9350611e6783611e03565b8060005b83811015611e98578151611e7f8882611e22565b9750611e8a83611e3a565b925050600181019050611e6b565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611eda81611b93565b82525050565b6000611eec8383611ed1565b60208301905092915050565b6000602082019050919050565b6000611f1082611ea5565b611f1a8185611eb0565b9350611f2583611ec1565b8060005b83811015611f56578151611f3d8882611ee0565b9750611f4883611ef8565b925050600181019050611f29565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611f9881611d89565b82525050565b6000611faa8383611f8f565b60208301905092915050565b6000602082019050919050565b6000611fce82611f63565b611fd88185611f6e565b9350611fe383611f7f565b8060005b83811015612014578151611ffb8882611f9e565b975061200683611fb6565b925050600181019050611fe7565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61205681611b21565b82525050565b6000612068838361204d565b60208301905092915050565b6000602082019050919050565b600061208c82612021565b612096818561202c565b93506120a18361203d565b8060005b838110156120d25781516120b9888261205c565b97506120c483612074565b9250506001810190506120a5565b5085935050505092915050565b600060808201905081810360008301526120f98187611e47565b9050818103602083015261210d8186611f05565b905081810360408301526121218185611fc3565b905081810360608301526121358184612081565b905095945050505050565b6000602082019050818103600083015261215a8184611e47565b905092915050565b61216b81611d89565b811461217657600080fd5b50565b60008135905061218881612162565b92915050565b6002811061219b57600080fd5b50565b6000813590506121ad8161218e565b92915050565b6000806000606084860312156121cc576121cb611b17565b5b60006121da86828701611d38565b93505060206121eb86828701612179565b92505060406121fc8682870161219e565b9150509250925092565b61220f81611b93565b811461221a57600080fd5b50565b60008135905061222c81612206565b92915050565b6000806040838503121561224957612248611b17565b5b600061225785828601611b42565b92505060206122688582860161221d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b60006122ba82611bae565b6122c4818561229e565b93506122d4818560208601611bca565b6122dd81611bf4565b840191505092915050565b6122f181611c3e565b82525050565b61230081611c5d565b82525050565b600060e08301600083015161231e600086018261204d565b5060208301516123316020860182611ed1565b5060408301516123446040860182611ed1565b506060830151848203606086015261235c82826122af565b915050608083015161237160808601826122e8565b5060a083015161238460a08601826122e8565b5060c083015161239760c08601826122f7565b508091505092915050565b60006123ae8383612306565b905092915050565b6000602082019050919050565b60006123ce82612272565b6123d8818561227d565b9350836020820285016123ea8561228e565b8060005b85811015612426578484038952815161240785826123a2565b9450612412836123b6565b925060208a019950506001810190506123ee565b50829750879550505050505092915050565b6000602082019050818103600083015261245281846123c3565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61249c82611bf4565b810181811067ffffffffffffffff821117156124bb576124ba612464565b5b80604052505050565b60006124ce611b0d565b90506124da8282612493565b919050565b600067ffffffffffffffff8211156124fa576124f9612464565b5b61250382611bf4565b9050602081019050919050565b82818337600083830152505050565b600061253261252d846124df565b6124c4565b90508281526020810184848401111561254e5761254d61245f565b5b612559848285612510565b509392505050565b600082601f8301126125765761257561245a565b5b813561258684826020860161251f565b91505092915050565b6003811061259c57600080fd5b50565b6000813590506125ae8161258f565b92915050565b600080604083850312156125cb576125ca611b17565b5b600083013567ffffffffffffffff8111156125e9576125e8611b1c565b5b6125f585828601612561565b92505060206126068582860161259f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061265757607f821691505b60208210810361266a57612669612610565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126d982611b21565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361270b5761270a61269f565b5b600182019050919050565b600081905092915050565b7f41444d494e000000000000000000000000000000000000000000000000000000600082015250565b6000612757600583612716565b915061276282612721565b600582019050919050565b60006127788261274a565b9150819050919050565b7f5553455200000000000000000000000000000000000000000000000000000000600082015250565b60006127b8600483612716565b91506127c382612782565b600482019050919050565b60006127d9826127ab565b9150819050919050565b7f646f6e2774206861766520636f727265637420726f6c65000000000000000000600082015250565b6000612819601783611bb9565b9150612824826127e3565b602082019050919050565b600060208201905081810360008301526128488161280c565b9050919050565b7f616464726573732063616e277420626520300000000000000000000000000000600082015250565b6000612885601283611bb9565b91506128908261284f565b602082019050919050565b600060208201905081810360008301526128b481612878565b9050919050565b7f6e616d652063616e277420626520300000000000000000000000000000000000600082015250565b60006128f1600f83611bb9565b91506128fc826128bb565b602082019050919050565b60006020820190508181036000830152612920816128e4565b9050919050565b7f6d656d62657220616c7265616479206578697374730000000000000000000000600082015250565b600061295d601583611bb9565b915061296882612927565b602082019050919050565b6000602082019050818103600083015261298c81612950565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106129d3576129d2612993565b5b50565b60008190506129e4826129c2565b919050565b60006129f4826129d6565b9050919050565b612a04816129e9565b82525050565b6000604082019050612a1f6000830185611d93565b612a2c60208301846129fb565b9392505050565b7f70726f706f73616c206e6f742076616c69640000000000000000000000000000600082015250565b6000612a69601283611bb9565b9150612a7482612a33565b602082019050919050565b60006020820190508181036000830152612a9881612a5c565b9050919050565b7f70726f706f73616c206e6f742061637469766500000000000000000000000000600082015250565b6000612ad5601383611bb9565b9150612ae082612a9f565b602082019050919050565b60006020820190508181036000830152612b0481612ac8565b9050919050565b7f70726f706f73616c20656e646564000000000000000000000000000000000000600082015250565b6000612b41600e83611bb9565b9150612b4c82612b0b565b602082019050919050565b60006020820190508181036000830152612b7081612b34565b9050919050565b7f70726f706f73616c206861736e27742073746172746564000000000000000000600082015250565b6000612bad601783611bb9565b9150612bb882612b77565b602082019050919050565b60006020820190508181036000830152612bdc81612ba0565b9050919050565b6000612bee82611c5d565b9150637fffffff8203612c0457612c0361269f565b5b600182019050919050565b6000612c1a82611c5d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000008203612c4c57612c4b61269f565b5b600182039050919050565b6000604082019050612c6c6000830185611b9f565b612c796020830184611d7a565b9392505050565b6000612c8b82611b21565b9150612c9683611b21565b9250828201905080821115612cae57612cad61269f565b5b92915050565b7f6e6565642061746c656173742031302063686172616374657273000000000000600082015250565b6000612cea601a83611bb9565b9150612cf582612cb4565b602082019050919050565b60006020820190508181036000830152612d1981612cdd565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612d827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612d45565b612d8c8683612d45565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612dc9612dc4612dbf84611b21565b612da4565b611b21565b9050919050565b6000819050919050565b612de383612dae565b612df7612def82612dd0565b848454612d52565b825550505050565b600090565b612e0c612dff565b612e17818484612dda565b505050565b5b81811015612e3b57612e30600082612e04565b600181019050612e1d565b5050565b601f821115612e8057612e5181612d20565b612e5a84612d35565b81016020851015612e69578190505b612e7d612e7585612d35565b830182612e1c565b50505b505050565b600082821c905092915050565b6000612ea360001984600802612e85565b1980831691505092915050565b6000612ebc8383612e92565b9150826002028217905092915050565b612ed582611bae565b67ffffffffffffffff811115612eee57612eed612464565b5b612ef8825461263f565b612f03828285612e3f565b600060209050601f831160018114612f365760008415612f24578287015190505b612f2e8582612eb0565b865550612f96565b601f198416612f4486612d20565b60005b82811015612f6c57848901518255600182019150602085019450602081019050612f47565b86831015612f895784890151612f85601f891682612e92565b8355505b6001600288020188555050505b505050505050565b60038110612faf57612fae612993565b5b50565b6000819050612fc082612f9e565b919050565b6000612fd082612fb2565b9050919050565b612fe081612fc5565b82525050565b600060408201905081810360008301526130008185611c05565b905061300f6020830184612fd7565b939250505056fea2646970667358221220508b96ccb08bdcd869bd839a0c2d814bdba9a26d94018b1534ec91eceb98473a64736f6c63430008110033",
  "devdoc": {
    "author": "Bram Mathijssen",
    "kind": "dev",
    "methods": {},
    "title": "DAO",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "My DAO",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 93,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_proposalIds",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 96,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_memberIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 119,
        "contract": "contracts/DAO.sol:DAO",
        "label": "members",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Member)140_storage)"
      },
      {
        "astId": 124,
        "contract": "contracts/DAO.sol:DAO",
        "label": "proposals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Proposal)155_storage)"
      },
      {
        "astId": 127,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_membersList",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_struct(Member)140_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DAO.Member)",
        "numberOfBytes": "32",
        "value": "t_struct(Member)140_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Proposal)155_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAO.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)155_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/DAO.sol:DAO",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Member)140_storage": {
        "encoding": "inplace",
        "label": "struct DAO.Member",
        "members": [
          {
            "astId": 129,
            "contract": "contracts/DAO.sol:DAO",
            "label": "memberAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 131,
            "contract": "contracts/DAO.sol:DAO",
            "label": "valid",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 133,
            "contract": "contracts/DAO.sol:DAO",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 135,
            "contract": "contracts/DAO.sol:DAO",
            "label": "memberSince",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 139,
            "contract": "contracts/DAO.sol:DAO",
            "label": "role",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Proposal)155_storage": {
        "encoding": "inplace",
        "label": "struct DAO.Proposal",
        "members": [
          {
            "astId": 142,
            "contract": "contracts/DAO.sol:DAO",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 144,
            "contract": "contracts/DAO.sol:DAO",
            "label": "valid",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 146,
            "contract": "contracts/DAO.sol:DAO",
            "label": "active",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 148,
            "contract": "contracts/DAO.sol:DAO",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 150,
            "contract": "contracts/DAO.sol:DAO",
            "label": "startDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 152,
            "contract": "contracts/DAO.sol:DAO",
            "label": "endDate",
            "offset": 4,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 154,
            "contract": "contracts/DAO.sol:DAO",
            "label": "voteCount",
            "offset": 8,
            "slot": "3",
            "type": "t_int32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}