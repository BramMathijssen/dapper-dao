{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "memberAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum DAO.Role",
          "name": "role",
          "type": "uint8"
        }
      ],
      "name": "MemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum DAO.Duration",
          "name": "duration",
          "type": "uint8"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "upVote",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        },
        {
          "internalType": "enum DAO.Role",
          "name": "_role",
          "type": "uint8"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "enum DAO.Duration",
          "name": "_duration",
          "type": "uint8"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "valid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "startDate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "endDate",
              "type": "uint32"
            },
            {
              "internalType": "int32",
              "name": "voteCount",
              "type": "int32"
            }
          ],
          "internalType": "struct DAO.Proposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "getMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "memberSince",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "startDate",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endDate",
          "type": "uint32"
        },
        {
          "internalType": "int32",
          "name": "voteCount",
          "type": "int32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "upVote",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6cf44739bb98c7b2461c75d93fd54dbf4fb14e8b7248800ac277677c98894f33",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2315780",
    "logsBloom": "0x
    "blockHash": "0xa8f38014fab42082954e23246604d97e0ef8030bf7901777a09d5f0dbbb78665",
    "transactionHash": "0x6cf44739bb98c7b2461c75d93fd54dbf4fb14e8b7248800ac277677c98894f33",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2315780",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6272616d00000000000000000000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "e3838b0c4450daa3fd1c2e854ecb0d80",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum DAO.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum DAO.Duration\",\"name\":\"duration\",\"type\":\"uint8\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"upVote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"enum DAO.Role\",\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"enum DAO.Duration\",\"name\":\"_duration\",\"type\":\"uint8\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endDate\",\"type\":\"uint32\"},{\"internalType\":\"int32\",\"name\":\"voteCount\",\"type\":\"int32\"}],\"internalType\":\"struct DAO.Proposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"getMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"memberSince\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endDate\",\"type\":\"uint32\"},{\"internalType\":\"int32\",\"name\":\"voteCount\",\"type\":\"int32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"upVote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Bram Mathijssen\",\"kind\":\"dev\",\"methods\":{},\"title\":\"DAO\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"My DAO\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO.sol\":\"DAO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\nerror ParentContract__NotOwnerOfToken();\\r\\n\\r\\n/// @title DAO\\r\\n/// @author Bram Mathijssen\\r\\n/// @notice My DAO\\r\\ncontract DAO {\\r\\n    /* Type declarations */\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    enum Role {\\r\\n        USER,\\r\\n        ADMIN\\r\\n    }\\r\\n\\r\\n    enum Duration {\\r\\n        DAY,\\r\\n        WEEK,\\r\\n        MONTH\\r\\n    }\\r\\n\\r\\n    /* State Variables */\\r\\n    Counters.Counter private _proposalIds;\\r\\n    Counters.Counter private _memberIds;\\r\\n    address private immutable i_owner;\\r\\n    bytes32 private constant USER = keccak256(abi.encodePacked(\\\"USER\\\"));\\r\\n    bytes32 private constant ADMIN = keccak256(abi.encodePacked(\\\"ADMIN\\\"));\\r\\n\\r\\n    mapping(address => Member) public members;\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n\\r\\n    address[] private _membersList;\\r\\n\\r\\n    /* Structs */\\r\\n    struct Member {\\r\\n        // uint256 id;\\r\\n        bool valid; // checks if member has been initialised in mapping\\r\\n        bytes32 name;\\r\\n        uint256 memberSince;\\r\\n        mapping(bytes32 => bool) role; // mapping gives ability to hold multiple roles\\r\\n    }\\r\\n\\r\\n    struct Proposal {\\r\\n        uint256 id;\\r\\n        bool valid;\\r\\n        bool active;\\r\\n        string description;\\r\\n        uint32 startDate;\\r\\n        uint32 endDate;\\r\\n        int32 voteCount;\\r\\n    }\\r\\n\\r\\n    /* Events */\\r\\n    event MemberAdded(address indexed memberAddress, bytes32 name, Role role);\\r\\n    event ProposalCreated(\\r\\n        uint256 indexed proposalCount,\\r\\n        string description,\\r\\n        Duration duration\\r\\n    );\\r\\n    event Voted(\\r\\n        uint256 indexed proposalNumber,\\r\\n        bool upVote,\\r\\n        address voterAddress\\r\\n    );\\r\\n\\r\\n    /* Modifiers */\\r\\n    modifier hasRole(bytes32 _role) {\\r\\n        bool authorized;\\r\\n\\r\\n        if (_role == USER) {\\r\\n            members[msg.sender].role[ADMIN] || members[msg.sender].role[USER]\\r\\n                ? authorized = true\\r\\n                : authorized = false;\\r\\n        }\\r\\n        if (_role == ADMIN) {\\r\\n            members[msg.sender].role[ADMIN]\\r\\n                ? authorized = true\\r\\n                : authorized = false;\\r\\n        }\\r\\n\\r\\n        require(authorized == true, \\\"don't have correct role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* Constructor */\\r\\n    constructor(bytes32 _name) {\\r\\n        i_owner = msg.sender;\\r\\n\\r\\n        // load struct in storage before assigning values since we are using a mapping inside struct\\r\\n        Member storage member = members[msg.sender];\\r\\n        member.valid = true;\\r\\n        member.name = _name;\\r\\n        member.memberSince = block.timestamp;\\r\\n        member.role[ADMIN] = true;\\r\\n    }\\r\\n\\r\\n    /* Functions */\\r\\n\\r\\n    /* external Functions */\\r\\n    function addMember(\\r\\n        address _address,\\r\\n        bytes32 _name,\\r\\n        Role _role\\r\\n    ) external hasRole(ADMIN) {\\r\\n        require(_address != address(0), \\\"address can't be 0\\\");\\r\\n        require(_name != bytes32(0), \\\"name can't be 0\\\");\\r\\n        require(members[_address].valid == false, \\\"member already exists\\\");\\r\\n\\r\\n        Member storage member = members[_address];\\r\\n        member.valid = true;\\r\\n        member.name = _name;\\r\\n        member.memberSince = block.timestamp;\\r\\n        member.role[_getRole(_role)] = true;\\r\\n\\r\\n        _membersList.push(_address); \\r\\n\\r\\n        emit MemberAdded(_address, _name, _role);\\r\\n    }\\r\\n\\r\\n    // todo: remove member\\r\\n\\r\\n    function createProposal(\\r\\n        string memory _description,\\r\\n        Duration _duration\\r\\n    ) external hasRole(USER) {\\r\\n        require(bytes(_description).length > 10, \\\"need atleast 10 characters\\\");\\r\\n        _proposalIds.increment();\\r\\n        uint256 proposalId = _proposalIds.current();\\r\\n        proposals[proposalId] = Proposal({\\r\\n            id: proposalId,\\r\\n            valid: true,\\r\\n            description: _description,\\r\\n            startDate: uint32(block.timestamp),\\r\\n            endDate: uint32(_getTimestampByDuration(_duration)),\\r\\n            active: true,\\r\\n            voteCount: 0\\r\\n        });\\r\\n        emit ProposalCreated(proposalId, _description, _duration);\\r\\n    }\\r\\n\\r\\n    function vote(uint256 _proposalNumber, bool upVote) external hasRole(USER) {\\r\\n        Proposal storage proposal = proposals[_proposalNumber];\\r\\n        require(proposal.valid == true, \\\"proposal not valid\\\");\\r\\n        require(proposal.active == true, \\\"proposal not active\\\");\\r\\n        require(block.timestamp < proposal.endDate, \\\"proposal ended\\\");\\r\\n        require(\\r\\n            block.timestamp >= proposal.startDate,\\r\\n            \\\"proposal hasn't started\\\"\\r\\n        );\\r\\n        if (upVote) {\\r\\n            proposal.voteCount++;\\r\\n        } else {\\r\\n            proposals[_proposalNumber].voteCount--;\\r\\n        }\\r\\n        emit Voted(_proposalNumber, upVote, msg.sender);\\r\\n    }\\r\\n\\r\\n    function getAllProposals() external view returns (Proposal[] memory) {\\r\\n        uint256 proposalId = _proposalIds.current();\\r\\n\\r\\n        Proposal[] memory proposalsList = new Proposal[](proposalId);\\r\\n        for (uint256 i = 0; i < proposalId; i++) {\\r\\n            uint256 currentId = i + 1;\\r\\n            Proposal storage currentItem = proposals[currentId];\\r\\n            proposalsList[i] = currentItem;\\r\\n        }\\r\\n        return proposalsList;\\r\\n    }\\r\\n\\r\\n    function getMember(address _memberAddress) external view returns(bool, bytes32, uint256){ \\r\\n        \\r\\n    }\\r\\n\\r\\n    /* public Functions */\\r\\n    /* internal Functions */\\r\\n\\r\\n    /* private Functions */\\r\\n    function _getTimestampByDuration(\\r\\n        Duration _duration\\r\\n    ) private view returns (uint256) {\\r\\n        if (_duration == Duration.DAY) {\\r\\n            return block.timestamp + 1 days;\\r\\n        }\\r\\n        if (_duration == Duration.WEEK) {\\r\\n            return block.timestamp + 1 weeks;\\r\\n        }\\r\\n        if (_duration == Duration.MONTH) {\\r\\n            return block.timestamp + 4 weeks;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _grantRole(\\r\\n        address _memberAddress,\\r\\n        Role _role\\r\\n    ) private hasRole(ADMIN) {\\r\\n        Member storage member = members[_memberAddress];\\r\\n        member.role[_getRole(_role)] = true;\\r\\n    }\\r\\n\\r\\n    function _getRole(Role _role) private pure returns (bytes32) {\\r\\n        if (_role == Role.USER) {\\r\\n            return USER;\\r\\n        }\\r\\n        if (_role == Role.ADMIN) {\\r\\n            return ADMIN;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7e2fa7df8221cb75151b41d149fbdf2c5541d5b45b67a0b3d8c04d723e904eaa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200298638038062002986833981810160405281019062000037919062000179565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000160006101000a81548160ff0219169083151502179055508181600101819055504281600201819055506001816003016000604051602001620000f69062000206565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555050506200021d565b600080fd5b6000819050919050565b62000153816200013e565b81146200015f57600080fd5b50565b600081519050620001738162000148565b92915050565b60006020828403121562000192576200019162000139565b5b6000620001a28482850162000162565b91505092915050565b600081905092915050565b7f41444d494e000000000000000000000000000000000000000000000000000000600082015250565b6000620001ee600583620001ab565b9150620001fb82620001b6565b600582019050919050565b60006200021382620001df565b9150819050919050565b60805161275062000236600039600050506127506000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b6bd83961161005b578063b6bd83961461011c578063c9d27afe14610138578063cceb68f514610154578063d1c29a29146101725761007d565b8063013cf08b1461008257806308ae4b0c146100b85780632ada2596146100ea575b600080fd5b61009c600480360381019061009791906115c6565b61018e565b6040516100af97969594939291906116e8565b60405180910390f35b6100d260048036038101906100cd91906117bc565b61029f565b6040516100e193929190611802565b60405180910390f35b61010460048036038101906100ff91906117bc565b6102d6565b60405161011393929190611802565b60405180910390f35b6101366004803603810190610131919061188a565b6102e2565b005b610152600480360381019061014d9190611909565b610815565b005b61015c610d00565b6040516101699190611b2d565b60405180910390f35b61018c60048036038101906101879190611ca9565b610f1e565b005b60036020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060020180546101dd90611d34565b80601f016020809104026020016040519081016040528092919081815260200182805461020990611d34565b80156102565780601f1061022b57610100808354040283529160200191610256565b820191906000526020600020905b81548152906001019060200180831161023957829003601f168201915b5050505050908060030160009054906101000a900463ffffffff16908060030160049054906101000a900463ffffffff16908060030160089054906101000a900460030b905087565b60026020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154905083565b60008060009193909250565b6040516020016102f190611dbc565b60405160208183030381529060405280519060200120600060405160200161031890611e1d565b60405160208183030381529060405280519060200120820361045b57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161038790611dbc565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16806104455750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161041290611e1d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b610453576000905080610459565b60019050805b505b60405160200161046a90611dbc565b60405160208183030381529060405280519060200120820361052157600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016104d990611dbc565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1661051957600090508061051f565b60019050805b505b6001151581151514610568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055f90611e7e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036105d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90611eea565b60405180910390fd5b6000801b840361061c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061390611f56565b60405180910390fd5b60001515600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515146106b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a990611fc2565b60405180910390fd5b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000160006101000a81548160ff021916908315150217905550848160010181905550428160020181905550600181600301600061073587611380565b815260200190815260200160002060006101000a81548160ff0219169083151502179055506004869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff167fbe61d680988ec1460d4972efa07e74ca182afcee5ffacb887cf9ac6ed0e3d2568686604051610805929190612059565b60405180910390a2505050505050565b60405160200161082490611e1d565b60405160208183030381529060405280519060200120600060405160200161084b90611e1d565b60405160208183030381529060405280519060200120820361098e57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016108ba90611dbc565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16806109785750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161094590611e1d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b61098657600090508061098c565b60019050805b505b60405160200161099d90611dbc565b604051602081830303815290604052805190602001208203610a5457600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610a0c90611dbc565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16610a4c576000905080610a52565b60019050805b505b6001151581151514610a9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9290611e7e565b60405180910390fd5b6000600360008681526020019081526020016000209050600115158160010160009054906101000a900460ff16151514610b0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b01906120ce565b60405180910390fd5b600115158160010160019054906101000a900460ff16151514610b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b599061213a565b60405180910390fd5b8060030160049054906101000a900463ffffffff1663ffffffff164210610bbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb5906121a6565b60405180910390fd5b8060030160009054906101000a900463ffffffff1663ffffffff16421015610c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1290612212565b60405180910390fd5b8315610c695780600301600881819054906101000a900460030b80929190610c4290612261565b91906101000a81548163ffffffff021916908360030b63ffffffff16021790555050610cbf565b60036000868152602001908152602001600020600301600881819054906101000a900460030b80929190610c9c9061228d565b91906101000a81548163ffffffff021916908360030b63ffffffff160217905550505b847f86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae08533604051610cf19291906122e4565b60405180910390a25050505050565b60606000610d0e600061143c565b905060008167ffffffffffffffff811115610d2c57610d2b611b59565b5b604051908082528060200260200182016040528015610d6557816020015b610d5261152c565b815260200190600190039081610d4a5790505b50905060005b82811015610f15576000600182610d82919061230d565b90506000600360008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a900460ff16151515158152602001600282018054610df790611d34565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2390611d34565b8015610e705780601f10610e4557610100808354040283529160200191610e70565b820191906000526020600020905b815481529060010190602001808311610e5357829003601f168201915b505050505081526020016003820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016003820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016003820160089054906101000a900460030b60030b60030b81525050848481518110610ef557610ef4612341565b5b602002602001018190525050508080610f0d90612370565b915050610d6b565b50809250505090565b604051602001610f2d90611e1d565b604051602081830303815290604052805190602001206000604051602001610f5490611e1d565b60405160208183030381529060405280519060200120820361109757600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610fc390611dbc565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16806110815750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161104e90611e1d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b61108f576000905080611095565b60019050805b505b6040516020016110a690611dbc565b60405160208183030381529060405280519060200120820361115d57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161111590611dbc565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1661115557600090508061115b565b60019050805b505b60011515811515146111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90611e7e565b60405180910390fd5b600a8451116111e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111df90612404565b60405180910390fd5b6111f2600061144a565b60006111fe600061143c565b90506040518060e001604052808281526020016001151581526020016001151581526020018681526020014263ffffffff16815260200161123e86611460565b63ffffffff168152602001600060030b815250600360008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff02191690831515021790555060608201518160020190816112c391906125d0565b5060808201518160030160006101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160030160046101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160030160086101000a81548163ffffffff021916908360030b63ffffffff160217905550905050807fd54d24c2f5d3c070ed74aa4a4926cc273f4bdf17b66ce3d0a6493b11da160e2886866040516113719291906126ea565b60405180910390a25050505050565b600080600181111561139557611394611fe2565b5b8260018111156113a8576113a7611fe2565b5b036113d9576040516020016113bc90611e1d565b604051602081830303815290604052805190602001209050611437565b6001808111156113ec576113eb611fe2565b5b8260018111156113ff576113fe611fe2565b5b036114305760405160200161141390611dbc565b604051602081830303815290604052805190602001209050611437565b6000801b90505b919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600080600281111561147557611474611fe2565b5b82600281111561148857611487611fe2565b5b036114a357620151804261149c919061230d565b9050611527565b600160028111156114b7576114b6611fe2565b5b8260028111156114ca576114c9611fe2565b5b036114e55762093a80426114de919061230d565b9050611527565b6002808111156114f8576114f7611fe2565b5b82600281111561150b5761150a611fe2565b5b03611526576224ea004261151f919061230d565b9050611527565b5b919050565b6040518060e001604052806000815260200160001515815260200160001515815260200160608152602001600063ffffffff168152602001600063ffffffff168152602001600060030b81525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6115a381611590565b81146115ae57600080fd5b50565b6000813590506115c08161159a565b92915050565b6000602082840312156115dc576115db611586565b5b60006115ea848285016115b1565b91505092915050565b6115fc81611590565b82525050565b60008115159050919050565b61161781611602565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561165757808201518184015260208101905061163c565b60008484015250505050565b6000601f19601f8301169050919050565b600061167f8261161d565b6116898185611628565b9350611699818560208601611639565b6116a281611663565b840191505092915050565b600063ffffffff82169050919050565b6116c6816116ad565b82525050565b60008160030b9050919050565b6116e2816116cc565b82525050565b600060e0820190506116fd600083018a6115f3565b61170a602083018961160e565b611717604083018861160e565b81810360608301526117298187611674565b905061173860808301866116bd565b61174560a08301856116bd565b61175260c08301846116d9565b98975050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117898261175e565b9050919050565b6117998161177e565b81146117a457600080fd5b50565b6000813590506117b681611790565b92915050565b6000602082840312156117d2576117d1611586565b5b60006117e0848285016117a7565b91505092915050565b6000819050919050565b6117fc816117e9565b82525050565b6000606082019050611817600083018661160e565b61182460208301856117f3565b61183160408301846115f3565b949350505050565b611842816117e9565b811461184d57600080fd5b50565b60008135905061185f81611839565b92915050565b6002811061187257600080fd5b50565b60008135905061188481611865565b92915050565b6000806000606084860312156118a3576118a2611586565b5b60006118b1868287016117a7565b93505060206118c286828701611850565b92505060406118d386828701611875565b9150509250925092565b6118e681611602565b81146118f157600080fd5b50565b600081359050611903816118dd565b92915050565b600080604083850312156119205761191f611586565b5b600061192e858286016115b1565b925050602061193f858286016118f4565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61197e81611590565b82525050565b61198d81611602565b82525050565b600082825260208201905092915050565b60006119af8261161d565b6119b98185611993565b93506119c9818560208601611639565b6119d281611663565b840191505092915050565b6119e6816116ad565b82525050565b6119f5816116cc565b82525050565b600060e083016000830151611a136000860182611975565b506020830151611a266020860182611984565b506040830151611a396040860182611984565b5060608301518482036060860152611a5182826119a4565b9150506080830151611a6660808601826119dd565b5060a0830151611a7960a08601826119dd565b5060c0830151611a8c60c08601826119ec565b508091505092915050565b6000611aa383836119fb565b905092915050565b6000602082019050919050565b6000611ac382611949565b611acd8185611954565b935083602082028501611adf85611965565b8060005b85811015611b1b5784840389528151611afc8582611a97565b9450611b0783611aab565b925060208a01995050600181019050611ae3565b50829750879550505050505092915050565b60006020820190508181036000830152611b478184611ab8565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b9182611663565b810181811067ffffffffffffffff82111715611bb057611baf611b59565b5b80604052505050565b6000611bc361157c565b9050611bcf8282611b88565b919050565b600067ffffffffffffffff821115611bef57611bee611b59565b5b611bf882611663565b9050602081019050919050565b82818337600083830152505050565b6000611c27611c2284611bd4565b611bb9565b905082815260208101848484011115611c4357611c42611b54565b5b611c4e848285611c05565b509392505050565b600082601f830112611c6b57611c6a611b4f565b5b8135611c7b848260208601611c14565b91505092915050565b60038110611c9157600080fd5b50565b600081359050611ca381611c84565b92915050565b60008060408385031215611cc057611cbf611586565b5b600083013567ffffffffffffffff811115611cde57611cdd61158b565b5b611cea85828601611c56565b9250506020611cfb85828601611c94565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d4c57607f821691505b602082108103611d5f57611d5e611d05565b5b50919050565b600081905092915050565b7f41444d494e000000000000000000000000000000000000000000000000000000600082015250565b6000611da6600583611d65565b9150611db182611d70565b600582019050919050565b6000611dc782611d99565b9150819050919050565b7f5553455200000000000000000000000000000000000000000000000000000000600082015250565b6000611e07600483611d65565b9150611e1282611dd1565b600482019050919050565b6000611e2882611dfa565b9150819050919050565b7f646f6e2774206861766520636f727265637420726f6c65000000000000000000600082015250565b6000611e68601783611628565b9150611e7382611e32565b602082019050919050565b60006020820190508181036000830152611e9781611e5b565b9050919050565b7f616464726573732063616e277420626520300000000000000000000000000000600082015250565b6000611ed4601283611628565b9150611edf82611e9e565b602082019050919050565b60006020820190508181036000830152611f0381611ec7565b9050919050565b7f6e616d652063616e277420626520300000000000000000000000000000000000600082015250565b6000611f40600f83611628565b9150611f4b82611f0a565b602082019050919050565b60006020820190508181036000830152611f6f81611f33565b9050919050565b7f6d656d62657220616c7265616479206578697374730000000000000000000000600082015250565b6000611fac601583611628565b9150611fb782611f76565b602082019050919050565b60006020820190508181036000830152611fdb81611f9f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061202257612021611fe2565b5b50565b600081905061203382612011565b919050565b600061204382612025565b9050919050565b61205381612038565b82525050565b600060408201905061206e60008301856117f3565b61207b602083018461204a565b9392505050565b7f70726f706f73616c206e6f742076616c69640000000000000000000000000000600082015250565b60006120b8601283611628565b91506120c382612082565b602082019050919050565b600060208201905081810360008301526120e7816120ab565b9050919050565b7f70726f706f73616c206e6f742061637469766500000000000000000000000000600082015250565b6000612124601383611628565b915061212f826120ee565b602082019050919050565b6000602082019050818103600083015261215381612117565b9050919050565b7f70726f706f73616c20656e646564000000000000000000000000000000000000600082015250565b6000612190600e83611628565b915061219b8261215a565b602082019050919050565b600060208201905081810360008301526121bf81612183565b9050919050565b7f70726f706f73616c206861736e27742073746172746564000000000000000000600082015250565b60006121fc601783611628565b9150612207826121c6565b602082019050919050565b6000602082019050818103600083015261222b816121ef565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061226c826116cc565b9150637fffffff820361228257612281612232565b5b600182019050919050565b6000612298826116cc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000082036122ca576122c9612232565b5b600182039050919050565b6122de8161177e565b82525050565b60006040820190506122f9600083018561160e565b61230660208301846122d5565b9392505050565b600061231882611590565b915061232383611590565b925082820190508082111561233b5761233a612232565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061237b82611590565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036123ad576123ac612232565b5b600182019050919050565b7f6e6565642061746c656173742031302063686172616374657273000000000000600082015250565b60006123ee601a83611628565b91506123f9826123b8565b602082019050919050565b6000602082019050818103600083015261241d816123e1565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026124867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612449565b6124908683612449565b95508019841693508086168417925050509392505050565b6000819050919050565b60006124cd6124c86124c384611590565b6124a8565b611590565b9050919050565b6000819050919050565b6124e7836124b2565b6124fb6124f3826124d4565b848454612456565b825550505050565b600090565b612510612503565b61251b8184846124de565b505050565b5b8181101561253f57612534600082612508565b600181019050612521565b5050565b601f8211156125845761255581612424565b61255e84612439565b8101602085101561256d578190505b61258161257985612439565b830182612520565b50505b505050565b600082821c905092915050565b60006125a760001984600802612589565b1980831691505092915050565b60006125c08383612596565b9150826002028217905092915050565b6125d98261161d565b67ffffffffffffffff8111156125f2576125f1611b59565b5b6125fc8254611d34565b612607828285612543565b600060209050601f83116001811461263a5760008415612628578287015190505b61263285826125b4565b86555061269a565b601f19841661264886612424565b60005b828110156126705784890151825560018201915060208501945060208101905061264b565b8683101561268d5784890151612689601f891682612596565b8355505b6001600288020188555050505b505050505050565b600381106126b3576126b2611fe2565b5b50565b60008190506126c4826126a2565b919050565b60006126d4826126b6565b9050919050565b6126e4816126c9565b82525050565b600060408201905081810360008301526127048185611674565b905061271360208301846126db565b939250505056fea2646970667358221220d13be508490c584d9d5260df349f65acef779594599910e93dd7fb5e0062a30064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063b6bd83961161005b578063b6bd83961461011c578063c9d27afe14610138578063cceb68f514610154578063d1c29a29146101725761007d565b8063013cf08b1461008257806308ae4b0c146100b85780632ada2596146100ea575b600080fd5b61009c600480360381019061009791906115c6565b61018e565b6040516100af97969594939291906116e8565b60405180910390f35b6100d260048036038101906100cd91906117bc565b61029f565b6040516100e193929190611802565b60405180910390f35b61010460048036038101906100ff91906117bc565b6102d6565b60405161011393929190611802565b60405180910390f35b6101366004803603810190610131919061188a565b6102e2565b005b610152600480360381019061014d9190611909565b610815565b005b61015c610d00565b6040516101699190611b2d565b60405180910390f35b61018c60048036038101906101879190611ca9565b610f1e565b005b60036020528060005260406000206000915090508060000154908060010160009054906101000a900460ff16908060010160019054906101000a900460ff16908060020180546101dd90611d34565b80601f016020809104026020016040519081016040528092919081815260200182805461020990611d34565b80156102565780601f1061022b57610100808354040283529160200191610256565b820191906000526020600020905b81548152906001019060200180831161023957829003601f168201915b5050505050908060030160009054906101000a900463ffffffff16908060030160049054906101000a900463ffffffff16908060030160089054906101000a900460030b905087565b60026020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154905083565b60008060009193909250565b6040516020016102f190611dbc565b60405160208183030381529060405280519060200120600060405160200161031890611e1d565b60405160208183030381529060405280519060200120820361045b57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161038790611dbc565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16806104455750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161041290611e1d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b610453576000905080610459565b60019050805b505b60405160200161046a90611dbc565b60405160208183030381529060405280519060200120820361052157600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016104d990611dbc565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1661051957600090508061051f565b60019050805b505b6001151581151514610568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055f90611e7e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036105d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ce90611eea565b60405180910390fd5b6000801b840361061c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061390611f56565b60405180910390fd5b60001515600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff161515146106b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a990611fc2565b60405180910390fd5b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000160006101000a81548160ff021916908315150217905550848160010181905550428160020181905550600181600301600061073587611380565b815260200190815260200160002060006101000a81548160ff0219169083151502179055506004869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff167fbe61d680988ec1460d4972efa07e74ca182afcee5ffacb887cf9ac6ed0e3d2568686604051610805929190612059565b60405180910390a2505050505050565b60405160200161082490611e1d565b60405160208183030381529060405280519060200120600060405160200161084b90611e1d565b60405160208183030381529060405280519060200120820361098e57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016108ba90611dbc565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16806109785750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161094590611e1d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b61098657600090508061098c565b60019050805b505b60405160200161099d90611dbc565b604051602081830303815290604052805190602001208203610a5457600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610a0c90611dbc565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16610a4c576000905080610a52565b60019050805b505b6001151581151514610a9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9290611e7e565b60405180910390fd5b6000600360008681526020019081526020016000209050600115158160010160009054906101000a900460ff16151514610b0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b01906120ce565b60405180910390fd5b600115158160010160019054906101000a900460ff16151514610b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b599061213a565b60405180910390fd5b8060030160049054906101000a900463ffffffff1663ffffffff164210610bbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb5906121a6565b60405180910390fd5b8060030160009054906101000a900463ffffffff1663ffffffff16421015610c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1290612212565b60405180910390fd5b8315610c695780600301600881819054906101000a900460030b80929190610c4290612261565b91906101000a81548163ffffffff021916908360030b63ffffffff16021790555050610cbf565b60036000868152602001908152602001600020600301600881819054906101000a900460030b80929190610c9c9061228d565b91906101000a81548163ffffffff021916908360030b63ffffffff160217905550505b847f86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae08533604051610cf19291906122e4565b60405180910390a25050505050565b60606000610d0e600061143c565b905060008167ffffffffffffffff811115610d2c57610d2b611b59565b5b604051908082528060200260200182016040528015610d6557816020015b610d5261152c565b815260200190600190039081610d4a5790505b50905060005b82811015610f15576000600182610d82919061230d565b90506000600360008381526020019081526020016000209050806040518060e0016040529081600082015481526020016001820160009054906101000a900460ff161515151581526020016001820160019054906101000a900460ff16151515158152602001600282018054610df790611d34565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2390611d34565b8015610e705780601f10610e4557610100808354040283529160200191610e70565b820191906000526020600020905b815481529060010190602001808311610e5357829003601f168201915b505050505081526020016003820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016003820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016003820160089054906101000a900460030b60030b60030b81525050848481518110610ef557610ef4612341565b5b602002602001018190525050508080610f0d90612370565b915050610d6b565b50809250505090565b604051602001610f2d90611e1d565b604051602081830303815290604052805190602001206000604051602001610f5490611e1d565b60405160208183030381529060405280519060200120820361109757600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610fc390611dbc565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16806110815750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161104e90611e1d565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b61108f576000905080611095565b60019050805b505b6040516020016110a690611dbc565b60405160208183030381529060405280519060200120820361115d57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161111590611dbc565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1661115557600090508061115b565b60019050805b505b60011515811515146111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90611e7e565b60405180910390fd5b600a8451116111e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111df90612404565b60405180910390fd5b6111f2600061144a565b60006111fe600061143c565b90506040518060e001604052808281526020016001151581526020016001151581526020018681526020014263ffffffff16815260200161123e86611460565b63ffffffff168152602001600060030b815250600360008381526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff02191690831515021790555060408201518160010160016101000a81548160ff02191690831515021790555060608201518160020190816112c391906125d0565b5060808201518160030160006101000a81548163ffffffff021916908363ffffffff16021790555060a08201518160030160046101000a81548163ffffffff021916908363ffffffff16021790555060c08201518160030160086101000a81548163ffffffff021916908360030b63ffffffff160217905550905050807fd54d24c2f5d3c070ed74aa4a4926cc273f4bdf17b66ce3d0a6493b11da160e2886866040516113719291906126ea565b60405180910390a25050505050565b600080600181111561139557611394611fe2565b5b8260018111156113a8576113a7611fe2565b5b036113d9576040516020016113bc90611e1d565b604051602081830303815290604052805190602001209050611437565b6001808111156113ec576113eb611fe2565b5b8260018111156113ff576113fe611fe2565b5b036114305760405160200161141390611dbc565b604051602081830303815290604052805190602001209050611437565b6000801b90505b919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600080600281111561147557611474611fe2565b5b82600281111561148857611487611fe2565b5b036114a357620151804261149c919061230d565b9050611527565b600160028111156114b7576114b6611fe2565b5b8260028111156114ca576114c9611fe2565b5b036114e55762093a80426114de919061230d565b9050611527565b6002808111156114f8576114f7611fe2565b5b82600281111561150b5761150a611fe2565b5b03611526576224ea004261151f919061230d565b9050611527565b5b919050565b6040518060e001604052806000815260200160001515815260200160001515815260200160608152602001600063ffffffff168152602001600063ffffffff168152602001600060030b81525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6115a381611590565b81146115ae57600080fd5b50565b6000813590506115c08161159a565b92915050565b6000602082840312156115dc576115db611586565b5b60006115ea848285016115b1565b91505092915050565b6115fc81611590565b82525050565b60008115159050919050565b61161781611602565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561165757808201518184015260208101905061163c565b60008484015250505050565b6000601f19601f8301169050919050565b600061167f8261161d565b6116898185611628565b9350611699818560208601611639565b6116a281611663565b840191505092915050565b600063ffffffff82169050919050565b6116c6816116ad565b82525050565b60008160030b9050919050565b6116e2816116cc565b82525050565b600060e0820190506116fd600083018a6115f3565b61170a602083018961160e565b611717604083018861160e565b81810360608301526117298187611674565b905061173860808301866116bd565b61174560a08301856116bd565b61175260c08301846116d9565b98975050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006117898261175e565b9050919050565b6117998161177e565b81146117a457600080fd5b50565b6000813590506117b681611790565b92915050565b6000602082840312156117d2576117d1611586565b5b60006117e0848285016117a7565b91505092915050565b6000819050919050565b6117fc816117e9565b82525050565b6000606082019050611817600083018661160e565b61182460208301856117f3565b61183160408301846115f3565b949350505050565b611842816117e9565b811461184d57600080fd5b50565b60008135905061185f81611839565b92915050565b6002811061187257600080fd5b50565b60008135905061188481611865565b92915050565b6000806000606084860312156118a3576118a2611586565b5b60006118b1868287016117a7565b93505060206118c286828701611850565b92505060406118d386828701611875565b9150509250925092565b6118e681611602565b81146118f157600080fd5b50565b600081359050611903816118dd565b92915050565b600080604083850312156119205761191f611586565b5b600061192e858286016115b1565b925050602061193f858286016118f4565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61197e81611590565b82525050565b61198d81611602565b82525050565b600082825260208201905092915050565b60006119af8261161d565b6119b98185611993565b93506119c9818560208601611639565b6119d281611663565b840191505092915050565b6119e6816116ad565b82525050565b6119f5816116cc565b82525050565b600060e083016000830151611a136000860182611975565b506020830151611a266020860182611984565b506040830151611a396040860182611984565b5060608301518482036060860152611a5182826119a4565b9150506080830151611a6660808601826119dd565b5060a0830151611a7960a08601826119dd565b5060c0830151611a8c60c08601826119ec565b508091505092915050565b6000611aa383836119fb565b905092915050565b6000602082019050919050565b6000611ac382611949565b611acd8185611954565b935083602082028501611adf85611965565b8060005b85811015611b1b5784840389528151611afc8582611a97565b9450611b0783611aab565b925060208a01995050600181019050611ae3565b50829750879550505050505092915050565b60006020820190508181036000830152611b478184611ab8565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611b9182611663565b810181811067ffffffffffffffff82111715611bb057611baf611b59565b5b80604052505050565b6000611bc361157c565b9050611bcf8282611b88565b919050565b600067ffffffffffffffff821115611bef57611bee611b59565b5b611bf882611663565b9050602081019050919050565b82818337600083830152505050565b6000611c27611c2284611bd4565b611bb9565b905082815260208101848484011115611c4357611c42611b54565b5b611c4e848285611c05565b509392505050565b600082601f830112611c6b57611c6a611b4f565b5b8135611c7b848260208601611c14565b91505092915050565b60038110611c9157600080fd5b50565b600081359050611ca381611c84565b92915050565b60008060408385031215611cc057611cbf611586565b5b600083013567ffffffffffffffff811115611cde57611cdd61158b565b5b611cea85828601611c56565b9250506020611cfb85828601611c94565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d4c57607f821691505b602082108103611d5f57611d5e611d05565b5b50919050565b600081905092915050565b7f41444d494e000000000000000000000000000000000000000000000000000000600082015250565b6000611da6600583611d65565b9150611db182611d70565b600582019050919050565b6000611dc782611d99565b9150819050919050565b7f5553455200000000000000000000000000000000000000000000000000000000600082015250565b6000611e07600483611d65565b9150611e1282611dd1565b600482019050919050565b6000611e2882611dfa565b9150819050919050565b7f646f6e2774206861766520636f727265637420726f6c65000000000000000000600082015250565b6000611e68601783611628565b9150611e7382611e32565b602082019050919050565b60006020820190508181036000830152611e9781611e5b565b9050919050565b7f616464726573732063616e277420626520300000000000000000000000000000600082015250565b6000611ed4601283611628565b9150611edf82611e9e565b602082019050919050565b60006020820190508181036000830152611f0381611ec7565b9050919050565b7f6e616d652063616e277420626520300000000000000000000000000000000000600082015250565b6000611f40600f83611628565b9150611f4b82611f0a565b602082019050919050565b60006020820190508181036000830152611f6f81611f33565b9050919050565b7f6d656d62657220616c7265616479206578697374730000000000000000000000600082015250565b6000611fac601583611628565b9150611fb782611f76565b602082019050919050565b60006020820190508181036000830152611fdb81611f9f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061202257612021611fe2565b5b50565b600081905061203382612011565b919050565b600061204382612025565b9050919050565b61205381612038565b82525050565b600060408201905061206e60008301856117f3565b61207b602083018461204a565b9392505050565b7f70726f706f73616c206e6f742076616c69640000000000000000000000000000600082015250565b60006120b8601283611628565b91506120c382612082565b602082019050919050565b600060208201905081810360008301526120e7816120ab565b9050919050565b7f70726f706f73616c206e6f742061637469766500000000000000000000000000600082015250565b6000612124601383611628565b915061212f826120ee565b602082019050919050565b6000602082019050818103600083015261215381612117565b9050919050565b7f70726f706f73616c20656e646564000000000000000000000000000000000000600082015250565b6000612190600e83611628565b915061219b8261215a565b602082019050919050565b600060208201905081810360008301526121bf81612183565b9050919050565b7f70726f706f73616c206861736e27742073746172746564000000000000000000600082015250565b60006121fc601783611628565b9150612207826121c6565b602082019050919050565b6000602082019050818103600083015261222b816121ef565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061226c826116cc565b9150637fffffff820361228257612281612232565b5b600182019050919050565b6000612298826116cc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000000082036122ca576122c9612232565b5b600182039050919050565b6122de8161177e565b82525050565b60006040820190506122f9600083018561160e565b61230660208301846122d5565b9392505050565b600061231882611590565b915061232383611590565b925082820190508082111561233b5761233a612232565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061237b82611590565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036123ad576123ac612232565b5b600182019050919050565b7f6e6565642061746c656173742031302063686172616374657273000000000000600082015250565b60006123ee601a83611628565b91506123f9826123b8565b602082019050919050565b6000602082019050818103600083015261241d816123e1565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026124867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612449565b6124908683612449565b95508019841693508086168417925050509392505050565b6000819050919050565b60006124cd6124c86124c384611590565b6124a8565b611590565b9050919050565b6000819050919050565b6124e7836124b2565b6124fb6124f3826124d4565b848454612456565b825550505050565b600090565b612510612503565b61251b8184846124de565b505050565b5b8181101561253f57612534600082612508565b600181019050612521565b5050565b601f8211156125845761255581612424565b61255e84612439565b8101602085101561256d578190505b61258161257985612439565b830182612520565b50505b505050565b600082821c905092915050565b60006125a760001984600802612589565b1980831691505092915050565b60006125c08383612596565b9150826002028217905092915050565b6125d98261161d565b67ffffffffffffffff8111156125f2576125f1611b59565b5b6125fc8254611d34565b612607828285612543565b600060209050601f83116001811461263a5760008415612628578287015190505b61263285826125b4565b86555061269a565b601f19841661264886612424565b60005b828110156126705784890151825560018201915060208501945060208101905061264b565b8683101561268d5784890151612689601f891682612596565b8355505b6001600288020188555050505b505050505050565b600381106126b3576126b2611fe2565b5b50565b60008190506126c4826126a2565b919050565b60006126d4826126b6565b9050919050565b6126e4816126c9565b82525050565b600060408201905081810360008301526127048185611674565b905061271360208301846126db565b939250505056fea2646970667358221220d13be508490c584d9d5260df349f65acef779594599910e93dd7fb5e0062a30064736f6c63430008110033",
  "devdoc": {
    "author": "Bram Mathijssen",
    "kind": "dev",
    "methods": {},
    "title": "DAO",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "My DAO",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 93,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_proposalIds",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 96,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_memberIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 119,
        "contract": "contracts/DAO.sol:DAO",
        "label": "members",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Member)138_storage)"
      },
      {
        "astId": 124,
        "contract": "contracts/DAO.sol:DAO",
        "label": "proposals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Proposal)153_storage)"
      },
      {
        "astId": 127,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_membersList",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_struct(Member)138_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DAO.Member)",
        "numberOfBytes": "32",
        "value": "t_struct(Member)138_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Proposal)153_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAO.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)153_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/DAO.sol:DAO",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Member)138_storage": {
        "encoding": "inplace",
        "label": "struct DAO.Member",
        "members": [
          {
            "astId": 129,
            "contract": "contracts/DAO.sol:DAO",
            "label": "valid",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 131,
            "contract": "contracts/DAO.sol:DAO",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 133,
            "contract": "contracts/DAO.sol:DAO",
            "label": "memberSince",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 137,
            "contract": "contracts/DAO.sol:DAO",
            "label": "role",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Proposal)153_storage": {
        "encoding": "inplace",
        "label": "struct DAO.Proposal",
        "members": [
          {
            "astId": 140,
            "contract": "contracts/DAO.sol:DAO",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 142,
            "contract": "contracts/DAO.sol:DAO",
            "label": "valid",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 144,
            "contract": "contracts/DAO.sol:DAO",
            "label": "active",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 146,
            "contract": "contracts/DAO.sol:DAO",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 148,
            "contract": "contracts/DAO.sol:DAO",
            "label": "startDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 150,
            "contract": "contracts/DAO.sol:DAO",
            "label": "endDate",
            "offset": 4,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 152,
            "contract": "contracts/DAO.sol:DAO",
            "label": "voteCount",
            "offset": 8,
            "slot": "3",
            "type": "t_int32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}