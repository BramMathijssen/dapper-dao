{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "memberAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum DAO.Role",
          "name": "role",
          "type": "uint8"
        }
      ],
      "name": "MemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum DAO.Duration",
          "name": "duration",
          "type": "uint8"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "upVote",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        },
        {
          "internalType": "enum DAO.Role",
          "name": "_role",
          "type": "uint8"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "enum DAO.Duration",
          "name": "_duration",
          "type": "uint8"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "valid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "startDate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "endDate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "upVotes",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "downVotes",
              "type": "uint32"
            },
            {
              "internalType": "int32",
              "name": "voteCount",
              "type": "int32"
            },
            {
              "internalType": "address[]",
              "name": "voters",
              "type": "address[]"
            }
          ],
          "internalType": "struct DAO.Proposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "getMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembersList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "address",
          "name": "memberAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "memberSince",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "startDate",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endDate",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "upVotes",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "downVotes",
          "type": "uint32"
        },
        {
          "internalType": "int32",
          "name": "voteCount",
          "type": "int32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_vote",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x20901e14ae7dd626fc71f526eec212cb423ee9019927f040ff312b24ce4eab6e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3429491",
    "logsBloom": "0x
    "blockHash": "0x49ebe9f9c5707637ab37aab46bd60a10de911cbd77def456e0e5c153a85c97df",
    "transactionHash": "0x20901e14ae7dd626fc71f526eec212cb423ee9019927f040ff312b24ce4eab6e",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "3429491",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6272616d00000000000000000000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "a83ba6fbd632afa2b37c699cb3773a0b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum DAO.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum DAO.Duration\",\"name\":\"duration\",\"type\":\"uint8\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"upVote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"enum DAO.Role\",\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"enum DAO.Duration\",\"name\":\"_duration\",\"type\":\"uint8\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"upVotes\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"downVotes\",\"type\":\"uint32\"},{\"internalType\":\"int32\",\"name\":\"voteCount\",\"type\":\"int32\"},{\"internalType\":\"address[]\",\"name\":\"voters\",\"type\":\"address[]\"}],\"internalType\":\"struct DAO.Proposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"getMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"memberSince\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"upVotes\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"downVotes\",\"type\":\"uint32\"},{\"internalType\":\"int32\",\"name\":\"voteCount\",\"type\":\"int32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_vote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Bram Mathijssen\",\"kind\":\"dev\",\"methods\":{},\"title\":\"DAO\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"My DAO\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO.sol\":\"DAO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\nerror ParentContract__NotOwnerOfToken();\\r\\n\\r\\n/// @title DAO\\r\\n/// @author Bram Mathijssen\\r\\n/// @notice My DAO\\r\\ncontract DAO {\\r\\n    /* Type declarations */\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    enum Role {\\r\\n        USER,\\r\\n        ADMIN\\r\\n    }\\r\\n\\r\\n    enum Duration {\\r\\n        DAY,\\r\\n        WEEK,\\r\\n        MONTH\\r\\n    }\\r\\n\\r\\n    /* State Variables */\\r\\n    Counters.Counter private _proposalIds;\\r\\n    Counters.Counter private _memberIds;\\r\\n    address private immutable i_owner;\\r\\n    bytes32 private constant USER = keccak256(abi.encodePacked(\\\"USER\\\"));\\r\\n    bytes32 private constant ADMIN = keccak256(abi.encodePacked(\\\"ADMIN\\\"));\\r\\n\\r\\n    mapping(address => Member) public members;\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n\\r\\n    address[] private _membersList;\\r\\n\\r\\n    /* Structs */\\r\\n    struct Member {\\r\\n        // uint256 id;\\r\\n        address memberAddress;\\r\\n        bool valid; // checks if member has been initialised in mapping\\r\\n        bytes32 name;\\r\\n        uint256 memberSince;\\r\\n        mapping(bytes32 => bool) role; // mapping gives ability to hold multiple roles\\r\\n    }\\r\\n\\r\\n    struct Proposal {\\r\\n        uint256 id;\\r\\n        string title;\\r\\n        address creator;\\r\\n        bool valid;\\r\\n        bool active;\\r\\n        string description;\\r\\n        uint32 startDate;\\r\\n        uint32 endDate;\\r\\n        uint32 upVotes;\\r\\n        uint32 downVotes;\\r\\n        int32 voteCount;\\r\\n        address[] voters;\\r\\n    }\\r\\n\\r\\n    /* Events */\\r\\n    event MemberAdded(address indexed memberAddress, bytes32 name, Role role);\\r\\n    event ProposalCreated(\\r\\n        uint256 indexed proposalCount,\\r\\n        string description,\\r\\n        Duration duration\\r\\n    );\\r\\n    event Voted(\\r\\n        uint256 indexed proposalNumber,\\r\\n        bool upVote,\\r\\n        address voterAddress\\r\\n    );\\r\\n\\r\\n    /* Modifiers */\\r\\n    modifier hasRole(bytes32 _role) {\\r\\n        bool authorized;\\r\\n\\r\\n        if (_role == USER) {\\r\\n            members[msg.sender].role[ADMIN] || members[msg.sender].role[USER]\\r\\n                ? authorized = true\\r\\n                : authorized = false;\\r\\n        }\\r\\n        if (_role == ADMIN) {\\r\\n            members[msg.sender].role[ADMIN]\\r\\n                ? authorized = true\\r\\n                : authorized = false;\\r\\n        }\\r\\n\\r\\n        require(authorized == true, \\\"don't have correct role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* Constructor */\\r\\n    constructor(bytes32 _name) {\\r\\n        i_owner = msg.sender;\\r\\n\\r\\n        // load struct in storage before assigning values since we are using a mapping inside struct\\r\\n        Member storage member = members[msg.sender];\\r\\n        member.valid = true;\\r\\n        member.name = _name;\\r\\n        member.memberSince = block.timestamp;\\r\\n        member.role[ADMIN] = true;\\r\\n    }\\r\\n\\r\\n    /* Functions */\\r\\n\\r\\n    /* external Functions */\\r\\n    function addMember(\\r\\n        address _address,\\r\\n        bytes32 _name,\\r\\n        Role _role\\r\\n    ) external hasRole(ADMIN) {\\r\\n        require(_address != address(0), \\\"address can't be 0\\\");\\r\\n        require(_name != bytes32(0), \\\"name can't be 0\\\");\\r\\n        require(members[_address].valid == false, \\\"member already exists\\\");\\r\\n\\r\\n        Member storage member = members[_address];\\r\\n        member.memberAddress = _address;\\r\\n        member.valid = true;\\r\\n        member.name = _name;\\r\\n        member.memberSince = block.timestamp;\\r\\n        member.role[_getRole(_role)] = true;\\r\\n\\r\\n        _membersList.push(_address);\\r\\n\\r\\n        emit MemberAdded(_address, _name, _role);\\r\\n    }\\r\\n\\r\\n    // todo: remove member\\r\\n\\r\\n    function createProposal(\\r\\n        string memory _description,\\r\\n        string memory _title,\\r\\n        Duration _duration\\r\\n    ) external hasRole(USER) {\\r\\n        require(bytes(_description).length > 10, \\\"need atleast 10 characters\\\");\\r\\n        _proposalIds.increment();\\r\\n        uint256 proposalId = _proposalIds.current();\\r\\n        proposals[proposalId] = Proposal({\\r\\n            id: proposalId,\\r\\n            title: _title,\\r\\n            creator: msg.sender,\\r\\n            valid: true,\\r\\n            description: _description,\\r\\n            startDate: uint32(block.timestamp),\\r\\n            endDate: uint32(_getTimestampByDuration(_duration)),\\r\\n            active: true,\\r\\n            voteCount: 0,\\r\\n            upVotes: 0,\\r\\n            downVotes: 0,\\r\\n            voters: new address[](0)\\r\\n        });\\r\\n        emit ProposalCreated(proposalId, _description, _duration);\\r\\n    }\\r\\n\\r\\n    // function vote(uint256 _proposalNumber, bool upVote) external hasRole(USER) {\\r\\n    //     Proposal storage proposal = proposals[_proposalNumber];\\r\\n    //     require(proposal.valid == true, \\\"proposal not valid\\\");\\r\\n    //     require(proposal.active == true, \\\"proposal not active\\\");\\r\\n    //     require(block.timestamp < proposal.endDate, \\\"proposal ended\\\");\\r\\n    //     require(\\r\\n    //         block.timestamp >= proposal.startDate,\\r\\n    //         \\\"proposal hasn't started\\\"\\r\\n    //     );\\r\\n    //     if (upVote) {\\r\\n    //         proposal.voteCount++;\\r\\n    //     } else {\\r\\n    //         proposals[_proposalNumber].voteCount--;\\r\\n    //     }\\r\\n    //     emit Voted(_proposalNumber, upVote, msg.sender);\\r\\n    // }\\r\\n\\r\\n    function vote(uint256 _proposalNumber, bool _vote) external hasRole(USER) {\\r\\n        Proposal storage proposal = proposals[_proposalNumber];\\r\\n        require(proposal.valid == true, \\\"proposal not valid\\\");\\r\\n        require(proposal.active == true, \\\"proposal not active\\\");\\r\\n        require(block.timestamp < proposal.endDate, \\\"proposal ended\\\");\\r\\n        require(\\r\\n            block.timestamp >= proposal.startDate,\\r\\n            \\\"proposal hasn't started\\\"\\r\\n        );\\r\\n        require(_checkVoted(_proposalNumber, msg.sender) == false, \\\"already voted\\\");\\r\\n        if (_vote) {\\r\\n            proposal.upVotes++;\\r\\n        } else {\\r\\n            proposal.downVotes++;\\r\\n        }\\r\\n        proposal.voters.push(msg.sender);\\r\\n        proposal.voteCount++;\\r\\n        emit Voted(_proposalNumber, _vote, msg.sender);\\r\\n    }\\r\\n\\r\\n    function getAllProposals() external view returns (Proposal[] memory) {\\r\\n        uint256 proposalId = _proposalIds.current();\\r\\n\\r\\n        Proposal[] memory proposalsList = new Proposal[](proposalId);\\r\\n        for (uint256 i = 0; i < proposalId; i++) {\\r\\n            uint256 currentId = i + 1;\\r\\n            Proposal storage currentItem = proposals[currentId];\\r\\n            proposalsList[i] = currentItem;\\r\\n        }\\r\\n        return proposalsList;\\r\\n    }\\r\\n\\r\\n    function getMembersList() external view returns (address[] memory) {\\r\\n        return _membersList;\\r\\n    }\\r\\n\\r\\n    // getting members from member struct with individual properties\\r\\n    function getMembers()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address[] memory,\\r\\n            bool[] memory,\\r\\n            bytes32[] memory,\\r\\n            uint256[] memory\\r\\n        )\\r\\n    {\\r\\n        address[] memory addresses = new address[](_membersList.length);\\r\\n        bool[] memory valid = new bool[](_membersList.length);\\r\\n        bytes32[] memory names = new bytes32[](_membersList.length);\\r\\n        uint256[] memory memberSince = new uint256[](_membersList.length);\\r\\n\\r\\n        for (uint256 i = 0; i < _membersList.length; i++) {\\r\\n            address tempAddress = _membersList[i];\\r\\n            addresses[i] = members[tempAddress].memberAddress;\\r\\n            valid[i] = members[tempAddress].valid;\\r\\n            names[i] = members[tempAddress].name;\\r\\n            memberSince[i] = members[tempAddress].memberSince;\\r\\n        }\\r\\n        return (addresses, valid, names, memberSince);\\r\\n    }\\r\\n\\r\\n    // doesnt work\\r\\n    // function getMembersMapping() external returns (Member[] memory) {\\r\\n\\r\\n    // }\\r\\n\\r\\n    // gets a individual member\\r\\n    function getMember(\\r\\n        address _memberAddress\\r\\n    ) external view returns (address, bool, bytes32, uint256) {\\r\\n        Member storage member = members[_memberAddress];\\r\\n        return (\\r\\n            member.memberAddress,\\r\\n            member.valid,\\r\\n            member.name,\\r\\n            member.memberSince\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* public Functions */\\r\\n    /* internal Functions */\\r\\n\\r\\n    /* private Functions */\\r\\n    function _getTimestampByDuration(\\r\\n        Duration _duration\\r\\n    ) private view returns (uint256) {\\r\\n        if (_duration == Duration.DAY) {\\r\\n            return block.timestamp + 1 days;\\r\\n        }\\r\\n        if (_duration == Duration.WEEK) {\\r\\n            return block.timestamp + 1 weeks;\\r\\n        }\\r\\n        if (_duration == Duration.MONTH) {\\r\\n            return block.timestamp + 4 weeks;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _grantRole(\\r\\n        address _memberAddress,\\r\\n        Role _role\\r\\n    ) private hasRole(ADMIN) {\\r\\n        Member storage member = members[_memberAddress];\\r\\n        member.role[_getRole(_role)] = true;\\r\\n    }\\r\\n\\r\\n    function _getRole(Role _role) private pure returns (bytes32) {\\r\\n        if (_role == Role.USER) {\\r\\n            return USER;\\r\\n        }\\r\\n        if (_role == Role.ADMIN) {\\r\\n            return ADMIN;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function _checkVoted(\\r\\n        uint _proposalNumber,\\r\\n        address _voterAddress\\r\\n    ) internal view returns (bool) {\\r\\n        Proposal memory proposal = proposals[_proposalNumber];\\r\\n        address[] memory voters = proposal.voters;\\r\\n        for (uint256 i = 0; i < voters.length; i++) {\\r\\n            if (voters[i] == _voterAddress) return true;\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xaf8b6d5033f463d15e33bd94ef98a3987d05f042c4569ac9c1954d3517413e78\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162003dad38038062003dad833981810160405281019062000037919062000179565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000160146101000a81548160ff0219169083151502179055508181600101819055504281600201819055506001816003016000604051602001620000f69062000206565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555050506200021d565b600080fd5b6000819050919050565b62000153816200013e565b81146200015f57600080fd5b50565b600081519050620001738162000148565b92915050565b60006020828403121562000192576200019162000139565b5b6000620001a28482850162000162565b91505092915050565b600081905092915050565b7f41444d494e000000000000000000000000000000000000000000000000000000600082015250565b6000620001ee600583620001ab565b9150620001fb82620001b6565b600582019050919050565b60006200021382620001df565b9150819050919050565b608051613b776200023660003960005050613b776000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a147d93211610066578063a147d93214610159578063b6bd839614610177578063c9d27afe14610193578063cceb68f5146101af578063eccc51fd146101cd57610093565b8063013cf08b1461009857806308ae4b0c146100d25780632ada2596146101055780639eab525314610138575b600080fd5b6100b260048036038101906100ad91906124db565b6101e9565b6040516100c99b9a9998979695949392919061263e565b60405180910390f35b6100ec60048036038101906100e79190612723565b6103da565b6040516100fc9493929190612769565b60405180910390f35b61011f600480360381019061011a9190612723565b610437565b60405161012f9493929190612769565b60405180910390f35b6101406104d1565b6040516101509493929190612aa6565b60405180910390f35b610161610886565b60405161016e9190612b07565b60405180910390f35b610191600480360381019061018c9190612b7a565b610914565b005b6101ad60048036038101906101a89190612bf9565b610e8a565b005b6101b761145b565b6040516101c49190612ee4565b60405180910390f35b6101e760048036038101906101e29190613060565b61183c565b005b60036020528060005260406000206000915090508060000154908060010180546102129061311a565b80601f016020809104026020016040519081016040528092919081815260200182805461023e9061311a565b801561028b5780601f106102605761010080835404028352916020019161028b565b820191906000526020600020905b81548152906001019060200180831161026e57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16908060020160159054906101000a900460ff16908060030180546102ec9061311a565b80601f01602080910402602001604051908101604052809291908181526020018280546103189061311a565b80156103655780601f1061033a57610100808354040283529160200191610365565b820191906000526020600020905b81548152906001019060200180831161034857829003601f168201915b5050505050908060040160009054906101000a900463ffffffff16908060040160049054906101000a900463ffffffff16908060040160089054906101000a900463ffffffff169080600401600c9054906101000a900463ffffffff16908060040160109054906101000a900460030b90508b565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060010154908060020154905084565b6000806000806000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160149054906101000a900460ff16826001015483600201549450945094509450509193509193565b606080606080600060048054905067ffffffffffffffff8111156104f8576104f7612f10565b5b6040519080825280602002602001820160405280156105265781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff81111561054a57610549612f10565b5b6040519080825280602002602001820160405280156105785781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff81111561059c5761059b612f10565b5b6040519080825280602002602001820160405280156105ca5781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff8111156105ee576105ed612f10565b5b60405190808252806020026020018201604052801561061c5781602001602082028036833780820191505090505b50905060005b60048054905081101561086f576000600482815481106106455761064461314b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168683815181106106e8576106e761314b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff168583815181106107855761078461314b565b5b602002602001019015159081151581525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548483815181106107ed576107ec61314b565b5b602002602001018181525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015483838151811061084f5761084e61314b565b5b602002602001018181525050508080610867906131a9565b915050610622565b508383838397509750975097505050505090919293565b6060600480548060200260200160405190810160405280929190818152602001828054801561090a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108c0575b5050505050905090565b60405160200161092390613248565b60405160208183030381529060405280519060200120600060405160200161094a906132a9565b604051602081830303815290604052805190602001208203610a8d57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016109b990613248565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1680610a775750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610a44906132a9565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b610a85576000905080610a8b565b60019050805b505b604051602001610a9c90613248565b604051602081830303815290604052805190602001208203610b5357600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610b0b90613248565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16610b4b576000905080610b51565b60019050805b505b6001151581151514610b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b919061330a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610c09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0090613376565b60405180910390fd5b6000801b8403610c4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c45906133e2565b60405180910390fd5b60001515600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff16151514610ce4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdb9061344e565b60405180910390fd5b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050858160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000160146101000a81548160ff0219169083151502179055508481600101819055504281600201819055506001816003016000610daa87611df7565b815260200190815260200160002060006101000a81548160ff0219169083151502179055506004869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff167fbe61d680988ec1460d4972efa07e74ca182afcee5ffacb887cf9ac6ed0e3d2568686604051610e7a9291906134e5565b60405180910390a2505050505050565b604051602001610e99906132a9565b604051602081830303815290604052805190602001206000604051602001610ec0906132a9565b60405160208183030381529060405280519060200120820361100357600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610f2f90613248565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1680610fed5750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610fba906132a9565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b610ffb576000905080611001565b60019050805b505b60405160200161101290613248565b6040516020818303038152906040528051906020012082036110c957600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161108190613248565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff166110c15760009050806110c7565b60019050805b505b6001151581151514611110576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111079061330a565b60405180910390fd5b6000600360008681526020019081526020016000209050600115158160020160149054906101000a900460ff1615151461117f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111769061355a565b60405180910390fd5b600115158160020160159054906101000a900460ff161515146111d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ce906135c6565b60405180910390fd5b8060040160049054906101000a900463ffffffff1663ffffffff164210611233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122a90613632565b60405180910390fd5b8060040160009054906101000a900463ffffffff1663ffffffff16421015611290576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112879061369e565b60405180910390fd5b6000151561129e8633611eb3565b1515146112e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d79061370a565b60405180910390fd5b831561132e5780600401600881819054906101000a900463ffffffff168092919061130a9061372a565b91906101000a81548163ffffffff021916908363ffffffff16021790555050611372565b80600401600c81819054906101000a900463ffffffff16809291906113529061372a565b91906101000a81548163ffffffff021916908363ffffffff160217905550505b80600501339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600401601081819054906101000a900460030b809291906113f890613756565b91906101000a81548163ffffffff021916908360030b63ffffffff16021790555050847f86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae0853360405161144c929190613782565b60405180910390a25050505050565b606060006114696000612264565b905060008167ffffffffffffffff81111561148757611486612f10565b5b6040519080825280602002602001820160405280156114c057816020015b6114ad612354565b8152602001906001900390816114a55790505b50905060005b828110156118335760006001826114dd91906137ab565b9050600060036000838152602001908152602001600020905080604051806101800160405290816000820154815260200160018201805461151d9061311a565b80601f01602080910402602001604051908101604052809291908181526020018280546115499061311a565b80156115965780601f1061156b57610100808354040283529160200191611596565b820191906000526020600020905b81548152906001019060200180831161157957829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900460ff1615151515815260200160038201805461163b9061311a565b80601f01602080910402602001604051908101604052809291908181526020018280546116679061311a565b80156116b45780601f10611689576101008083540402835291602001916116b4565b820191906000526020600020905b81548152906001019060200180831161169757829003601f168201915b505050505081526020016004820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160048201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160109054906101000a900460030b60030b60030b8152602001600582018054806020026020016040519081016040528092919081815260200182805480156117f757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116117ad575b5050505050815250508484815181106118135761181261314b565b5b60200260200101819052505050808061182b906131a9565b9150506114c6565b50809250505090565b60405160200161184b906132a9565b604051602081830303815290604052805190602001206000604051602001611872906132a9565b6040516020818303038152906040528051906020012082036119b557600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016118e190613248565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff168061199f5750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161196c906132a9565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b6119ad5760009050806119b3565b60019050805b505b6040516020016119c490613248565b604051602081830303815290604052805190602001208203611a7b57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001611a3390613248565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16611a73576000905080611a79565b60019050805b505b6001151581151514611ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab99061330a565b60405180910390fd5b600a855111611b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afd9061382b565b60405180910390fd5b611b106000612272565b6000611b1c6000612264565b90506040518061018001604052808281526020018681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016001151581526020016001151581526020018781526020014263ffffffff168152602001611b7f86612288565b63ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600060030b8152602001600067ffffffffffffffff811115611bc957611bc8612f10565b5b604051908082528060200260200182016040528015611bf75781602001602082028036833780820191505090505b5081525060036000838152602001908152602001600020600082015181600001556020820151816001019081611c2d91906139f7565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff02191690831515021790555060808201518160020160156101000a81548160ff02191690831515021790555060a0820151816003019081611cca91906139f7565b5060c08201518160040160006101000a81548163ffffffff021916908363ffffffff16021790555060e08201518160040160046101000a81548163ffffffff021916908363ffffffff1602179055506101008201518160040160086101000a81548163ffffffff021916908363ffffffff16021790555061012082015181600401600c6101000a81548163ffffffff021916908363ffffffff1602179055506101408201518160040160106101000a81548163ffffffff021916908360030b63ffffffff160217905550610160820151816005019080519060200190611db19291906123ea565b50905050807fd54d24c2f5d3c070ed74aa4a4926cc273f4bdf17b66ce3d0a6493b11da160e288786604051611de7929190613b11565b60405180910390a2505050505050565b6000806001811115611e0c57611e0b61346e565b5b826001811115611e1f57611e1e61346e565b5b03611e5057604051602001611e33906132a9565b604051602081830303815290604052805190602001209050611eae565b600180811115611e6357611e6261346e565b5b826001811115611e7657611e7561346e565b5b03611ea757604051602001611e8a90613248565b604051602081830303815290604052805190602001209050611eae565b6000801b90505b919050565b600080600360008581526020019081526020016000206040518061018001604052908160008201548152602001600182018054611eef9061311a565b80601f0160208091040260200160405190810160405280929190818152602001828054611f1b9061311a565b8015611f685780601f10611f3d57610100808354040283529160200191611f68565b820191906000526020600020905b815481529060010190602001808311611f4b57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900460ff1615151515815260200160038201805461200d9061311a565b80601f01602080910402602001604051908101604052809291908181526020018280546120399061311a565b80156120865780601f1061205b57610100808354040283529160200191612086565b820191906000526020600020905b81548152906001019060200180831161206957829003601f168201915b505050505081526020016004820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160048201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160109054906101000a900460030b60030b60030b8152602001600582018054806020026020016040519081016040528092919081815260200182805480156121c957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161217f575b50505050508152505090506000816101600151905060005b8151811015612256578473ffffffffffffffffffffffffffffffffffffffff168282815181106122145761221361314b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603612243576001935050505061225e565b808061224e906131a9565b9150506121e1565b506000925050505b92915050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600080600281111561229d5761229c61346e565b5b8260028111156122b0576122af61346e565b5b036122cb5762015180426122c491906137ab565b905061234f565b600160028111156122df576122de61346e565b5b8260028111156122f2576122f161346e565b5b0361230d5762093a804261230691906137ab565b905061234f565b6002808111156123205761231f61346e565b5b8260028111156123335761233261346e565b5b0361234e576224ea004261234791906137ab565b905061234f565b5b919050565b6040518061018001604052806000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160001515815260200160001515815260200160608152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600060030b8152602001606081525090565b828054828255906000526020600020908101928215612463579160200282015b828111156124625782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061240a565b5b5090506124709190612474565b5090565b5b8082111561248d576000816000905550600101612475565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6124b8816124a5565b81146124c357600080fd5b50565b6000813590506124d5816124af565b92915050565b6000602082840312156124f1576124f061249b565b5b60006124ff848285016124c6565b91505092915050565b612511816124a5565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612551578082015181840152602081019050612536565b60008484015250505050565b6000601f19601f8301169050919050565b600061257982612517565b6125838185612522565b9350612593818560208601612533565b61259c8161255d565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125d2826125a7565b9050919050565b6125e2816125c7565b82525050565b60008115159050919050565b6125fd816125e8565b82525050565b600063ffffffff82169050919050565b61261c81612603565b82525050565b60008160030b9050919050565b61263881612622565b82525050565b600061016082019050612654600083018e612508565b8181036020830152612666818d61256e565b9050612675604083018c6125d9565b612682606083018b6125f4565b61268f608083018a6125f4565b81810360a08301526126a1818961256e565b90506126b060c0830188612613565b6126bd60e0830187612613565b6126cb610100830186612613565b6126d9610120830185612613565b6126e761014083018461262f565b9c9b505050505050505050505050565b612700816125c7565b811461270b57600080fd5b50565b60008135905061271d816126f7565b92915050565b6000602082840312156127395761273861249b565b5b60006127478482850161270e565b91505092915050565b6000819050919050565b61276381612750565b82525050565b600060808201905061277e60008301876125d9565b61278b60208301866125f4565b612798604083018561275a565b6127a56060830184612508565b95945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6127e3816125c7565b82525050565b60006127f583836127da565b60208301905092915050565b6000602082019050919050565b6000612819826127ae565b61282381856127b9565b935061282e836127ca565b8060005b8381101561285f57815161284688826127e9565b975061285183612801565b925050600181019050612832565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6128a1816125e8565b82525050565b60006128b38383612898565b60208301905092915050565b6000602082019050919050565b60006128d78261286c565b6128e18185612877565b93506128ec83612888565b8060005b8381101561291d57815161290488826128a7565b975061290f836128bf565b9250506001810190506128f0565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61295f81612750565b82525050565b60006129718383612956565b60208301905092915050565b6000602082019050919050565b60006129958261292a565b61299f8185612935565b93506129aa83612946565b8060005b838110156129db5781516129c28882612965565b97506129cd8361297d565b9250506001810190506129ae565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612a1d816124a5565b82525050565b6000612a2f8383612a14565b60208301905092915050565b6000602082019050919050565b6000612a53826129e8565b612a5d81856129f3565b9350612a6883612a04565b8060005b83811015612a99578151612a808882612a23565b9750612a8b83612a3b565b925050600181019050612a6c565b5085935050505092915050565b60006080820190508181036000830152612ac0818761280e565b90508181036020830152612ad481866128cc565b90508181036040830152612ae8818561298a565b90508181036060830152612afc8184612a48565b905095945050505050565b60006020820190508181036000830152612b21818461280e565b905092915050565b612b3281612750565b8114612b3d57600080fd5b50565b600081359050612b4f81612b29565b92915050565b60028110612b6257600080fd5b50565b600081359050612b7481612b55565b92915050565b600080600060608486031215612b9357612b9261249b565b5b6000612ba18682870161270e565b9350506020612bb286828701612b40565b9250506040612bc386828701612b65565b9150509250925092565b612bd6816125e8565b8114612be157600080fd5b50565b600081359050612bf381612bcd565b92915050565b60008060408385031215612c1057612c0f61249b565b5b6000612c1e858286016124c6565b9250506020612c2f85828601612be4565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000612c8182612517565b612c8b8185612c65565b9350612c9b818560208601612533565b612ca48161255d565b840191505092915050565b612cb881612603565b82525050565b612cc781612622565b82525050565b600082825260208201905092915050565b6000612ce9826127ae565b612cf38185612ccd565b9350612cfe836127ca565b8060005b83811015612d2f578151612d1688826127e9565b9750612d2183612801565b925050600181019050612d02565b5085935050505092915050565b600061018083016000830151612d556000860182612a14565b5060208301518482036020860152612d6d8282612c76565b9150506040830151612d8260408601826127da565b506060830151612d956060860182612898565b506080830151612da86080860182612898565b5060a083015184820360a0860152612dc08282612c76565b91505060c0830151612dd560c0860182612caf565b5060e0830151612de860e0860182612caf565b50610100830151612dfd610100860182612caf565b50610120830151612e12610120860182612caf565b50610140830151612e27610140860182612cbe565b50610160830151848203610160860152612e418282612cde565b9150508091505092915050565b6000612e5a8383612d3c565b905092915050565b6000602082019050919050565b6000612e7a82612c39565b612e848185612c44565b935083602082028501612e9685612c55565b8060005b85811015612ed25784840389528151612eb38582612e4e565b9450612ebe83612e62565b925060208a01995050600181019050612e9a565b50829750879550505050505092915050565b60006020820190508181036000830152612efe8184612e6f565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612f488261255d565b810181811067ffffffffffffffff82111715612f6757612f66612f10565b5b80604052505050565b6000612f7a612491565b9050612f868282612f3f565b919050565b600067ffffffffffffffff821115612fa657612fa5612f10565b5b612faf8261255d565b9050602081019050919050565b82818337600083830152505050565b6000612fde612fd984612f8b565b612f70565b905082815260208101848484011115612ffa57612ff9612f0b565b5b613005848285612fbc565b509392505050565b600082601f83011261302257613021612f06565b5b8135613032848260208601612fcb565b91505092915050565b6003811061304857600080fd5b50565b60008135905061305a8161303b565b92915050565b6000806000606084860312156130795761307861249b565b5b600084013567ffffffffffffffff811115613097576130966124a0565b5b6130a38682870161300d565b935050602084013567ffffffffffffffff8111156130c4576130c36124a0565b5b6130d08682870161300d565b92505060406130e18682870161304b565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061313257607f821691505b602082108103613145576131446130eb565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006131b4826124a5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131e6576131e561317a565b5b600182019050919050565b600081905092915050565b7f41444d494e000000000000000000000000000000000000000000000000000000600082015250565b60006132326005836131f1565b915061323d826131fc565b600582019050919050565b600061325382613225565b9150819050919050565b7f5553455200000000000000000000000000000000000000000000000000000000600082015250565b60006132936004836131f1565b915061329e8261325d565b600482019050919050565b60006132b482613286565b9150819050919050565b7f646f6e2774206861766520636f727265637420726f6c65000000000000000000600082015250565b60006132f4601783612522565b91506132ff826132be565b602082019050919050565b60006020820190508181036000830152613323816132e7565b9050919050565b7f616464726573732063616e277420626520300000000000000000000000000000600082015250565b6000613360601283612522565b915061336b8261332a565b602082019050919050565b6000602082019050818103600083015261338f81613353565b9050919050565b7f6e616d652063616e277420626520300000000000000000000000000000000000600082015250565b60006133cc600f83612522565b91506133d782613396565b602082019050919050565b600060208201905081810360008301526133fb816133bf565b9050919050565b7f6d656d62657220616c7265616479206578697374730000000000000000000000600082015250565b6000613438601583612522565b915061344382613402565b602082019050919050565b600060208201905081810360008301526134678161342b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106134ae576134ad61346e565b5b50565b60008190506134bf8261349d565b919050565b60006134cf826134b1565b9050919050565b6134df816134c4565b82525050565b60006040820190506134fa600083018561275a565b61350760208301846134d6565b9392505050565b7f70726f706f73616c206e6f742076616c69640000000000000000000000000000600082015250565b6000613544601283612522565b915061354f8261350e565b602082019050919050565b6000602082019050818103600083015261357381613537565b9050919050565b7f70726f706f73616c206e6f742061637469766500000000000000000000000000600082015250565b60006135b0601383612522565b91506135bb8261357a565b602082019050919050565b600060208201905081810360008301526135df816135a3565b9050919050565b7f70726f706f73616c20656e646564000000000000000000000000000000000000600082015250565b600061361c600e83612522565b9150613627826135e6565b602082019050919050565b6000602082019050818103600083015261364b8161360f565b9050919050565b7f70726f706f73616c206861736e27742073746172746564000000000000000000600082015250565b6000613688601783612522565b915061369382613652565b602082019050919050565b600060208201905081810360008301526136b78161367b565b9050919050565b7f616c726561647920766f74656400000000000000000000000000000000000000600082015250565b60006136f4600d83612522565b91506136ff826136be565b602082019050919050565b60006020820190508181036000830152613723816136e7565b9050919050565b600061373582612603565b915063ffffffff820361374b5761374a61317a565b5b600182019050919050565b600061376182612622565b9150637fffffff82036137775761377661317a565b5b600182019050919050565b600060408201905061379760008301856125f4565b6137a460208301846125d9565b9392505050565b60006137b6826124a5565b91506137c1836124a5565b92508282019050808211156137d9576137d861317a565b5b92915050565b7f6e6565642061746c656173742031302063686172616374657273000000000000600082015250565b6000613815601a83612522565b9150613820826137df565b602082019050919050565b6000602082019050818103600083015261384481613808565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026138ad7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613870565b6138b78683613870565b95508019841693508086168417925050509392505050565b6000819050919050565b60006138f46138ef6138ea846124a5565b6138cf565b6124a5565b9050919050565b6000819050919050565b61390e836138d9565b61392261391a826138fb565b84845461387d565b825550505050565b600090565b61393761392a565b613942818484613905565b505050565b5b818110156139665761395b60008261392f565b600181019050613948565b5050565b601f8211156139ab5761397c8161384b565b61398584613860565b81016020851015613994578190505b6139a86139a085613860565b830182613947565b50505b505050565b600082821c905092915050565b60006139ce600019846008026139b0565b1980831691505092915050565b60006139e783836139bd565b9150826002028217905092915050565b613a0082612517565b67ffffffffffffffff811115613a1957613a18612f10565b5b613a23825461311a565b613a2e82828561396a565b600060209050601f831160018114613a615760008415613a4f578287015190505b613a5985826139db565b865550613ac1565b601f198416613a6f8661384b565b60005b82811015613a9757848901518255600182019150602085019450602081019050613a72565b86831015613ab45784890151613ab0601f8916826139bd565b8355505b6001600288020188555050505b505050505050565b60038110613ada57613ad961346e565b5b50565b6000819050613aeb82613ac9565b919050565b6000613afb82613add565b9050919050565b613b0b81613af0565b82525050565b60006040820190508181036000830152613b2b818561256e565b9050613b3a6020830184613b02565b939250505056fea26469706673582212204b457c467efc7f7fd92fb562d872ccbb3d9d41352f9b1f32b7c6bc9d6cc57b4064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063a147d93211610066578063a147d93214610159578063b6bd839614610177578063c9d27afe14610193578063cceb68f5146101af578063eccc51fd146101cd57610093565b8063013cf08b1461009857806308ae4b0c146100d25780632ada2596146101055780639eab525314610138575b600080fd5b6100b260048036038101906100ad91906124db565b6101e9565b6040516100c99b9a9998979695949392919061263e565b60405180910390f35b6100ec60048036038101906100e79190612723565b6103da565b6040516100fc9493929190612769565b60405180910390f35b61011f600480360381019061011a9190612723565b610437565b60405161012f9493929190612769565b60405180910390f35b6101406104d1565b6040516101509493929190612aa6565b60405180910390f35b610161610886565b60405161016e9190612b07565b60405180910390f35b610191600480360381019061018c9190612b7a565b610914565b005b6101ad60048036038101906101a89190612bf9565b610e8a565b005b6101b761145b565b6040516101c49190612ee4565b60405180910390f35b6101e760048036038101906101e29190613060565b61183c565b005b60036020528060005260406000206000915090508060000154908060010180546102129061311a565b80601f016020809104026020016040519081016040528092919081815260200182805461023e9061311a565b801561028b5780601f106102605761010080835404028352916020019161028b565b820191906000526020600020905b81548152906001019060200180831161026e57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16908060020160159054906101000a900460ff16908060030180546102ec9061311a565b80601f01602080910402602001604051908101604052809291908181526020018280546103189061311a565b80156103655780601f1061033a57610100808354040283529160200191610365565b820191906000526020600020905b81548152906001019060200180831161034857829003601f168201915b5050505050908060040160009054906101000a900463ffffffff16908060040160049054906101000a900463ffffffff16908060040160089054906101000a900463ffffffff169080600401600c9054906101000a900463ffffffff16908060040160109054906101000a900460030b90508b565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060010154908060020154905084565b6000806000806000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160149054906101000a900460ff16826001015483600201549450945094509450509193509193565b606080606080600060048054905067ffffffffffffffff8111156104f8576104f7612f10565b5b6040519080825280602002602001820160405280156105265781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff81111561054a57610549612f10565b5b6040519080825280602002602001820160405280156105785781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff81111561059c5761059b612f10565b5b6040519080825280602002602001820160405280156105ca5781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff8111156105ee576105ed612f10565b5b60405190808252806020026020018201604052801561061c5781602001602082028036833780820191505090505b50905060005b60048054905081101561086f576000600482815481106106455761064461314b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168683815181106106e8576106e761314b565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff168583815181106107855761078461314b565b5b602002602001019015159081151581525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548483815181106107ed576107ec61314b565b5b602002602001018181525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015483838151811061084f5761084e61314b565b5b602002602001018181525050508080610867906131a9565b915050610622565b508383838397509750975097505050505090919293565b6060600480548060200260200160405190810160405280929190818152602001828054801561090a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108c0575b5050505050905090565b60405160200161092390613248565b60405160208183030381529060405280519060200120600060405160200161094a906132a9565b604051602081830303815290604052805190602001208203610a8d57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016109b990613248565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1680610a775750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610a44906132a9565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b610a85576000905080610a8b565b60019050805b505b604051602001610a9c90613248565b604051602081830303815290604052805190602001208203610b5357600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610b0b90613248565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16610b4b576000905080610b51565b60019050805b505b6001151581151514610b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b919061330a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610c09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0090613376565b60405180910390fd5b6000801b8403610c4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c45906133e2565b60405180910390fd5b60001515600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff16151514610ce4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdb9061344e565b60405180910390fd5b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050858160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000160146101000a81548160ff0219169083151502179055508481600101819055504281600201819055506001816003016000610daa87611df7565b815260200190815260200160002060006101000a81548160ff0219169083151502179055506004869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff167fbe61d680988ec1460d4972efa07e74ca182afcee5ffacb887cf9ac6ed0e3d2568686604051610e7a9291906134e5565b60405180910390a2505050505050565b604051602001610e99906132a9565b604051602081830303815290604052805190602001206000604051602001610ec0906132a9565b60405160208183030381529060405280519060200120820361100357600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610f2f90613248565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1680610fed5750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610fba906132a9565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b610ffb576000905080611001565b60019050805b505b60405160200161101290613248565b6040516020818303038152906040528051906020012082036110c957600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161108190613248565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff166110c15760009050806110c7565b60019050805b505b6001151581151514611110576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111079061330a565b60405180910390fd5b6000600360008681526020019081526020016000209050600115158160020160149054906101000a900460ff1615151461117f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111769061355a565b60405180910390fd5b600115158160020160159054906101000a900460ff161515146111d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ce906135c6565b60405180910390fd5b8060040160049054906101000a900463ffffffff1663ffffffff164210611233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122a90613632565b60405180910390fd5b8060040160009054906101000a900463ffffffff1663ffffffff16421015611290576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112879061369e565b60405180910390fd5b6000151561129e8633611eb3565b1515146112e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112d79061370a565b60405180910390fd5b831561132e5780600401600881819054906101000a900463ffffffff168092919061130a9061372a565b91906101000a81548163ffffffff021916908363ffffffff16021790555050611372565b80600401600c81819054906101000a900463ffffffff16809291906113529061372a565b91906101000a81548163ffffffff021916908363ffffffff160217905550505b80600501339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600401601081819054906101000a900460030b809291906113f890613756565b91906101000a81548163ffffffff021916908360030b63ffffffff16021790555050847f86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae0853360405161144c929190613782565b60405180910390a25050505050565b606060006114696000612264565b905060008167ffffffffffffffff81111561148757611486612f10565b5b6040519080825280602002602001820160405280156114c057816020015b6114ad612354565b8152602001906001900390816114a55790505b50905060005b828110156118335760006001826114dd91906137ab565b9050600060036000838152602001908152602001600020905080604051806101800160405290816000820154815260200160018201805461151d9061311a565b80601f01602080910402602001604051908101604052809291908181526020018280546115499061311a565b80156115965780601f1061156b57610100808354040283529160200191611596565b820191906000526020600020905b81548152906001019060200180831161157957829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900460ff1615151515815260200160038201805461163b9061311a565b80601f01602080910402602001604051908101604052809291908181526020018280546116679061311a565b80156116b45780601f10611689576101008083540402835291602001916116b4565b820191906000526020600020905b81548152906001019060200180831161169757829003601f168201915b505050505081526020016004820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160048201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160109054906101000a900460030b60030b60030b8152602001600582018054806020026020016040519081016040528092919081815260200182805480156117f757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116117ad575b5050505050815250508484815181106118135761181261314b565b5b60200260200101819052505050808061182b906131a9565b9150506114c6565b50809250505090565b60405160200161184b906132a9565b604051602081830303815290604052805190602001206000604051602001611872906132a9565b6040516020818303038152906040528051906020012082036119b557600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016118e190613248565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff168061199f5750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161196c906132a9565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b6119ad5760009050806119b3565b60019050805b505b6040516020016119c490613248565b604051602081830303815290604052805190602001208203611a7b57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001611a3390613248565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16611a73576000905080611a79565b60019050805b505b6001151581151514611ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ab99061330a565b60405180910390fd5b600a855111611b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afd9061382b565b60405180910390fd5b611b106000612272565b6000611b1c6000612264565b90506040518061018001604052808281526020018681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016001151581526020016001151581526020018781526020014263ffffffff168152602001611b7f86612288565b63ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600060030b8152602001600067ffffffffffffffff811115611bc957611bc8612f10565b5b604051908082528060200260200182016040528015611bf75781602001602082028036833780820191505090505b5081525060036000838152602001908152602001600020600082015181600001556020820151816001019081611c2d91906139f7565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff02191690831515021790555060808201518160020160156101000a81548160ff02191690831515021790555060a0820151816003019081611cca91906139f7565b5060c08201518160040160006101000a81548163ffffffff021916908363ffffffff16021790555060e08201518160040160046101000a81548163ffffffff021916908363ffffffff1602179055506101008201518160040160086101000a81548163ffffffff021916908363ffffffff16021790555061012082015181600401600c6101000a81548163ffffffff021916908363ffffffff1602179055506101408201518160040160106101000a81548163ffffffff021916908360030b63ffffffff160217905550610160820151816005019080519060200190611db19291906123ea565b50905050807fd54d24c2f5d3c070ed74aa4a4926cc273f4bdf17b66ce3d0a6493b11da160e288786604051611de7929190613b11565b60405180910390a2505050505050565b6000806001811115611e0c57611e0b61346e565b5b826001811115611e1f57611e1e61346e565b5b03611e5057604051602001611e33906132a9565b604051602081830303815290604052805190602001209050611eae565b600180811115611e6357611e6261346e565b5b826001811115611e7657611e7561346e565b5b03611ea757604051602001611e8a90613248565b604051602081830303815290604052805190602001209050611eae565b6000801b90505b919050565b600080600360008581526020019081526020016000206040518061018001604052908160008201548152602001600182018054611eef9061311a565b80601f0160208091040260200160405190810160405280929190818152602001828054611f1b9061311a565b8015611f685780601f10611f3d57610100808354040283529160200191611f68565b820191906000526020600020905b815481529060010190602001808311611f4b57829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900460ff1615151515815260200160038201805461200d9061311a565b80601f01602080910402602001604051908101604052809291908181526020018280546120399061311a565b80156120865780601f1061205b57610100808354040283529160200191612086565b820191906000526020600020905b81548152906001019060200180831161206957829003601f168201915b505050505081526020016004820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160048201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160109054906101000a900460030b60030b60030b8152602001600582018054806020026020016040519081016040528092919081815260200182805480156121c957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161217f575b50505050508152505090506000816101600151905060005b8151811015612256578473ffffffffffffffffffffffffffffffffffffffff168282815181106122145761221361314b565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603612243576001935050505061225e565b808061224e906131a9565b9150506121e1565b506000925050505b92915050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600080600281111561229d5761229c61346e565b5b8260028111156122b0576122af61346e565b5b036122cb5762015180426122c491906137ab565b905061234f565b600160028111156122df576122de61346e565b5b8260028111156122f2576122f161346e565b5b0361230d5762093a804261230691906137ab565b905061234f565b6002808111156123205761231f61346e565b5b8260028111156123335761233261346e565b5b0361234e576224ea004261234791906137ab565b905061234f565b5b919050565b6040518061018001604052806000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160001515815260200160001515815260200160608152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600063ffffffff168152602001600060030b8152602001606081525090565b828054828255906000526020600020908101928215612463579160200282015b828111156124625782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061240a565b5b5090506124709190612474565b5090565b5b8082111561248d576000816000905550600101612475565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6124b8816124a5565b81146124c357600080fd5b50565b6000813590506124d5816124af565b92915050565b6000602082840312156124f1576124f061249b565b5b60006124ff848285016124c6565b91505092915050565b612511816124a5565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612551578082015181840152602081019050612536565b60008484015250505050565b6000601f19601f8301169050919050565b600061257982612517565b6125838185612522565b9350612593818560208601612533565b61259c8161255d565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125d2826125a7565b9050919050565b6125e2816125c7565b82525050565b60008115159050919050565b6125fd816125e8565b82525050565b600063ffffffff82169050919050565b61261c81612603565b82525050565b60008160030b9050919050565b61263881612622565b82525050565b600061016082019050612654600083018e612508565b8181036020830152612666818d61256e565b9050612675604083018c6125d9565b612682606083018b6125f4565b61268f608083018a6125f4565b81810360a08301526126a1818961256e565b90506126b060c0830188612613565b6126bd60e0830187612613565b6126cb610100830186612613565b6126d9610120830185612613565b6126e761014083018461262f565b9c9b505050505050505050505050565b612700816125c7565b811461270b57600080fd5b50565b60008135905061271d816126f7565b92915050565b6000602082840312156127395761273861249b565b5b60006127478482850161270e565b91505092915050565b6000819050919050565b61276381612750565b82525050565b600060808201905061277e60008301876125d9565b61278b60208301866125f4565b612798604083018561275a565b6127a56060830184612508565b95945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6127e3816125c7565b82525050565b60006127f583836127da565b60208301905092915050565b6000602082019050919050565b6000612819826127ae565b61282381856127b9565b935061282e836127ca565b8060005b8381101561285f57815161284688826127e9565b975061285183612801565b925050600181019050612832565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6128a1816125e8565b82525050565b60006128b38383612898565b60208301905092915050565b6000602082019050919050565b60006128d78261286c565b6128e18185612877565b93506128ec83612888565b8060005b8381101561291d57815161290488826128a7565b975061290f836128bf565b9250506001810190506128f0565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61295f81612750565b82525050565b60006129718383612956565b60208301905092915050565b6000602082019050919050565b60006129958261292a565b61299f8185612935565b93506129aa83612946565b8060005b838110156129db5781516129c28882612965565b97506129cd8361297d565b9250506001810190506129ae565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612a1d816124a5565b82525050565b6000612a2f8383612a14565b60208301905092915050565b6000602082019050919050565b6000612a53826129e8565b612a5d81856129f3565b9350612a6883612a04565b8060005b83811015612a99578151612a808882612a23565b9750612a8b83612a3b565b925050600181019050612a6c565b5085935050505092915050565b60006080820190508181036000830152612ac0818761280e565b90508181036020830152612ad481866128cc565b90508181036040830152612ae8818561298a565b90508181036060830152612afc8184612a48565b905095945050505050565b60006020820190508181036000830152612b21818461280e565b905092915050565b612b3281612750565b8114612b3d57600080fd5b50565b600081359050612b4f81612b29565b92915050565b60028110612b6257600080fd5b50565b600081359050612b7481612b55565b92915050565b600080600060608486031215612b9357612b9261249b565b5b6000612ba18682870161270e565b9350506020612bb286828701612b40565b9250506040612bc386828701612b65565b9150509250925092565b612bd6816125e8565b8114612be157600080fd5b50565b600081359050612bf381612bcd565b92915050565b60008060408385031215612c1057612c0f61249b565b5b6000612c1e858286016124c6565b9250506020612c2f85828601612be4565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000612c8182612517565b612c8b8185612c65565b9350612c9b818560208601612533565b612ca48161255d565b840191505092915050565b612cb881612603565b82525050565b612cc781612622565b82525050565b600082825260208201905092915050565b6000612ce9826127ae565b612cf38185612ccd565b9350612cfe836127ca565b8060005b83811015612d2f578151612d1688826127e9565b9750612d2183612801565b925050600181019050612d02565b5085935050505092915050565b600061018083016000830151612d556000860182612a14565b5060208301518482036020860152612d6d8282612c76565b9150506040830151612d8260408601826127da565b506060830151612d956060860182612898565b506080830151612da86080860182612898565b5060a083015184820360a0860152612dc08282612c76565b91505060c0830151612dd560c0860182612caf565b5060e0830151612de860e0860182612caf565b50610100830151612dfd610100860182612caf565b50610120830151612e12610120860182612caf565b50610140830151612e27610140860182612cbe565b50610160830151848203610160860152612e418282612cde565b9150508091505092915050565b6000612e5a8383612d3c565b905092915050565b6000602082019050919050565b6000612e7a82612c39565b612e848185612c44565b935083602082028501612e9685612c55565b8060005b85811015612ed25784840389528151612eb38582612e4e565b9450612ebe83612e62565b925060208a01995050600181019050612e9a565b50829750879550505050505092915050565b60006020820190508181036000830152612efe8184612e6f565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612f488261255d565b810181811067ffffffffffffffff82111715612f6757612f66612f10565b5b80604052505050565b6000612f7a612491565b9050612f868282612f3f565b919050565b600067ffffffffffffffff821115612fa657612fa5612f10565b5b612faf8261255d565b9050602081019050919050565b82818337600083830152505050565b6000612fde612fd984612f8b565b612f70565b905082815260208101848484011115612ffa57612ff9612f0b565b5b613005848285612fbc565b509392505050565b600082601f83011261302257613021612f06565b5b8135613032848260208601612fcb565b91505092915050565b6003811061304857600080fd5b50565b60008135905061305a8161303b565b92915050565b6000806000606084860312156130795761307861249b565b5b600084013567ffffffffffffffff811115613097576130966124a0565b5b6130a38682870161300d565b935050602084013567ffffffffffffffff8111156130c4576130c36124a0565b5b6130d08682870161300d565b92505060406130e18682870161304b565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061313257607f821691505b602082108103613145576131446130eb565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006131b4826124a5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036131e6576131e561317a565b5b600182019050919050565b600081905092915050565b7f41444d494e000000000000000000000000000000000000000000000000000000600082015250565b60006132326005836131f1565b915061323d826131fc565b600582019050919050565b600061325382613225565b9150819050919050565b7f5553455200000000000000000000000000000000000000000000000000000000600082015250565b60006132936004836131f1565b915061329e8261325d565b600482019050919050565b60006132b482613286565b9150819050919050565b7f646f6e2774206861766520636f727265637420726f6c65000000000000000000600082015250565b60006132f4601783612522565b91506132ff826132be565b602082019050919050565b60006020820190508181036000830152613323816132e7565b9050919050565b7f616464726573732063616e277420626520300000000000000000000000000000600082015250565b6000613360601283612522565b915061336b8261332a565b602082019050919050565b6000602082019050818103600083015261338f81613353565b9050919050565b7f6e616d652063616e277420626520300000000000000000000000000000000000600082015250565b60006133cc600f83612522565b91506133d782613396565b602082019050919050565b600060208201905081810360008301526133fb816133bf565b9050919050565b7f6d656d62657220616c7265616479206578697374730000000000000000000000600082015250565b6000613438601583612522565b915061344382613402565b602082019050919050565b600060208201905081810360008301526134678161342b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106134ae576134ad61346e565b5b50565b60008190506134bf8261349d565b919050565b60006134cf826134b1565b9050919050565b6134df816134c4565b82525050565b60006040820190506134fa600083018561275a565b61350760208301846134d6565b9392505050565b7f70726f706f73616c206e6f742076616c69640000000000000000000000000000600082015250565b6000613544601283612522565b915061354f8261350e565b602082019050919050565b6000602082019050818103600083015261357381613537565b9050919050565b7f70726f706f73616c206e6f742061637469766500000000000000000000000000600082015250565b60006135b0601383612522565b91506135bb8261357a565b602082019050919050565b600060208201905081810360008301526135df816135a3565b9050919050565b7f70726f706f73616c20656e646564000000000000000000000000000000000000600082015250565b600061361c600e83612522565b9150613627826135e6565b602082019050919050565b6000602082019050818103600083015261364b8161360f565b9050919050565b7f70726f706f73616c206861736e27742073746172746564000000000000000000600082015250565b6000613688601783612522565b915061369382613652565b602082019050919050565b600060208201905081810360008301526136b78161367b565b9050919050565b7f616c726561647920766f74656400000000000000000000000000000000000000600082015250565b60006136f4600d83612522565b91506136ff826136be565b602082019050919050565b60006020820190508181036000830152613723816136e7565b9050919050565b600061373582612603565b915063ffffffff820361374b5761374a61317a565b5b600182019050919050565b600061376182612622565b9150637fffffff82036137775761377661317a565b5b600182019050919050565b600060408201905061379760008301856125f4565b6137a460208301846125d9565b9392505050565b60006137b6826124a5565b91506137c1836124a5565b92508282019050808211156137d9576137d861317a565b5b92915050565b7f6e6565642061746c656173742031302063686172616374657273000000000000600082015250565b6000613815601a83612522565b9150613820826137df565b602082019050919050565b6000602082019050818103600083015261384481613808565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026138ad7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613870565b6138b78683613870565b95508019841693508086168417925050509392505050565b6000819050919050565b60006138f46138ef6138ea846124a5565b6138cf565b6124a5565b9050919050565b6000819050919050565b61390e836138d9565b61392261391a826138fb565b84845461387d565b825550505050565b600090565b61393761392a565b613942818484613905565b505050565b5b818110156139665761395b60008261392f565b600181019050613948565b5050565b601f8211156139ab5761397c8161384b565b61398584613860565b81016020851015613994578190505b6139a86139a085613860565b830182613947565b50505b505050565b600082821c905092915050565b60006139ce600019846008026139b0565b1980831691505092915050565b60006139e783836139bd565b9150826002028217905092915050565b613a0082612517565b67ffffffffffffffff811115613a1957613a18612f10565b5b613a23825461311a565b613a2e82828561396a565b600060209050601f831160018114613a615760008415613a4f578287015190505b613a5985826139db565b865550613ac1565b601f198416613a6f8661384b565b60005b82811015613a9757848901518255600182019150602085019450602081019050613a72565b86831015613ab45784890151613ab0601f8916826139bd565b8355505b6001600288020188555050505b505050505050565b60038110613ada57613ad961346e565b5b50565b6000819050613aeb82613ac9565b919050565b6000613afb82613add565b9050919050565b613b0b81613af0565b82525050565b60006040820190508181036000830152613b2b818561256e565b9050613b3a6020830184613b02565b939250505056fea26469706673582212204b457c467efc7f7fd92fb562d872ccbb3d9d41352f9b1f32b7c6bc9d6cc57b4064736f6c63430008110033",
  "devdoc": {
    "author": "Bram Mathijssen",
    "kind": "dev",
    "methods": {},
    "title": "DAO",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "My DAO",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 93,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_proposalIds",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 96,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_memberIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 119,
        "contract": "contracts/DAO.sol:DAO",
        "label": "members",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Member)140_storage)"
      },
      {
        "astId": 124,
        "contract": "contracts/DAO.sol:DAO",
        "label": "proposals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Proposal)166_storage)"
      },
      {
        "astId": 127,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_membersList",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_struct(Member)140_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DAO.Member)",
        "numberOfBytes": "32",
        "value": "t_struct(Member)140_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Proposal)166_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAO.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)166_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/DAO.sol:DAO",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Member)140_storage": {
        "encoding": "inplace",
        "label": "struct DAO.Member",
        "members": [
          {
            "astId": 129,
            "contract": "contracts/DAO.sol:DAO",
            "label": "memberAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 131,
            "contract": "contracts/DAO.sol:DAO",
            "label": "valid",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 133,
            "contract": "contracts/DAO.sol:DAO",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 135,
            "contract": "contracts/DAO.sol:DAO",
            "label": "memberSince",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 139,
            "contract": "contracts/DAO.sol:DAO",
            "label": "role",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Proposal)166_storage": {
        "encoding": "inplace",
        "label": "struct DAO.Proposal",
        "members": [
          {
            "astId": 142,
            "contract": "contracts/DAO.sol:DAO",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 144,
            "contract": "contracts/DAO.sol:DAO",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 146,
            "contract": "contracts/DAO.sol:DAO",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 148,
            "contract": "contracts/DAO.sol:DAO",
            "label": "valid",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 150,
            "contract": "contracts/DAO.sol:DAO",
            "label": "active",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 152,
            "contract": "contracts/DAO.sol:DAO",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 154,
            "contract": "contracts/DAO.sol:DAO",
            "label": "startDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 156,
            "contract": "contracts/DAO.sol:DAO",
            "label": "endDate",
            "offset": 4,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 158,
            "contract": "contracts/DAO.sol:DAO",
            "label": "upVotes",
            "offset": 8,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 160,
            "contract": "contracts/DAO.sol:DAO",
            "label": "downVotes",
            "offset": 12,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 162,
            "contract": "contracts/DAO.sol:DAO",
            "label": "voteCount",
            "offset": 16,
            "slot": "4",
            "type": "t_int32"
          },
          {
            "astId": 165,
            "contract": "contracts/DAO.sol:DAO",
            "label": "voters",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}