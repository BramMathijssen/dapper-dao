{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "memberAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "enum DAO.Role",
          "name": "role",
          "type": "uint8"
        }
      ],
      "name": "MemberAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "enum DAO.Duration",
          "name": "duration",
          "type": "uint8"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "upVote",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_name",
          "type": "bytes32"
        },
        {
          "internalType": "enum DAO.Role",
          "name": "_role",
          "type": "uint8"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "enum DAO.Duration",
          "name": "_duration",
          "type": "uint8"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProposals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "creator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "valid",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "active",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "startDate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "endDate",
              "type": "uint32"
            },
            {
              "internalType": "int32",
              "name": "voteCount",
              "type": "int32"
            }
          ],
          "internalType": "struct DAO.Proposal[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "getMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembersList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "address",
          "name": "memberAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "memberSince",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "valid",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "startDate",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endDate",
          "type": "uint32"
        },
        {
          "internalType": "int32",
          "name": "voteCount",
          "type": "int32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "upVote",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd6549999f16b8a66c633b594702c0b52270ba52496b4806704587327bfa32715",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2966779",
    "logsBloom": "0x
    "blockHash": "0x4878a8a5194c07a4f4fc5e004692a81981ec7a36c69ffda46cec36253a3348f5",
    "transactionHash": "0xd6549999f16b8a66c633b594702c0b52270ba52496b4806704587327bfa32715",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2966779",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6272616d00000000000000000000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "ac34932d98504b0d90cb9bfde73fb240",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum DAO.Role\",\"name\":\"role\",\"type\":\"uint8\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"enum DAO.Duration\",\"name\":\"duration\",\"type\":\"uint8\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"upVote\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_name\",\"type\":\"bytes32\"},{\"internalType\":\"enum DAO.Role\",\"name\":\"_role\",\"type\":\"uint8\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"enum DAO.Duration\",\"name\":\"_duration\",\"type\":\"uint8\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllProposals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endDate\",\"type\":\"uint32\"},{\"internalType\":\"int32\",\"name\":\"voteCount\",\"type\":\"int32\"}],\"internalType\":\"struct DAO.Proposal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"getMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembersList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"memberAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"memberSince\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"valid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endDate\",\"type\":\"uint32\"},{\"internalType\":\"int32\",\"name\":\"voteCount\",\"type\":\"int32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"upVote\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Bram Mathijssen\",\"kind\":\"dev\",\"methods\":{},\"title\":\"DAO\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"My DAO\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DAO.sol\":\"DAO\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/DAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\n\\r\\nerror ParentContract__NotOwnerOfToken();\\r\\n\\r\\n/// @title DAO\\r\\n/// @author Bram Mathijssen\\r\\n/// @notice My DAO\\r\\ncontract DAO {\\r\\n    /* Type declarations */\\r\\n    using Counters for Counters.Counter;\\r\\n\\r\\n    enum Role {\\r\\n        USER,\\r\\n        ADMIN\\r\\n    }\\r\\n\\r\\n    enum Duration {\\r\\n        DAY,\\r\\n        WEEK,\\r\\n        MONTH\\r\\n    }\\r\\n\\r\\n    /* State Variables */\\r\\n    Counters.Counter private _proposalIds;\\r\\n    Counters.Counter private _memberIds;\\r\\n    address private immutable i_owner;\\r\\n    bytes32 private constant USER = keccak256(abi.encodePacked(\\\"USER\\\"));\\r\\n    bytes32 private constant ADMIN = keccak256(abi.encodePacked(\\\"ADMIN\\\"));\\r\\n\\r\\n    mapping(address => Member) public members;\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n\\r\\n    address[] private _membersList;\\r\\n\\r\\n    /* Structs */\\r\\n    struct Member {\\r\\n        // uint256 id;\\r\\n        address memberAddress;\\r\\n        bool valid; // checks if member has been initialised in mapping\\r\\n        bytes32 name;\\r\\n        uint256 memberSince;\\r\\n        mapping(bytes32 => bool) role; // mapping gives ability to hold multiple roles\\r\\n    }\\r\\n\\r\\n    struct Proposal {\\r\\n        uint256 id;\\r\\n        string title;\\r\\n        address creator;\\r\\n        bool valid;\\r\\n        bool active;\\r\\n        string description;\\r\\n        uint32 startDate;\\r\\n        uint32 endDate;\\r\\n        int32 voteCount;\\r\\n    }\\r\\n\\r\\n    /* Events */\\r\\n    event MemberAdded(address indexed memberAddress, bytes32 name, Role role);\\r\\n    event ProposalCreated(\\r\\n        uint256 indexed proposalCount,\\r\\n        string description,\\r\\n        Duration duration\\r\\n    );\\r\\n    event Voted(\\r\\n        uint256 indexed proposalNumber,\\r\\n        bool upVote,\\r\\n        address voterAddress\\r\\n    );\\r\\n\\r\\n    /* Modifiers */\\r\\n    modifier hasRole(bytes32 _role) {\\r\\n        bool authorized;\\r\\n\\r\\n        if (_role == USER) {\\r\\n            members[msg.sender].role[ADMIN] || members[msg.sender].role[USER]\\r\\n                ? authorized = true\\r\\n                : authorized = false;\\r\\n        }\\r\\n        if (_role == ADMIN) {\\r\\n            members[msg.sender].role[ADMIN]\\r\\n                ? authorized = true\\r\\n                : authorized = false;\\r\\n        }\\r\\n\\r\\n        require(authorized == true, \\\"don't have correct role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* Constructor */\\r\\n    constructor(bytes32 _name) {\\r\\n        i_owner = msg.sender;\\r\\n\\r\\n        // load struct in storage before assigning values since we are using a mapping inside struct\\r\\n        Member storage member = members[msg.sender];\\r\\n        member.valid = true;\\r\\n        member.name = _name;\\r\\n        member.memberSince = block.timestamp;\\r\\n        member.role[ADMIN] = true;\\r\\n    }\\r\\n\\r\\n    /* Functions */\\r\\n\\r\\n    /* external Functions */\\r\\n    function addMember(\\r\\n        address _address,\\r\\n        bytes32 _name,\\r\\n        Role _role\\r\\n    ) external hasRole(ADMIN) {\\r\\n        require(_address != address(0), \\\"address can't be 0\\\");\\r\\n        require(_name != bytes32(0), \\\"name can't be 0\\\");\\r\\n        require(members[_address].valid == false, \\\"member already exists\\\");\\r\\n\\r\\n        Member storage member = members[_address];\\r\\n        member.memberAddress = _address;\\r\\n        member.valid = true;\\r\\n        member.name = _name;\\r\\n        member.memberSince = block.timestamp;\\r\\n        member.role[_getRole(_role)] = true;\\r\\n\\r\\n        _membersList.push(_address);\\r\\n\\r\\n        emit MemberAdded(_address, _name, _role);\\r\\n    }\\r\\n\\r\\n    // todo: remove member\\r\\n\\r\\n    function createProposal(\\r\\n        string memory _description,\\r\\n        string memory _title,\\r\\n        Duration _duration\\r\\n    ) external hasRole(USER) {\\r\\n        require(bytes(_description).length > 10, \\\"need atleast 10 characters\\\");\\r\\n        _proposalIds.increment();\\r\\n        uint256 proposalId = _proposalIds.current();\\r\\n        proposals[proposalId] = Proposal({\\r\\n            id: proposalId,\\r\\n            title: _title,\\r\\n            creator: msg.sender,\\r\\n            valid: true,\\r\\n            description: _description,\\r\\n            startDate: uint32(block.timestamp),\\r\\n            endDate: uint32(_getTimestampByDuration(_duration)),\\r\\n            active: true,\\r\\n            voteCount: 0\\r\\n        });\\r\\n        emit ProposalCreated(proposalId, _description, _duration);\\r\\n    }\\r\\n\\r\\n    function vote(uint256 _proposalNumber, bool upVote) external hasRole(USER) {\\r\\n        Proposal storage proposal = proposals[_proposalNumber];\\r\\n        require(proposal.valid == true, \\\"proposal not valid\\\");\\r\\n        require(proposal.active == true, \\\"proposal not active\\\");\\r\\n        require(block.timestamp < proposal.endDate, \\\"proposal ended\\\");\\r\\n        require(\\r\\n            block.timestamp >= proposal.startDate,\\r\\n            \\\"proposal hasn't started\\\"\\r\\n        );\\r\\n        if (upVote) {\\r\\n            proposal.voteCount++;\\r\\n        } else {\\r\\n            proposals[_proposalNumber].voteCount--;\\r\\n        }\\r\\n        emit Voted(_proposalNumber, upVote, msg.sender);\\r\\n    }\\r\\n\\r\\n    function getAllProposals() external view returns (Proposal[] memory) {\\r\\n        uint256 proposalId = _proposalIds.current();\\r\\n\\r\\n        Proposal[] memory proposalsList = new Proposal[](proposalId);\\r\\n        for (uint256 i = 0; i < proposalId; i++) {\\r\\n            uint256 currentId = i + 1;\\r\\n            Proposal storage currentItem = proposals[currentId];\\r\\n            proposalsList[i] = currentItem;\\r\\n        }\\r\\n        return proposalsList;\\r\\n    }\\r\\n\\r\\n    function getMembersList() external view returns (address[] memory) {\\r\\n        return _membersList;\\r\\n    }\\r\\n\\r\\n    // getting members from member struct with individual properties\\r\\n    function getMembers()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            address[] memory,\\r\\n            bool[] memory,\\r\\n            bytes32[] memory,\\r\\n            uint256[] memory\\r\\n        )\\r\\n    {\\r\\n        address[] memory addresses = new address[](_membersList.length);\\r\\n        bool[] memory valid = new bool[](_membersList.length);\\r\\n        bytes32[] memory names = new bytes32[](_membersList.length);\\r\\n        uint256[] memory memberSince = new uint256[](_membersList.length);\\r\\n\\r\\n        for (uint256 i = 0; i < _membersList.length; i++) {\\r\\n            address tempAddress = _membersList[i];\\r\\n            addresses[i] = members[tempAddress].memberAddress;\\r\\n            valid[i] = members[tempAddress].valid;\\r\\n            names[i] = members[tempAddress].name;\\r\\n            memberSince[i] = members[tempAddress].memberSince;\\r\\n        }\\r\\n        return (addresses, valid, names, memberSince);\\r\\n    }\\r\\n\\r\\n    // doesnt work\\r\\n    // function getMembersMapping() external returns (Member[] memory) {\\r\\n\\r\\n    // }\\r\\n\\r\\n    // gets a individual member\\r\\n    function getMember(\\r\\n        address _memberAddress\\r\\n    ) external view returns (address, bool, bytes32, uint256) {\\r\\n        Member storage member = members[_memberAddress];\\r\\n        return (\\r\\n            member.memberAddress,\\r\\n            member.valid,\\r\\n            member.name,\\r\\n            member.memberSince\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* public Functions */\\r\\n    /* internal Functions */\\r\\n\\r\\n    /* private Functions */\\r\\n    function _getTimestampByDuration(\\r\\n        Duration _duration\\r\\n    ) private view returns (uint256) {\\r\\n        if (_duration == Duration.DAY) {\\r\\n            return block.timestamp + 1 days;\\r\\n        }\\r\\n        if (_duration == Duration.WEEK) {\\r\\n            return block.timestamp + 1 weeks;\\r\\n        }\\r\\n        if (_duration == Duration.MONTH) {\\r\\n            return block.timestamp + 4 weeks;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _grantRole(\\r\\n        address _memberAddress,\\r\\n        Role _role\\r\\n    ) private hasRole(ADMIN) {\\r\\n        Member storage member = members[_memberAddress];\\r\\n        member.role[_getRole(_role)] = true;\\r\\n    }\\r\\n\\r\\n    function _getRole(Role _role) private pure returns (bytes32) {\\r\\n        if (_role == Role.USER) {\\r\\n            return USER;\\r\\n        }\\r\\n        if (_role == Role.ADMIN) {\\r\\n            return ADMIN;\\r\\n        }\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb9841e178b02fb7c149339aee9180e8680b49c4bb85b1a1400ee2e2bc3a09b0d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200354c3803806200354c833981810160405281019062000037919062000179565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160000160146101000a81548160ff0219169083151502179055508181600101819055504281600201819055506001816003016000604051602001620000f69062000206565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555050506200021d565b600080fd5b6000819050919050565b62000153816200013e565b81146200015f57600080fd5b50565b600081519050620001738162000148565b92915050565b60006020828403121562000192576200019162000139565b5b6000620001a28482850162000162565b91505092915050565b600081905092915050565b7f41444d494e000000000000000000000000000000000000000000000000000000600082015250565b6000620001ee600583620001ab565b9150620001fb82620001b6565b600582019050919050565b60006200021382620001df565b9150819050919050565b60805161331662000236600039600050506133166000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a147d93211610066578063a147d93214610157578063b6bd839614610175578063c9d27afe14610191578063cceb68f5146101ad578063eccc51fd146101cb57610093565b8063013cf08b1461009857806308ae4b0c146100d05780632ada2596146101035780639eab525314610136575b600080fd5b6100b260048036038101906100ad9190611d9d565b6101e7565b6040516100c799989796959493929190611f00565b60405180910390f35b6100ea60048036038101906100e59190611fc7565b6103ac565b6040516100fa949392919061200d565b60405180910390f35b61011d60048036038101906101189190611fc7565b610409565b60405161012d949392919061200d565b60405180910390f35b61013e6104a3565b60405161014e949392919061234a565b60405180910390f35b61015f610858565b60405161016c91906123ab565b60405180910390f35b61018f600480360381019061018a919061241e565b6108e6565b005b6101ab60048036038101906101a6919061249d565b610e5c565b005b6101b5611347565b6040516101c291906126d3565b60405180910390f35b6101e560048036038101906101e0919061284f565b61164e565b005b600360205280600052604060002060009150905080600001549080600101805461021090612909565b80601f016020809104026020016040519081016040528092919081815260200182805461023c90612909565b80156102895780601f1061025e57610100808354040283529160200191610289565b820191906000526020600020905b81548152906001019060200180831161026c57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16908060020160159054906101000a900460ff16908060030180546102ea90612909565b80601f016020809104026020016040519081016040528092919081815260200182805461031690612909565b80156103635780601f1061033857610100808354040283529160200191610363565b820191906000526020600020905b81548152906001019060200180831161034657829003601f168201915b5050505050908060040160009054906101000a900463ffffffff16908060040160049054906101000a900463ffffffff16908060040160089054906101000a900460030b905089565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060010154908060020154905084565b6000806000806000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160149054906101000a900460ff16826001015483600201549450945094509450509193509193565b606080606080600060048054905067ffffffffffffffff8111156104ca576104c96126ff565b5b6040519080825280602002602001820160405280156104f85781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff81111561051c5761051b6126ff565b5b60405190808252806020026020018201604052801561054a5781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff81111561056e5761056d6126ff565b5b60405190808252806020026020018201604052801561059c5781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff8111156105c0576105bf6126ff565b5b6040519080825280602002602001820160405280156105ee5781602001602082028036833780820191505090505b50905060005b600480549050811015610841576000600482815481106106175761061661293a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168683815181106106ba576106b961293a565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff168583815181106107575761075661293a565b5b602002602001019015159081151581525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548483815181106107bf576107be61293a565b5b602002602001018181525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201548383815181106108215761082061293a565b5b60200260200101818152505050808061083990612998565b9150506105f4565b508383838397509750975097505050505090919293565b606060048054806020026020016040519081016040528092919081815260200182805480156108dc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610892575b5050505050905090565b6040516020016108f590612a37565b60405160208183030381529060405280519060200120600060405160200161091c90612a98565b604051602081830303815290604052805190602001208203610a5f57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161098b90612a37565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1680610a495750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610a1690612a98565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b610a57576000905080610a5d565b60019050805b505b604051602001610a6e90612a37565b604051602081830303815290604052805190602001208203610b2557600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610add90612a37565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16610b1d576000905080610b23565b60019050805b505b6001151581151514610b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6390612af9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610bdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd290612b65565b60405180910390fd5b6000801b8403610c20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1790612bd1565b60405180910390fd5b60001515600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff16151514610cb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cad90612c3d565b60405180910390fd5b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050858160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000160146101000a81548160ff0219169083151502179055508481600101819055504281600201819055506001816003016000610d7c87611b32565b815260200190815260200160002060006101000a81548160ff0219169083151502179055506004869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff167fbe61d680988ec1460d4972efa07e74ca182afcee5ffacb887cf9ac6ed0e3d2568686604051610e4c929190612cd4565b60405180910390a2505050505050565b604051602001610e6b90612a98565b604051602081830303815290604052805190602001206000604051602001610e9290612a98565b604051602081830303815290604052805190602001208203610fd557600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610f0190612a37565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1680610fbf5750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610f8c90612a98565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b610fcd576000905080610fd3565b60019050805b505b604051602001610fe490612a37565b60405160208183030381529060405280519060200120820361109b57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161105390612a37565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16611093576000905080611099565b60019050805b505b60011515811515146110e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d990612af9565b60405180910390fd5b6000600360008681526020019081526020016000209050600115158160020160149054906101000a900460ff16151514611151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114890612d49565b60405180910390fd5b600115158160020160159054906101000a900460ff161515146111a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a090612db5565b60405180910390fd5b8060040160049054906101000a900463ffffffff1663ffffffff164210611205576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111fc90612e21565b60405180910390fd5b8060040160009054906101000a900463ffffffff1663ffffffff16421015611262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125990612e8d565b60405180910390fd5b83156112b05780600401600881819054906101000a900460030b8092919061128990612ead565b91906101000a81548163ffffffff021916908360030b63ffffffff16021790555050611306565b60036000868152602001908152602001600020600401600881819054906101000a900460030b809291906112e390612ed9565b91906101000a81548163ffffffff021916908360030b63ffffffff160217905550505b847f86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae08533604051611338929190612f21565b60405180910390a25050505050565b606060006113556000611bee565b905060008167ffffffffffffffff811115611373576113726126ff565b5b6040519080825280602002602001820160405280156113ac57816020015b611399611cde565b8152602001906001900390816113915790505b50905060005b828110156116455760006001826113c99190612f4a565b9050600060036000838152602001908152602001600020905080604051806101200160405290816000820154815260200160018201805461140990612909565b80601f016020809104026020016040519081016040528092919081815260200182805461143590612909565b80156114825780601f1061145757610100808354040283529160200191611482565b820191906000526020600020905b81548152906001019060200180831161146557829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900460ff1615151515815260200160038201805461152790612909565b80601f016020809104026020016040519081016040528092919081815260200182805461155390612909565b80156115a05780601f10611575576101008083540402835291602001916115a0565b820191906000526020600020905b81548152906001019060200180831161158357829003601f168201915b505050505081526020016004820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160089054906101000a900460030b60030b60030b815250508484815181106116255761162461293a565b5b60200260200101819052505050808061163d90612998565b9150506113b2565b50809250505090565b60405160200161165d90612a98565b60405160208183030381529060405280519060200120600060405160200161168490612a98565b6040516020818303038152906040528051906020012082036117c757600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016116f390612a37565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16806117b15750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161177e90612a98565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b6117bf5760009050806117c5565b60019050805b505b6040516020016117d690612a37565b60405160208183030381529060405280519060200120820361188d57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161184590612a37565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1661188557600090508061188b565b60019050805b505b60011515811515146118d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cb90612af9565b60405180910390fd5b600a855111611918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190f90612fca565b60405180910390fd5b6119226000611bfc565b600061192e6000611bee565b90506040518061012001604052808281526020018681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016001151581526020016001151581526020018781526020014263ffffffff16815260200161199186611c12565b63ffffffff168152602001600060030b815250600360008381526020019081526020016000206000820151816000015560208201518160010190816119d69190613196565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff02191690831515021790555060808201518160020160156101000a81548160ff02191690831515021790555060a0820151816003019081611a739190613196565b5060c08201518160040160006101000a81548163ffffffff021916908363ffffffff16021790555060e08201518160040160046101000a81548163ffffffff021916908363ffffffff1602179055506101008201518160040160086101000a81548163ffffffff021916908360030b63ffffffff160217905550905050807fd54d24c2f5d3c070ed74aa4a4926cc273f4bdf17b66ce3d0a6493b11da160e288786604051611b229291906132b0565b60405180910390a2505050505050565b6000806001811115611b4757611b46612c5d565b5b826001811115611b5a57611b59612c5d565b5b03611b8b57604051602001611b6e90612a98565b604051602081830303815290604052805190602001209050611be9565b600180811115611b9e57611b9d612c5d565b5b826001811115611bb157611bb0612c5d565b5b03611be257604051602001611bc590612a37565b604051602081830303815290604052805190602001209050611be9565b6000801b90505b919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000806002811115611c2757611c26612c5d565b5b826002811115611c3a57611c39612c5d565b5b03611c55576201518042611c4e9190612f4a565b9050611cd9565b60016002811115611c6957611c68612c5d565b5b826002811115611c7c57611c7b612c5d565b5b03611c975762093a8042611c909190612f4a565b9050611cd9565b600280811115611caa57611ca9612c5d565b5b826002811115611cbd57611cbc612c5d565b5b03611cd8576224ea0042611cd19190612f4a565b9050611cd9565b5b919050565b6040518061012001604052806000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160001515815260200160001515815260200160608152602001600063ffffffff168152602001600063ffffffff168152602001600060030b81525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611d7a81611d67565b8114611d8557600080fd5b50565b600081359050611d9781611d71565b92915050565b600060208284031215611db357611db2611d5d565b5b6000611dc184828501611d88565b91505092915050565b611dd381611d67565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e13578082015181840152602081019050611df8565b60008484015250505050565b6000601f19601f8301169050919050565b6000611e3b82611dd9565b611e458185611de4565b9350611e55818560208601611df5565b611e5e81611e1f565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e9482611e69565b9050919050565b611ea481611e89565b82525050565b60008115159050919050565b611ebf81611eaa565b82525050565b600063ffffffff82169050919050565b611ede81611ec5565b82525050565b60008160030b9050919050565b611efa81611ee4565b82525050565b600061012082019050611f16600083018c611dca565b8181036020830152611f28818b611e30565b9050611f37604083018a611e9b565b611f446060830189611eb6565b611f516080830188611eb6565b81810360a0830152611f638187611e30565b9050611f7260c0830186611ed5565b611f7f60e0830185611ed5565b611f8d610100830184611ef1565b9a9950505050505050505050565b611fa481611e89565b8114611faf57600080fd5b50565b600081359050611fc181611f9b565b92915050565b600060208284031215611fdd57611fdc611d5d565b5b6000611feb84828501611fb2565b91505092915050565b6000819050919050565b61200781611ff4565b82525050565b60006080820190506120226000830187611e9b565b61202f6020830186611eb6565b61203c6040830185611ffe565b6120496060830184611dca565b95945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61208781611e89565b82525050565b6000612099838361207e565b60208301905092915050565b6000602082019050919050565b60006120bd82612052565b6120c7818561205d565b93506120d28361206e565b8060005b838110156121035781516120ea888261208d565b97506120f5836120a5565b9250506001810190506120d6565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61214581611eaa565b82525050565b6000612157838361213c565b60208301905092915050565b6000602082019050919050565b600061217b82612110565b612185818561211b565b93506121908361212c565b8060005b838110156121c15781516121a8888261214b565b97506121b383612163565b925050600181019050612194565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61220381611ff4565b82525050565b600061221583836121fa565b60208301905092915050565b6000602082019050919050565b6000612239826121ce565b61224381856121d9565b935061224e836121ea565b8060005b8381101561227f5781516122668882612209565b975061227183612221565b925050600181019050612252565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6122c181611d67565b82525050565b60006122d383836122b8565b60208301905092915050565b6000602082019050919050565b60006122f78261228c565b6123018185612297565b935061230c836122a8565b8060005b8381101561233d57815161232488826122c7565b975061232f836122df565b925050600181019050612310565b5085935050505092915050565b6000608082019050818103600083015261236481876120b2565b905081810360208301526123788186612170565b9050818103604083015261238c818561222e565b905081810360608301526123a081846122ec565b905095945050505050565b600060208201905081810360008301526123c581846120b2565b905092915050565b6123d681611ff4565b81146123e157600080fd5b50565b6000813590506123f3816123cd565b92915050565b6002811061240657600080fd5b50565b600081359050612418816123f9565b92915050565b60008060006060848603121561243757612436611d5d565b5b600061244586828701611fb2565b9350506020612456868287016123e4565b925050604061246786828701612409565b9150509250925092565b61247a81611eaa565b811461248557600080fd5b50565b60008135905061249781612471565b92915050565b600080604083850312156124b4576124b3611d5d565b5b60006124c285828601611d88565b92505060206124d385828601612488565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061252582611dd9565b61252f8185612509565b935061253f818560208601611df5565b61254881611e1f565b840191505092915050565b61255c81611ec5565b82525050565b61256b81611ee4565b82525050565b60006101208301600083015161258a60008601826122b8565b50602083015184820360208601526125a2828261251a565b91505060408301516125b7604086018261207e565b5060608301516125ca606086018261213c565b5060808301516125dd608086018261213c565b5060a083015184820360a08601526125f5828261251a565b91505060c083015161260a60c0860182612553565b5060e083015161261d60e0860182612553565b50610100830151612632610100860182612562565b508091505092915050565b60006126498383612571565b905092915050565b6000602082019050919050565b6000612669826124dd565b61267381856124e8565b935083602082028501612685856124f9565b8060005b858110156126c157848403895281516126a2858261263d565b94506126ad83612651565b925060208a01995050600181019050612689565b50829750879550505050505092915050565b600060208201905081810360008301526126ed818461265e565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61273782611e1f565b810181811067ffffffffffffffff82111715612756576127556126ff565b5b80604052505050565b6000612769611d53565b9050612775828261272e565b919050565b600067ffffffffffffffff821115612795576127946126ff565b5b61279e82611e1f565b9050602081019050919050565b82818337600083830152505050565b60006127cd6127c88461277a565b61275f565b9050828152602081018484840111156127e9576127e86126fa565b5b6127f48482856127ab565b509392505050565b600082601f830112612811576128106126f5565b5b81356128218482602086016127ba565b91505092915050565b6003811061283757600080fd5b50565b6000813590506128498161282a565b92915050565b60008060006060848603121561286857612867611d5d565b5b600084013567ffffffffffffffff81111561288657612885611d62565b5b612892868287016127fc565b935050602084013567ffffffffffffffff8111156128b3576128b2611d62565b5b6128bf868287016127fc565b92505060406128d08682870161283a565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061292157607f821691505b602082108103612934576129336128da565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129a382611d67565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036129d5576129d4612969565b5b600182019050919050565b600081905092915050565b7f41444d494e000000000000000000000000000000000000000000000000000000600082015250565b6000612a216005836129e0565b9150612a2c826129eb565b600582019050919050565b6000612a4282612a14565b9150819050919050565b7f5553455200000000000000000000000000000000000000000000000000000000600082015250565b6000612a826004836129e0565b9150612a8d82612a4c565b600482019050919050565b6000612aa382612a75565b9150819050919050565b7f646f6e2774206861766520636f727265637420726f6c65000000000000000000600082015250565b6000612ae3601783611de4565b9150612aee82612aad565b602082019050919050565b60006020820190508181036000830152612b1281612ad6565b9050919050565b7f616464726573732063616e277420626520300000000000000000000000000000600082015250565b6000612b4f601283611de4565b9150612b5a82612b19565b602082019050919050565b60006020820190508181036000830152612b7e81612b42565b9050919050565b7f6e616d652063616e277420626520300000000000000000000000000000000000600082015250565b6000612bbb600f83611de4565b9150612bc682612b85565b602082019050919050565b60006020820190508181036000830152612bea81612bae565b9050919050565b7f6d656d62657220616c7265616479206578697374730000000000000000000000600082015250565b6000612c27601583611de4565b9150612c3282612bf1565b602082019050919050565b60006020820190508181036000830152612c5681612c1a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612c9d57612c9c612c5d565b5b50565b6000819050612cae82612c8c565b919050565b6000612cbe82612ca0565b9050919050565b612cce81612cb3565b82525050565b6000604082019050612ce96000830185611ffe565b612cf66020830184612cc5565b9392505050565b7f70726f706f73616c206e6f742076616c69640000000000000000000000000000600082015250565b6000612d33601283611de4565b9150612d3e82612cfd565b602082019050919050565b60006020820190508181036000830152612d6281612d26565b9050919050565b7f70726f706f73616c206e6f742061637469766500000000000000000000000000600082015250565b6000612d9f601383611de4565b9150612daa82612d69565b602082019050919050565b60006020820190508181036000830152612dce81612d92565b9050919050565b7f70726f706f73616c20656e646564000000000000000000000000000000000000600082015250565b6000612e0b600e83611de4565b9150612e1682612dd5565b602082019050919050565b60006020820190508181036000830152612e3a81612dfe565b9050919050565b7f70726f706f73616c206861736e27742073746172746564000000000000000000600082015250565b6000612e77601783611de4565b9150612e8282612e41565b602082019050919050565b60006020820190508181036000830152612ea681612e6a565b9050919050565b6000612eb882611ee4565b9150637fffffff8203612ece57612ecd612969565b5b600182019050919050565b6000612ee482611ee4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000008203612f1657612f15612969565b5b600182039050919050565b6000604082019050612f366000830185611eb6565b612f436020830184611e9b565b9392505050565b6000612f5582611d67565b9150612f6083611d67565b9250828201905080821115612f7857612f77612969565b5b92915050565b7f6e6565642061746c656173742031302063686172616374657273000000000000600082015250565b6000612fb4601a83611de4565b9150612fbf82612f7e565b602082019050919050565b60006020820190508181036000830152612fe381612fa7565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261304c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261300f565b613056868361300f565b95508019841693508086168417925050509392505050565b6000819050919050565b600061309361308e61308984611d67565b61306e565b611d67565b9050919050565b6000819050919050565b6130ad83613078565b6130c16130b98261309a565b84845461301c565b825550505050565b600090565b6130d66130c9565b6130e18184846130a4565b505050565b5b81811015613105576130fa6000826130ce565b6001810190506130e7565b5050565b601f82111561314a5761311b81612fea565b61312484612fff565b81016020851015613133578190505b61314761313f85612fff565b8301826130e6565b50505b505050565b600082821c905092915050565b600061316d6000198460080261314f565b1980831691505092915050565b6000613186838361315c565b9150826002028217905092915050565b61319f82611dd9565b67ffffffffffffffff8111156131b8576131b76126ff565b5b6131c28254612909565b6131cd828285613109565b600060209050601f83116001811461320057600084156131ee578287015190505b6131f8858261317a565b865550613260565b601f19841661320e86612fea565b60005b8281101561323657848901518255600182019150602085019450602081019050613211565b86831015613253578489015161324f601f89168261315c565b8355505b6001600288020188555050505b505050505050565b6003811061327957613278612c5d565b5b50565b600081905061328a82613268565b919050565b600061329a8261327c565b9050919050565b6132aa8161328f565b82525050565b600060408201905081810360008301526132ca8185611e30565b90506132d960208301846132a1565b939250505056fea2646970667358221220f7c4f0e12bd87d0bf8493fbfb703a82b32b99b8612dd8177034a3a2af4fb88dd64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063a147d93211610066578063a147d93214610157578063b6bd839614610175578063c9d27afe14610191578063cceb68f5146101ad578063eccc51fd146101cb57610093565b8063013cf08b1461009857806308ae4b0c146100d05780632ada2596146101035780639eab525314610136575b600080fd5b6100b260048036038101906100ad9190611d9d565b6101e7565b6040516100c799989796959493929190611f00565b60405180910390f35b6100ea60048036038101906100e59190611fc7565b6103ac565b6040516100fa949392919061200d565b60405180910390f35b61011d60048036038101906101189190611fc7565b610409565b60405161012d949392919061200d565b60405180910390f35b61013e6104a3565b60405161014e949392919061234a565b60405180910390f35b61015f610858565b60405161016c91906123ab565b60405180910390f35b61018f600480360381019061018a919061241e565b6108e6565b005b6101ab60048036038101906101a6919061249d565b610e5c565b005b6101b5611347565b6040516101c291906126d3565b60405180910390f35b6101e560048036038101906101e0919061284f565b61164e565b005b600360205280600052604060002060009150905080600001549080600101805461021090612909565b80601f016020809104026020016040519081016040528092919081815260200182805461023c90612909565b80156102895780601f1061025e57610100808354040283529160200191610289565b820191906000526020600020905b81548152906001019060200180831161026c57829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16908060020160159054906101000a900460ff16908060030180546102ea90612909565b80601f016020809104026020016040519081016040528092919081815260200182805461031690612909565b80156103635780601f1061033857610100808354040283529160200191610363565b820191906000526020600020905b81548152906001019060200180831161034657829003601f168201915b5050505050908060040160009054906101000a900463ffffffff16908060040160049054906101000a900463ffffffff16908060040160089054906101000a900460030b905089565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16908060010154908060020154905084565b6000806000806000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160000160149054906101000a900460ff16826001015483600201549450945094509450509193509193565b606080606080600060048054905067ffffffffffffffff8111156104ca576104c96126ff565b5b6040519080825280602002602001820160405280156104f85781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff81111561051c5761051b6126ff565b5b60405190808252806020026020018201604052801561054a5781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff81111561056e5761056d6126ff565b5b60405190808252806020026020018201604052801561059c5781602001602082028036833780820191505090505b509050600060048054905067ffffffffffffffff8111156105c0576105bf6126ff565b5b6040519080825280602002602001820160405280156105ee5781602001602082028036833780820191505090505b50905060005b600480549050811015610841576000600482815481106106175761061661293a565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168683815181106106ba576106b961293a565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff168583815181106107575761075661293a565b5b602002602001019015159081151581525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101548483815181106107bf576107be61293a565b5b602002602001018181525050600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201548383815181106108215761082061293a565b5b60200260200101818152505050808061083990612998565b9150506105f4565b508383838397509750975097505050505090919293565b606060048054806020026020016040519081016040528092919081815260200182805480156108dc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610892575b5050505050905090565b6040516020016108f590612a37565b60405160208183030381529060405280519060200120600060405160200161091c90612a98565b604051602081830303815290604052805190602001208203610a5f57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161098b90612a37565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1680610a495750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610a1690612a98565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b610a57576000905080610a5d565b60019050805b505b604051602001610a6e90612a37565b604051602081830303815290604052805190602001208203610b2557600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610add90612a37565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16610b1d576000905080610b23565b60019050805b505b6001151581151514610b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6390612af9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610bdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd290612b65565b60405180910390fd5b6000801b8403610c20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1790612bd1565b60405180910390fd5b60001515600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160149054906101000a900460ff16151514610cb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cad90612c3d565b60405180910390fd5b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050858160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018160000160146101000a81548160ff0219169083151502179055508481600101819055504281600201819055506001816003016000610d7c87611b32565b815260200190815260200160002060006101000a81548160ff0219169083151502179055506004869080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508573ffffffffffffffffffffffffffffffffffffffff167fbe61d680988ec1460d4972efa07e74ca182afcee5ffacb887cf9ac6ed0e3d2568686604051610e4c929190612cd4565b60405180910390a2505050505050565b604051602001610e6b90612a98565b604051602081830303815290604052805190602001206000604051602001610e9290612a98565b604051602081830303815290604052805190602001208203610fd557600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610f0190612a37565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1680610fbf5750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000604051602001610f8c90612a98565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b610fcd576000905080610fd3565b60019050805b505b604051602001610fe490612a37565b60405160208183030381529060405280519060200120820361109b57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161105390612a37565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16611093576000905080611099565b60019050805b505b60011515811515146110e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d990612af9565b60405180910390fd5b6000600360008681526020019081526020016000209050600115158160020160149054906101000a900460ff16151514611151576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114890612d49565b60405180910390fd5b600115158160020160159054906101000a900460ff161515146111a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a090612db5565b60405180910390fd5b8060040160049054906101000a900463ffffffff1663ffffffff164210611205576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111fc90612e21565b60405180910390fd5b8060040160009054906101000a900463ffffffff1663ffffffff16421015611262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125990612e8d565b60405180910390fd5b83156112b05780600401600881819054906101000a900460030b8092919061128990612ead565b91906101000a81548163ffffffff021916908360030b63ffffffff16021790555050611306565b60036000868152602001908152602001600020600401600881819054906101000a900460030b809291906112e390612ed9565b91906101000a81548163ffffffff021916908360030b63ffffffff160217905550505b847f86abfce99b7dd908bec0169288797f85049ec73cbe046ed9de818fab3a497ae08533604051611338929190612f21565b60405180910390a25050505050565b606060006113556000611bee565b905060008167ffffffffffffffff811115611373576113726126ff565b5b6040519080825280602002602001820160405280156113ac57816020015b611399611cde565b8152602001906001900390816113915790505b50905060005b828110156116455760006001826113c99190612f4a565b9050600060036000838152602001908152602001600020905080604051806101200160405290816000820154815260200160018201805461140990612909565b80601f016020809104026020016040519081016040528092919081815260200182805461143590612909565b80156114825780601f1061145757610100808354040283529160200191611482565b820191906000526020600020905b81548152906001019060200180831161146557829003601f168201915b505050505081526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff161515151581526020016002820160159054906101000a900460ff1615151515815260200160038201805461152790612909565b80601f016020809104026020016040519081016040528092919081815260200182805461155390612909565b80156115a05780601f10611575576101008083540402835291602001916115a0565b820191906000526020600020905b81548152906001019060200180831161158357829003601f168201915b505050505081526020016004820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160049054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016004820160089054906101000a900460030b60030b60030b815250508484815181106116255761162461293a565b5b60200260200101819052505050808061163d90612998565b9150506113b2565b50809250505090565b60405160200161165d90612a98565b60405160208183030381529060405280519060200120600060405160200161168490612a98565b6040516020818303038152906040528051906020012082036117c757600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160006040516020016116f390612a37565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16806117b15750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161177e90612a98565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff165b6117bf5760009050806117c5565b60019050805b505b6040516020016117d690612a37565b60405160208183030381529060405280519060200120820361188d57600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600060405160200161184590612a37565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff1661188557600090508061188b565b60019050805b505b60011515811515146118d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cb90612af9565b60405180910390fd5b600a855111611918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190f90612fca565b60405180910390fd5b6119226000611bfc565b600061192e6000611bee565b90506040518061012001604052808281526020018681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016001151581526020016001151581526020018781526020014263ffffffff16815260200161199186611c12565b63ffffffff168152602001600060030b815250600360008381526020019081526020016000206000820151816000015560208201518160010190816119d69190613196565b5060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff02191690831515021790555060808201518160020160156101000a81548160ff02191690831515021790555060a0820151816003019081611a739190613196565b5060c08201518160040160006101000a81548163ffffffff021916908363ffffffff16021790555060e08201518160040160046101000a81548163ffffffff021916908363ffffffff1602179055506101008201518160040160086101000a81548163ffffffff021916908360030b63ffffffff160217905550905050807fd54d24c2f5d3c070ed74aa4a4926cc273f4bdf17b66ce3d0a6493b11da160e288786604051611b229291906132b0565b60405180910390a2505050505050565b6000806001811115611b4757611b46612c5d565b5b826001811115611b5a57611b59612c5d565b5b03611b8b57604051602001611b6e90612a98565b604051602081830303815290604052805190602001209050611be9565b600180811115611b9e57611b9d612c5d565b5b826001811115611bb157611bb0612c5d565b5b03611be257604051602001611bc590612a37565b604051602081830303815290604052805190602001209050611be9565b6000801b90505b919050565b600081600001549050919050565b6001816000016000828254019250508190555050565b6000806002811115611c2757611c26612c5d565b5b826002811115611c3a57611c39612c5d565b5b03611c55576201518042611c4e9190612f4a565b9050611cd9565b60016002811115611c6957611c68612c5d565b5b826002811115611c7c57611c7b612c5d565b5b03611c975762093a8042611c909190612f4a565b9050611cd9565b600280811115611caa57611ca9612c5d565b5b826002811115611cbd57611cbc612c5d565b5b03611cd8576224ea0042611cd19190612f4a565b9050611cd9565b5b919050565b6040518061012001604052806000815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160001515815260200160001515815260200160608152602001600063ffffffff168152602001600063ffffffff168152602001600060030b81525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611d7a81611d67565b8114611d8557600080fd5b50565b600081359050611d9781611d71565b92915050565b600060208284031215611db357611db2611d5d565b5b6000611dc184828501611d88565b91505092915050565b611dd381611d67565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611e13578082015181840152602081019050611df8565b60008484015250505050565b6000601f19601f8301169050919050565b6000611e3b82611dd9565b611e458185611de4565b9350611e55818560208601611df5565b611e5e81611e1f565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611e9482611e69565b9050919050565b611ea481611e89565b82525050565b60008115159050919050565b611ebf81611eaa565b82525050565b600063ffffffff82169050919050565b611ede81611ec5565b82525050565b60008160030b9050919050565b611efa81611ee4565b82525050565b600061012082019050611f16600083018c611dca565b8181036020830152611f28818b611e30565b9050611f37604083018a611e9b565b611f446060830189611eb6565b611f516080830188611eb6565b81810360a0830152611f638187611e30565b9050611f7260c0830186611ed5565b611f7f60e0830185611ed5565b611f8d610100830184611ef1565b9a9950505050505050505050565b611fa481611e89565b8114611faf57600080fd5b50565b600081359050611fc181611f9b565b92915050565b600060208284031215611fdd57611fdc611d5d565b5b6000611feb84828501611fb2565b91505092915050565b6000819050919050565b61200781611ff4565b82525050565b60006080820190506120226000830187611e9b565b61202f6020830186611eb6565b61203c6040830185611ffe565b6120496060830184611dca565b95945050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61208781611e89565b82525050565b6000612099838361207e565b60208301905092915050565b6000602082019050919050565b60006120bd82612052565b6120c7818561205d565b93506120d28361206e565b8060005b838110156121035781516120ea888261208d565b97506120f5836120a5565b9250506001810190506120d6565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61214581611eaa565b82525050565b6000612157838361213c565b60208301905092915050565b6000602082019050919050565b600061217b82612110565b612185818561211b565b93506121908361212c565b8060005b838110156121c15781516121a8888261214b565b97506121b383612163565b925050600181019050612194565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61220381611ff4565b82525050565b600061221583836121fa565b60208301905092915050565b6000602082019050919050565b6000612239826121ce565b61224381856121d9565b935061224e836121ea565b8060005b8381101561227f5781516122668882612209565b975061227183612221565b925050600181019050612252565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6122c181611d67565b82525050565b60006122d383836122b8565b60208301905092915050565b6000602082019050919050565b60006122f78261228c565b6123018185612297565b935061230c836122a8565b8060005b8381101561233d57815161232488826122c7565b975061232f836122df565b925050600181019050612310565b5085935050505092915050565b6000608082019050818103600083015261236481876120b2565b905081810360208301526123788186612170565b9050818103604083015261238c818561222e565b905081810360608301526123a081846122ec565b905095945050505050565b600060208201905081810360008301526123c581846120b2565b905092915050565b6123d681611ff4565b81146123e157600080fd5b50565b6000813590506123f3816123cd565b92915050565b6002811061240657600080fd5b50565b600081359050612418816123f9565b92915050565b60008060006060848603121561243757612436611d5d565b5b600061244586828701611fb2565b9350506020612456868287016123e4565b925050604061246786828701612409565b9150509250925092565b61247a81611eaa565b811461248557600080fd5b50565b60008135905061249781612471565b92915050565b600080604083850312156124b4576124b3611d5d565b5b60006124c285828601611d88565b92505060206124d385828601612488565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b600061252582611dd9565b61252f8185612509565b935061253f818560208601611df5565b61254881611e1f565b840191505092915050565b61255c81611ec5565b82525050565b61256b81611ee4565b82525050565b60006101208301600083015161258a60008601826122b8565b50602083015184820360208601526125a2828261251a565b91505060408301516125b7604086018261207e565b5060608301516125ca606086018261213c565b5060808301516125dd608086018261213c565b5060a083015184820360a08601526125f5828261251a565b91505060c083015161260a60c0860182612553565b5060e083015161261d60e0860182612553565b50610100830151612632610100860182612562565b508091505092915050565b60006126498383612571565b905092915050565b6000602082019050919050565b6000612669826124dd565b61267381856124e8565b935083602082028501612685856124f9565b8060005b858110156126c157848403895281516126a2858261263d565b94506126ad83612651565b925060208a01995050600181019050612689565b50829750879550505050505092915050565b600060208201905081810360008301526126ed818461265e565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61273782611e1f565b810181811067ffffffffffffffff82111715612756576127556126ff565b5b80604052505050565b6000612769611d53565b9050612775828261272e565b919050565b600067ffffffffffffffff821115612795576127946126ff565b5b61279e82611e1f565b9050602081019050919050565b82818337600083830152505050565b60006127cd6127c88461277a565b61275f565b9050828152602081018484840111156127e9576127e86126fa565b5b6127f48482856127ab565b509392505050565b600082601f830112612811576128106126f5565b5b81356128218482602086016127ba565b91505092915050565b6003811061283757600080fd5b50565b6000813590506128498161282a565b92915050565b60008060006060848603121561286857612867611d5d565b5b600084013567ffffffffffffffff81111561288657612885611d62565b5b612892868287016127fc565b935050602084013567ffffffffffffffff8111156128b3576128b2611d62565b5b6128bf868287016127fc565b92505060406128d08682870161283a565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061292157607f821691505b602082108103612934576129336128da565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006129a382611d67565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036129d5576129d4612969565b5b600182019050919050565b600081905092915050565b7f41444d494e000000000000000000000000000000000000000000000000000000600082015250565b6000612a216005836129e0565b9150612a2c826129eb565b600582019050919050565b6000612a4282612a14565b9150819050919050565b7f5553455200000000000000000000000000000000000000000000000000000000600082015250565b6000612a826004836129e0565b9150612a8d82612a4c565b600482019050919050565b6000612aa382612a75565b9150819050919050565b7f646f6e2774206861766520636f727265637420726f6c65000000000000000000600082015250565b6000612ae3601783611de4565b9150612aee82612aad565b602082019050919050565b60006020820190508181036000830152612b1281612ad6565b9050919050565b7f616464726573732063616e277420626520300000000000000000000000000000600082015250565b6000612b4f601283611de4565b9150612b5a82612b19565b602082019050919050565b60006020820190508181036000830152612b7e81612b42565b9050919050565b7f6e616d652063616e277420626520300000000000000000000000000000000000600082015250565b6000612bbb600f83611de4565b9150612bc682612b85565b602082019050919050565b60006020820190508181036000830152612bea81612bae565b9050919050565b7f6d656d62657220616c7265616479206578697374730000000000000000000000600082015250565b6000612c27601583611de4565b9150612c3282612bf1565b602082019050919050565b60006020820190508181036000830152612c5681612c1a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110612c9d57612c9c612c5d565b5b50565b6000819050612cae82612c8c565b919050565b6000612cbe82612ca0565b9050919050565b612cce81612cb3565b82525050565b6000604082019050612ce96000830185611ffe565b612cf66020830184612cc5565b9392505050565b7f70726f706f73616c206e6f742076616c69640000000000000000000000000000600082015250565b6000612d33601283611de4565b9150612d3e82612cfd565b602082019050919050565b60006020820190508181036000830152612d6281612d26565b9050919050565b7f70726f706f73616c206e6f742061637469766500000000000000000000000000600082015250565b6000612d9f601383611de4565b9150612daa82612d69565b602082019050919050565b60006020820190508181036000830152612dce81612d92565b9050919050565b7f70726f706f73616c20656e646564000000000000000000000000000000000000600082015250565b6000612e0b600e83611de4565b9150612e1682612dd5565b602082019050919050565b60006020820190508181036000830152612e3a81612dfe565b9050919050565b7f70726f706f73616c206861736e27742073746172746564000000000000000000600082015250565b6000612e77601783611de4565b9150612e8282612e41565b602082019050919050565b60006020820190508181036000830152612ea681612e6a565b9050919050565b6000612eb882611ee4565b9150637fffffff8203612ece57612ecd612969565b5b600182019050919050565b6000612ee482611ee4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000008203612f1657612f15612969565b5b600182039050919050565b6000604082019050612f366000830185611eb6565b612f436020830184611e9b565b9392505050565b6000612f5582611d67565b9150612f6083611d67565b9250828201905080821115612f7857612f77612969565b5b92915050565b7f6e6565642061746c656173742031302063686172616374657273000000000000600082015250565b6000612fb4601a83611de4565b9150612fbf82612f7e565b602082019050919050565b60006020820190508181036000830152612fe381612fa7565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261304c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261300f565b613056868361300f565b95508019841693508086168417925050509392505050565b6000819050919050565b600061309361308e61308984611d67565b61306e565b611d67565b9050919050565b6000819050919050565b6130ad83613078565b6130c16130b98261309a565b84845461301c565b825550505050565b600090565b6130d66130c9565b6130e18184846130a4565b505050565b5b81811015613105576130fa6000826130ce565b6001810190506130e7565b5050565b601f82111561314a5761311b81612fea565b61312484612fff565b81016020851015613133578190505b61314761313f85612fff565b8301826130e6565b50505b505050565b600082821c905092915050565b600061316d6000198460080261314f565b1980831691505092915050565b6000613186838361315c565b9150826002028217905092915050565b61319f82611dd9565b67ffffffffffffffff8111156131b8576131b76126ff565b5b6131c28254612909565b6131cd828285613109565b600060209050601f83116001811461320057600084156131ee578287015190505b6131f8858261317a565b865550613260565b601f19841661320e86612fea565b60005b8281101561323657848901518255600182019150602085019450602081019050613211565b86831015613253578489015161324f601f89168261315c565b8355505b6001600288020188555050505b505050505050565b6003811061327957613278612c5d565b5b50565b600081905061328a82613268565b919050565b600061329a8261327c565b9050919050565b6132aa8161328f565b82525050565b600060408201905081810360008301526132ca8185611e30565b90506132d960208301846132a1565b939250505056fea2646970667358221220f7c4f0e12bd87d0bf8493fbfb703a82b32b99b8612dd8177034a3a2af4fb88dd64736f6c63430008110033",
  "devdoc": {
    "author": "Bram Mathijssen",
    "kind": "dev",
    "methods": {},
    "title": "DAO",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "My DAO",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 93,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_proposalIds",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 96,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_memberIds",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)5_storage"
      },
      {
        "astId": 119,
        "contract": "contracts/DAO.sol:DAO",
        "label": "members",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Member)140_storage)"
      },
      {
        "astId": 124,
        "contract": "contracts/DAO.sol:DAO",
        "label": "proposals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Proposal)159_storage)"
      },
      {
        "astId": 127,
        "contract": "contracts/DAO.sol:DAO",
        "label": "_membersList",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int32": {
        "encoding": "inplace",
        "label": "int32",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_struct(Member)140_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DAO.Member)",
        "numberOfBytes": "32",
        "value": "t_struct(Member)140_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Proposal)159_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DAO.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)159_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 4,
            "contract": "contracts/DAO.sol:DAO",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Member)140_storage": {
        "encoding": "inplace",
        "label": "struct DAO.Member",
        "members": [
          {
            "astId": 129,
            "contract": "contracts/DAO.sol:DAO",
            "label": "memberAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 131,
            "contract": "contracts/DAO.sol:DAO",
            "label": "valid",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 133,
            "contract": "contracts/DAO.sol:DAO",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 135,
            "contract": "contracts/DAO.sol:DAO",
            "label": "memberSince",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 139,
            "contract": "contracts/DAO.sol:DAO",
            "label": "role",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_bytes32,t_bool)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Proposal)159_storage": {
        "encoding": "inplace",
        "label": "struct DAO.Proposal",
        "members": [
          {
            "astId": 142,
            "contract": "contracts/DAO.sol:DAO",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 144,
            "contract": "contracts/DAO.sol:DAO",
            "label": "title",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 146,
            "contract": "contracts/DAO.sol:DAO",
            "label": "creator",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 148,
            "contract": "contracts/DAO.sol:DAO",
            "label": "valid",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 150,
            "contract": "contracts/DAO.sol:DAO",
            "label": "active",
            "offset": 21,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 152,
            "contract": "contracts/DAO.sol:DAO",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 154,
            "contract": "contracts/DAO.sol:DAO",
            "label": "startDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 156,
            "contract": "contracts/DAO.sol:DAO",
            "label": "endDate",
            "offset": 4,
            "slot": "4",
            "type": "t_uint32"
          },
          {
            "astId": 158,
            "contract": "contracts/DAO.sol:DAO",
            "label": "voteCount",
            "offset": 8,
            "slot": "4",
            "type": "t_int32"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}